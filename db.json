{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","path":"dist/report.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/函数式入魔后遗症的一个构思.md","hash":"11daebaddcefb92bad662a9f91b754334631d248","modified":1613791703344},{"_id":"source/_posts/买机记.md","hash":"d24020bbb54192eb44c11c10783a85a24b8310b4","modified":1613791703334},{"_id":"source/_posts/逻辑图的思考-2.md","hash":"c38ba2ffc43663e4381789961c9fb8536504e168","modified":1613791703327},{"_id":"source/_posts/hello.md","hash":"af97cd49950c506f4bbe9fabcd44de8ff3d388c5","modified":1613791334959},{"_id":"source/_posts/域名和网站.md","hash":"82b2318699b99bfdc41555d130256b8cb7bf02fb","modified":1613791703366},{"_id":"source/_posts/配件清单.md","hash":"b4e69dd2380017357f45d9c1d0979aa3dfbf3dfa","modified":1613791703322},{"_id":"source/_posts/就是不一样.md","hash":"b032bf2af5a6e10a79d4953ab522b213850e7796","modified":1613791703318},{"_id":"source/_posts/逻辑图的思考.md","hash":"6becf27f3efd6d8ab562d2c470c4ae57b0675b66","modified":1613791703340},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1573332463374},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1573332463374},{"_id":"themes/cactus/_config.yml","hash":"cab088f874adb95e7ee0543f4a8eb332740323f0","modified":1573358051080},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1573332463375},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1573332463375},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1573332463375},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1573332463376},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1573332463376},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1573332463376},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1573332463376},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1573332463376},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1573332463376},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1573332463376},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1573332463377},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1573332463377},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1573332463377},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1573332463377},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1573332463378},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1573332463378},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1573332463377},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1573332463377},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1573332463381},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1573332463381},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1573332463381},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1573332463381},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1573332463378},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1573332463382},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1573332463382},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1573332463382},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1573332463382},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1573332463382},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1573332463378},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1573332463378},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1573332463378},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1573332463381},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"83d912956b00537e0b20a9905f14885ff3899ed4","modified":1573332463380},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1573332463383},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1573332463382},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1573332463381},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1573332463398},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1573332463383},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1573332463395},{"_id":"themes/cactus/source/css/style.styl","hash":"9a946631f0e59addc57c39bd7f2081b3e9256ab1","modified":1573332463398},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1573332463398},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1573332463399},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1573332463398},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1573332463400},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1573332463379},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1573332463380},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1573332463380},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1573332463399},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"b64021d680f856d24dc17bc8f53674bfe2e241e4","modified":1573332463396},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1573332463397},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1573332463397},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1573332463399},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1573332463397},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1573332463398},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1573332463398},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1573332463401},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1573332463383},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1573332463382},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1573332463383},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1573332463384},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1573332463383},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1573332463384},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1573332463384},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1573332463384},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1573332463384},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1573332463385},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1573332463386},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1573332463387},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1573332463388},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1573332463389},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1573332463390},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1573332463391},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1573332463393},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1573332463392},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1573332463393},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1573332463394},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1573332463393},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1573332463393},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1573332463394},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1573332463394},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1573332463394},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1573332463395},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1573332463395},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1573332463394},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1573332463395},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1573332463395},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1573332463401},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1573332463435},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1573332463435},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1573332463437},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1573332463437},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1573332463439},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1573332463440},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1573332463442},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1573332463442},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1573332463444},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1573332463444},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1573332463397},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1573332463446},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1573332463397},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1573332463401},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1573332463446},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1573332463446},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1573332463407},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1573332463409},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1573332463408},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1573332463410},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1573332463409},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1573332463416},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1573332463417},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1573332463417},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1573332463417},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1573332463434},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1573332463434},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1573332463435},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1573332463436},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1573332463438},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1573332463439},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1573332463441},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1573332463441},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1573332463443},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1573332463442},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1573332463446},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1573332463445},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1573332463402},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1573332463407},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1573332463407},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1573332463416},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1573332463409},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1573332463400},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1573332463415},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1573332463411},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1573332463431},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1573332463429},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1573332463426},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1573332463422},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1573332463424},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1573332463426},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1573332463429},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1573332463432},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1573332463431},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1573332463432},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1573332463427},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1573332463430},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1573332463414},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1573332463406},{"_id":"public/2019/11/22/函数式入魔后遗症的一个构思/index.html","hash":"bfa6010a6d848568ae5ee7c1863717c6699a43ca","modified":1613964249681},{"_id":"public/2019/11/11/域名和网站/index.html","hash":"4ae5eb6a81ec2839d0090c8182d86e438b279012","modified":1613964249681},{"_id":"public/2019/11/11/就是不一样/index.html","hash":"76ab11ebce2db80cce43101967c225f82431f68b","modified":1613964249681},{"_id":"public/2019/11/11/配件清单/index.html","hash":"a9e1b6b31630c1cb778c526803cc49b07803211f","modified":1613964249681},{"_id":"public/2019/11/11/买机记/index.html","hash":"3de9b7d72f46f885ec1d50f66293d3aeee67582c","modified":1613964249681},{"_id":"public/2019/11/10/hello/index.html","hash":"d84ea42b219f0df44df18f86637161e99dd48297","modified":1613964249681},{"_id":"public/archives/index.html","hash":"ae2707944c854760abbdd974e5bf46b3863df38e","modified":1615190799895},{"_id":"public/archives/2019/index.html","hash":"92a7e4e873feda597f5cbda42c3b17ce458c51c1","modified":1613964249681},{"_id":"public/archives/2019/11/index.html","hash":"f06ab24a91696f77604baa3b9cc00c14ccf1a7d2","modified":1613964249681},{"_id":"public/archives/2020/index.html","hash":"8eed45a59f4894efb9b3d557519b7e833bb6d823","modified":1613964249681},{"_id":"public/archives/2020/03/index.html","hash":"24c8f2238cb39bb444f812046eaba33e5929513b","modified":1613964249681},{"_id":"public/index.html","hash":"de537ae60b9f3625d8a7e19a8a70e4d4101af8a3","modified":1615196039647},{"_id":"public/2020/03/11/逻辑图的思考-2/index.html","hash":"d21499af4505bb6cd6284ee4070941a67c948c09","modified":1613964249681},{"_id":"public/2020/03/06/逻辑图的思考/index.html","hash":"1b75bc43481258c6b40a674c9b7d4e2bd2f859a7","modified":1613964249681},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1602907701510},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1602907701510},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1602907701510},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1602907701510},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1602907701510},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1602907701510},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1613786902806},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1602907701510},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1602907701510},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1602907701510},{"_id":"public/css/style.css","hash":"a914678bcfaeace731fb5bb7941c2bd184cece5b","modified":1602907701510},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1602907701510},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1602907701510},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1602907701510},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1602907701510},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1602907701510},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1602907701510},{"_id":"source/about/index.md","hash":"2d0771d6a2b695441dc8bf6e66aba9994329dbf2","modified":1613963924741},{"_id":"public/about/index.html","hash":"e075591517f08306557d8325038fe72b0e17603e","modified":1613964249681},{"_id":"public/sitemap.xml","hash":"9f844013ab652e1c9665c2cc63c430d256c23b6e","modified":1615190799895},{"_id":"source/_posts/鸭蛋和它的妈妈.md","hash":"da685f646149ec4b9d113a3bdde4a835bab6cb08","modified":1613959226584},{"_id":"public/2020/11/13/鸭蛋和它的妈妈/index.html","hash":"215e300a83d1a8dd591a267440f0995b1c3ad820","modified":1613964249681},{"_id":"public/archives/2020/11/index.html","hash":"a80e615dc1091506a450e304910c15e975fa98f4","modified":1613964249681},{"_id":"source/_posts/bash-为自己编程.md","hash":"ce04cd02a43ca03f81690fade208eb7d40a20ae6","modified":1610692728988},{"_id":"source/_posts/混沌时代的编辑器-ed.md","hash":"2004012af6910202683d43763f9088ca9f8f0b39","modified":1613960354818},{"_id":"source/_posts/一串串的的.md","hash":"15d00a5a10e655aa3cf70f61b0d0dd2c63bc9b78","modified":1613791703357},{"_id":"public/2021/01/14/bash-为自己编程/index.html","hash":"c867b808b1483d2a7a0614024860e3045f2193dc","modified":1611137213038},{"_id":"public/2020/12/26/一串串的的/index.html","hash":"e124e631b6bc559602861eaa9d65171619d1ee17","modified":1613964249681},{"_id":"public/page/2/index.html","hash":"b1c0cf9e8895e98ad8c9c2669872938f3a1142d3","modified":1615189549089},{"_id":"public/archives/page/2/index.html","hash":"d53089620e537c215b278ba467b5a13c0829a1cb","modified":1615189549089},{"_id":"public/archives/2020/12/index.html","hash":"c201ae1a18cb344300846ebe928508a4933b9172","modified":1613964249681},{"_id":"public/archives/2021/index.html","hash":"7765935ead30bb83efeb5bd601609af0e0cde7af","modified":1615190799895},{"_id":"public/archives/2021/01/index.html","hash":"f871214dcf221b7c84b7d5aaa4fe7a87609f3418","modified":1613964249681},{"_id":"public/2021/01/14/混沌时代的编辑器-ed/index.html","hash":"67b02148432eb2c87a8fd4639ad64e9e88818d3d","modified":1613964249681},{"_id":"source/_posts/单行命令perl的技巧.md","hash":"c524654fc43acd8e22c7502b2c318ed5eab8b2bf","modified":1613791703354},{"_id":"public/2021/01/20/单行命令perl的技巧/index.html","hash":"8180c012454da4989aebb7ee6b555ecbdd436f0d","modified":1613964249681},{"_id":"source/.DS_Store","hash":"a0f9e63d8a1aa69d22c07f7b1e324da3f75945fa","modified":1611201912438},{"_id":"source/_posts/文件描述符AND水枪.md","hash":"919cea5be5b6559d0fdff048b88653c58f6f0ce9","modified":1614049280961},{"_id":"public/2021/01/27/文件描述符AND水枪/index.html","hash":"ddb866a16285a20120bcf574e3b0669311ddbf26","modified":1614049284718},{"_id":"source/_posts/终极文本分析工具.md","hash":"1aa3ffbab318483cfb56504bb1842cbc9eca5656","modified":1613791703351},{"_id":"public/2021/01/29/终极文本分析工具/index.html","hash":"526f5f6cd7a3e89710eac593cfe60acd9be23e97","modified":1613964249681},{"_id":"source/_posts/IP的一些资料.md","hash":"a8af841ebedbb710cfbe32f05a6f9a698866ba54","modified":1613963616511},{"_id":"public/archives/2021/02/index.html","hash":"bf85c685acf138da238730f086a5ff38a300252d","modified":1614223906485},{"_id":"public/2021/02/02/IP的一些资料/index.html","hash":"d74fa0e0274953c3e8d50cef93e291dcd1fb3d7f","modified":1613964249681},{"_id":"source/_posts/bash的极简生存手册.md","hash":"a94dc1c37f8d6ee417ff9370d4ba779ad9964b2d","modified":1613791334964},{"_id":"public/2021/01/14/bash的极简生存手册/index.html","hash":"67b1cd98380fc91e9af4c5e0e06ce250af166965","modified":1613964249681},{"_id":"source/_posts/2021年读书计划.md","hash":"68d34226bbdeea8f225ed4b6b2bec75d9fa62e09","modified":1612512433542},{"_id":"public/2021/02/05/2021年读书计划/index.html","hash":"ab167abaa46559a7490a6006530937d7b2866004","modified":1612512437441},{"_id":"source/_posts/幻想中的2021年读书计划.md","hash":"62d42eb7b57562abf34b902fe5286c684cd0ee89","modified":1613963616494},{"_id":"public/2021/02/05/幻想中的2021年读书计划/index.html","hash":"0e70dd784c0e13270cc1a3924472b6f3b6f739ae","modified":1613964249681},{"_id":"source/_posts/perl的语境和默认值.md","hash":"5303a4769865333701d6842253c99bf4c38bcfc9","modified":1613963616505},{"_id":"public/2021/02/08/perl的语境和默认值/index.html","hash":"9a78ba0a3968ba3b3eafb9b88ec2146377f7b429","modified":1613964249681},{"_id":"source/_posts/闭包的思考.md","hash":"005d60f153e9f60b750f3b80e4079e0cfe09894f","modified":1613963697270},{"_id":"public/2021/02/18/闭包的思考/index.html","hash":"f449ee940013c3eef308b71dc20344c1071ac4cc","modified":1613964249681},{"_id":"source/_posts/最大公约数的人话.md","hash":"d3762435517c12ce6784d3b6b223529b2f8d71a0","modified":1613728085120},{"_id":"public/2021/02/19/最大公约数的人话/index.html","hash":"befebd88f7f483059579b7f07dfb3399d7821419","modified":1613728111565},{"_id":"source/_posts/最大公约数的人话描述.md","hash":"3a6dbce8e3a415f5512d0b4b4215c6343d094dec","modified":1613791703347},{"_id":"public/2021/02/19/最大公约数的人话描述/index.html","hash":"8d58c00914fdc243fdb34ac2940041c44ae9cb8e","modified":1613979475201},{"_id":"node_modules/hexo-theme-ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"f796204bb2ac2065b35ab9e0e1937f3cbd4a6d30","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"3e7e1618cc72c269e5fdc28e97cafb8b7b90ccd9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"5c719ebe31a3b683b624b2efe5035d05ef09ad14","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/_config.yml","hash":"18c8b59c29fc38d29f877d3ae91ff7563de46add","modified":1613790446445},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"7b516d228f6175a079e260f1d5eb105644bacd15","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"7d44c39c9ab9c6f0b2e592e9f02a0b6b1b35daa8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"6d645ed779b8427e5bb5c87c5989f3013c613baf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"e6849a6c716b588bb17e19f72a61965c74570421","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"2faf5999099765bd662d0979e35e0d43d06bd63c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"deb03585d492faac20c360b3d96a1a7331dc0f78","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"86518a4aa58bdbd57361eb2340b2d5e9a684a035","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"8ec0eacefc2ca124bafc86fe4fb23bd2b9cad8ab","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"22f2e2310d7025b03950f450865a6c3ae66fe677","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"768ed9dc0161990dcdfdc4054ec281dda4d7a33e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"14d1fa64b52a252e2ed54a682c5d47b128780dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"68ddd866f1e74515cfe92faa5a37a067d9308142","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"363fd530b1a455992f93ff7163518d30413caadd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"b1395f87d2b6eaaed6eee6f0673e724e20a439c2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"a9865e7262d4a5b5a724685f99db1846a1cbd168","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"af6ae47b0cb5028089f72803312356e95309e69b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"d58608ace6070c2ae65672d524a336ce1641ded4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"3753c4505761a66faccf736816f053e1e3489982","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"6106e6f53be4bbc13fe8a69ed6d40052bdeb49f8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"e8fd85622f774be877438421c182cd37eb15196e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"acc2b740765f8fc3b0e8c27f3226cc74b865f127","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"4c7a9191658395bcac45dcd07c165af8773cffa9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"b8514325f462a99abefa922747312a907dc0140b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"bc41af88b2b85f638ab7bd4cf0b227510ccb0108","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"c93c96bccfafe568cebbeb14bf577e97cb6e3c64","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":499162500000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":499162500000},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1613786902806},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1613786902806},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1613786902806},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1613786902806},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1613786902806},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1613786902806},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1613786902806},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1613786902806},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1613786902806},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1613786902806},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1613786902806},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1613786902806},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1613786902806},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1613786902806},{"_id":"public/404.html","hash":"6f7743b6fceb16708c89cde40d66a3fa18f24a1d","modified":1613786902806},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1613786902806},{"_id":"public/css/custom.css","hash":"78b13bf5b98278ff65cdb0a731f2a1c98b2324a5","modified":1613786902806},{"_id":"public/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":1613786902806},{"_id":"public/js/clickBoom1.js","hash":"56582907b4c2ece5187b8d64125f91ddabb8a24e","modified":1613786902806},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1613786902806},{"_id":"public/js/clickBoom2.js","hash":"bea5232eb8b32542283d9a28257f4b85ce2f3c1b","modified":1613786902806},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1613786902806},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1613786902806},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1613786902806},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1613786902806},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1613786902806},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1613786902806},{"_id":"public/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":1613786902806},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1613786902806},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1613786902806},{"_id":"public/dist/report.html","hash":"cc78bfe345c800fbabd89cf46f7848c7f3a002fd","modified":1613786902806},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1613786902806},{"_id":"public/tags/ip/index.html","hash":"8f64197ec858b9fc18a70f52cbbd3311b056b23f","modified":1613964249681},{"_id":"public/tags/bash-linux/index.html","hash":"8dae3ff03ff4b2dee59f72d4d53600a37c7ec287","modified":1613791082192},{"_id":"public/tags/hello/index.html","hash":"e51ce9351ea1360046de1eb4ad8913330123d4d4","modified":1613964249681},{"_id":"public/tags/perl/index.html","hash":"d710cd2eb458fdc5a9713334df3f0ff661e7aa8b","modified":1613964249681},{"_id":"public/tags/乱语/index.html","hash":"dbb04252477ea7848bc24074413436158d41001f","modified":1613964249681},{"_id":"public/tags/MBP13/index.html","hash":"494ed2383e6a88a900889699893a6404f62dee01","modified":1613964249681},{"_id":"public/tags/函数式-乱语/index.html","hash":"dc1916e58cf35136d43d69045c0baa4785e1d4db","modified":1613791082192},{"_id":"public/tags/site/index.html","hash":"9d5caa0a84438432a414c2471e7a067ed43f5b63","modified":1613964249681},{"_id":"public/tags/乱语-读书/index.html","hash":"af37a0f6167fd6678f137ef50af047c422ba6209","modified":1613791082192},{"_id":"public/tags/linux-bash/index.html","hash":"83daad5f8b54ee04b6235d3b83e5754603ef1a03","modified":1613791082192},{"_id":"public/tags/算法-乱语/index.html","hash":"e3b2f99af09ecab4910607094c85798e26a3e498","modified":1613791082192},{"_id":"public/tags/编辑器-linux/index.html","hash":"f2aa9a8426cf0c430929e61afa68d82df6fe4730","modified":1613791082192},{"_id":"public/tags/编译器/index.html","hash":"299dfcfb8e618d5f9a2d81ceabe9d66b85c47444","modified":1613964249681},{"_id":"public/tags/逻辑门/index.html","hash":"35fc42e2b6ecb27228ade9455cf24e3f273d173a","modified":1613964249681},{"_id":"public/tags/函数式/index.html","hash":"e63529c233c2f684f52b555163035761c20dc403","modified":1613964249681},{"_id":"public/tags/JavaScript-乱语/index.html","hash":"27616c71c1146194a6b1c517f3f312a030306406","modified":1613791082192},{"_id":"public/tags/bash/index.html","hash":"4e2a1ead13dcf5ca6f361891ce59f9032619ce3a","modified":1613964249681},{"_id":"public/tags/linux/index.html","hash":"ed8f745067c1abf1cdff005d774c73130676b5d9","modified":1613964249681},{"_id":"source/tags/index.md","hash":"314f97024aebfdc08cf0d5b965ec538377fa9942","modified":1613791417635},{"_id":"public/tags/index.html","hash":"4f48dbf35019171c00a844f37674cb0d58eb1004","modified":1613964249681},{"_id":"public/tags/读书/index.html","hash":"89512e80dc4d840098932cb8a73a1cf92e13555f","modified":1613964249681},{"_id":"public/tags/算法/index.html","hash":"e6bf045bcd697b6dfd69be2a9ad00e8579e77785","modified":1613964249681},{"_id":"public/tags/编辑器/index.html","hash":"93feff5c2069481086b294497c52635bdbbb99a2","modified":1613964249681},{"_id":"public/tags/JavaScript/index.html","hash":"009085f94012c234d1f24965c2e63b9e2af8f2cb","modified":1613964249681},{"_id":"source/_posts/数据结构之偶感.md","hash":"361e1adbfe3c407609fb6fefb91ec49d3769a927","modified":1614046698337},{"_id":"public/2021/02/22/数据结构之偶感/index.html","hash":"daa57dacd444155a59f5465f44a74d3a502ad2d8","modified":1614046713345},{"_id":"public/archives/page/3/index.html","hash":"e2b883992fba753cb3a97b8296a87907a6e862d1","modified":1615189549089},{"_id":"public/archives/2021/page/2/index.html","hash":"408dd28d028ca3f1d65b902f3a5a6d8dea49a8aa","modified":1615189549089},{"_id":"public/page/3/index.html","hash":"e50aff2aea08b392ae0ac9749e29460539cd4004","modified":1615189549089},{"_id":"source/_posts/质数之想破头.md","hash":"a25b5f7171626e5d88323d8fc320d3ddb8103318","modified":1614048455262},{"_id":"public/2021/02/22/质数之想破头/index.html","hash":"91d0d33d4bea1337b2620bde449bdba5c43da0ac","modified":1614048458991},{"_id":"source/_posts/推粪球.md","hash":"679f1df63ab85e0cef56baf66d7b2b2f3794e728","modified":1614067839317},{"_id":"public/2021/02/23/推粪球/index.html","hash":"e9e4044a6542866b04292d6afab8117c48c10aa3","modified":1614067841535},{"_id":"source/_posts/小型排序和大型排序.md","hash":"ccda20aadafae8d77db721f826d525045e9f1e76","modified":1614066778042},{"_id":"public/2021/02/23/小型排序和大型排序/index.html","hash":"ae31292b3ca5e2051e4dd2b99b8b3ab40197db37","modified":1614073323340},{"_id":"source/_posts/只做表面工作的堆.md","hash":"c8d511e8f8e6b07517096f874e6141a75c60016a","modified":1614073906057},{"_id":"public/2021/02/23/只做表面工作的堆/index.html","hash":"0b5a1484606b4a5e4df832940afc7881b295c490","modified":1614223906485},{"_id":"source/_posts/高数苦海的救命稻草.md","hash":"7a3f1a7964a1341b3661b8f7f149ff4316d00692","modified":1614224119389},{"_id":"public/2021/02/25/高数苦海的救命稻草/index.html","hash":"006ecb146c9e21779c4f3809d00af1b4994db264","modified":1614653879870},{"_id":"public/archives/2021/02/page/2/index.html","hash":"be374973adefd9ec40f92134d6d3806dadc48731","modified":1614223906485},{"_id":"source/_posts/为了封装变化.md","hash":"5495d9856db0d6ede6282e5f946029aaf2b53dc8","modified":1614756036899},{"_id":"public/2021/03/01/为了封装变化/index.html","hash":"e1787b3c5670f93fea19107ba1c34fa9f0d51e24","modified":1614928908513},{"_id":"public/archives/2021/03/index.html","hash":"512f7153027b4f74ecfb1d3cebcbd2d809963b58","modified":1615190799895},{"_id":"source/_posts/设计原则.md","hash":"3b512c26a3cb0f115ebfd2acad6d2e37dabc0c68","modified":1614931746743},{"_id":"public/2021/03/05/设计原则/index.html","hash":"79a5a7865e0e6a4bdd06165770eb07f026f05ec3","modified":1615171446887},{"_id":"source/_posts/电磁切割偶感.md","hash":"42eb2518e50a80b03b5f06e5c211fe923c93da02","modified":1615171440256},{"_id":"public/2021/03/08/电磁切割偶感/index.html","hash":"ab6fce5f8156efce90ad5364e859b9624c80bccd","modified":1615172666635},{"_id":"source/_posts/不一样的栈面试题.md","hash":"dc73cd629d825b9a59807e71f672dd581df75593","modified":1615172734340},{"_id":"public/2021/03/08/不一样的栈面试题/index.html","hash":"ce19eb95ecbd943df6d00bca7b71c33eac62bd22","modified":1615190799895},{"_id":"source/_posts/对数表和计算器.md","hash":"f890d54973c0041dd1da80a841b9df813fbdac20","modified":1615190227025},{"_id":"public/2021/03/08/对数表和计算器/index.html","hash":"4e8b61aeb5d0dae9dffed87efcadb695abf94244","modified":1615190230187},{"_id":"public/page/4/index.html","hash":"cb18e83f7b311a66612c0c18673a64122ab7e2ae","modified":1615189549089},{"_id":"public/archives/page/4/index.html","hash":"359f2a1827be4d7d82847838b7d9818e81b3f60c","modified":1615189549089},{"_id":"public/archives/2021/page/3/index.html","hash":"61208d065e0cbca76954341ac2321a1384bfa880","modified":1615189549089},{"_id":"source/_posts/人肉演算、对数表、计算器.md","hash":"872c0faa3af0559c399903985c1caa14535d2c8c","modified":1615190400310},{"_id":"public/2021/03/08/人肉演算、对数表、计算器/index.html","hash":"2dd097fd5ea6e2d9b36b3181c9cfc10a3b6cb06d","modified":1615190405128},{"_id":"source/_posts/纯人肉算力、查对数表、计算器.md","hash":"01d427f95e50cbce27bed81a1dad8b97fa0aa83f","modified":1615196037239},{"_id":"public/2021/03/08/纯人肉算力、查对数表、计算器/index.html","hash":"4820c7f58975541c146a3445868a807faf2a3639","modified":1615196039647}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-10-17T04:15:58.000Z","_content":"#### MacOS Big Sur   \n 版本 11.2.1 (20D74)\n\n#### MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)  \n处理器 2.4 GHz 四核Intel Core i5  \n内存 16 GB 2133 MHz LPDDR3  \n图形卡 Intel Iris Plus Graphics 655 1536 MB\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-17 12:15:58\n---\n#### MacOS Big Sur   \n 版本 11.2.1 (20D74)\n\n#### MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)  \n处理器 2.4 GHz 四核Intel Core i5  \n内存 16 GB 2133 MHz LPDDR3  \n图形卡 Intel Iris Plus Graphics 655 1536 MB\n","updated":"2021-02-22T03:18:44.741Z","path":"about/index.html","_id":"ckgd65bw700008bu2fqjk5al1","comments":1,"layout":"page","content":"<h4 id=\"MacOS-Big-Sur\"><a href=\"#MacOS-Big-Sur\" class=\"headerlink\" title=\"MacOS Big Sur\"></a>MacOS Big Sur</h4><p> 版本 11.2.1 (20D74)</p>\n<h4 id=\"MacBook-Pro-13-inch-2019-Four-Thunderbolt-3-ports\"><a href=\"#MacBook-Pro-13-inch-2019-Four-Thunderbolt-3-ports\" class=\"headerlink\" title=\"MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)\"></a>MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)</h4><p>处理器 2.4 GHz 四核Intel Core i5<br>内存 16 GB 2133 MHz LPDDR3<br>图形卡 Intel Iris Plus Graphics 655 1536 MB</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MacOS-Big-Sur\"><a href=\"#MacOS-Big-Sur\" class=\"headerlink\" title=\"MacOS Big Sur\"></a>MacOS Big Sur</h4><p> 版本 11.2.1 (20D74)</p>\n<h4 id=\"MacBook-Pro-13-inch-2019-Four-Thunderbolt-3-ports\"><a href=\"#MacBook-Pro-13-inch-2019-Four-Thunderbolt-3-ports\" class=\"headerlink\" title=\"MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)\"></a>MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)</h4><p>处理器 2.4 GHz 四核Intel Core i5<br>内存 16 GB 2133 MHz LPDDR3<br>图形卡 Intel Iris Plus Graphics 655 1536 MB</p>\n"},{"title":"tags","date":"2021-02-20T03:23:37.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-20 11:23:37\n---\n","updated":"2021-02-20T03:23:37.635Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckld5rvku00001uo8dg0t8uy7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hello","date":"2019-11-09T21:14:08.000Z","_content":"\nhello world\n","source":"_posts/hello.md","raw":"---\ntitle: hello\ndate: 2019-11-10 05:14:08\ntags: [hello]\n---\n\nhello world\n","slug":"hello","published":1,"updated":"2021-02-20T03:22:14.959Z","_id":"ckgd5uy9i0000y4u29wyk8x6m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>hello world</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hello world</p>\n"},{"title":"买机记","date":"2019-11-11T05:21:35.000Z","_content":"环滁皆山也。\n新公司的领导看见我背着17寸的微星游戏本，说我们开发都用MBP13的，你也买一个吧。\n我没有狠下心，一个星期后就到了十一，我反思这周背的有点累，就去看看MBP。\n苹果的专卖店去看过，攒动的人头，像是抢购一样，看的心慌，冲动消费啊。\n就打算回去上网查查，15的肯定买不起，Air的又太弱，只有mpb13适合我。\n京东上只有标准版，就去官网看了定制版，最后在淘宝下单。\n似乎很谨慎，似乎很莽撞。\n拿到的那三天没有出门，都在折腾这个。\n真轻！比那个游戏本的电源适配器都轻。\n就靠你吃饭了，兄弟。\n","source":"_posts/买机记.md","raw":"---\ntitle: 买机记\ndate: 2019-11-11 13:21:35\ntags: [MBP13]\n---\n环滁皆山也。\n新公司的领导看见我背着17寸的微星游戏本，说我们开发都用MBP13的，你也买一个吧。\n我没有狠下心，一个星期后就到了十一，我反思这周背的有点累，就去看看MBP。\n苹果的专卖店去看过，攒动的人头，像是抢购一样，看的心慌，冲动消费啊。\n就打算回去上网查查，15的肯定买不起，Air的又太弱，只有mpb13适合我。\n京东上只有标准版，就去官网看了定制版，最后在淘宝下单。\n似乎很谨慎，似乎很莽撞。\n拿到的那三天没有出门，都在折腾这个。\n真轻！比那个游戏本的电源适配器都轻。\n就靠你吃饭了，兄弟。\n","slug":"买机记","published":1,"updated":"2021-02-20T03:28:23.334Z","_id":"ckgd5uy9m0001y4u24w0u25mz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>环滁皆山也。<br>新公司的领导看见我背着17寸的微星游戏本，说我们开发都用MBP13的，你也买一个吧。<br>我没有狠下心，一个星期后就到了十一，我反思这周背的有点累，就去看看MBP。<br>苹果的专卖店去看过，攒动的人头，像是抢购一样，看的心慌，冲动消费啊。<br>就打算回去上网查查，15的肯定买不起，Air的又太弱，只有mpb13适合我。<br>京东上只有标准版，就去官网看了定制版，最后在淘宝下单。<br>似乎很谨慎，似乎很莽撞。<br>拿到的那三天没有出门，都在折腾这个。<br>真轻！比那个游戏本的电源适配器都轻。<br>就靠你吃饭了，兄弟。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>环滁皆山也。<br>新公司的领导看见我背着17寸的微星游戏本，说我们开发都用MBP13的，你也买一个吧。<br>我没有狠下心，一个星期后就到了十一，我反思这周背的有点累，就去看看MBP。<br>苹果的专卖店去看过，攒动的人头，像是抢购一样，看的心慌，冲动消费啊。<br>就打算回去上网查查，15的肯定买不起，Air的又太弱，只有mpb13适合我。<br>京东上只有标准版，就去官网看了定制版，最后在淘宝下单。<br>似乎很谨慎，似乎很莽撞。<br>拿到的那三天没有出门，都在折腾这个。<br>真轻！比那个游戏本的电源适配器都轻。<br>就靠你吃饭了，兄弟。</p>\n"},{"title":"函数式入魔后遗症的一个构思","date":"2019-11-22T02:32:39.000Z","_content":"\n看了几本关于函数式的书和一堆博客后，一直想拿个东西练练手。\nphp7已经有匿名函数立即执行，例如 \n```php\n(function(){echo \"hello\";})()\n```\n这是不够的。\n以前写个一个公共方法，它接收一个匿名函数，让这个匿名函数处理特定的逻辑。\n现在我想到了它，我决定做的更纯粹，公共方法只提供数据，传入的匿名函数来处理逻辑。\n先做着，一两个月后再看看是否有问题。\n","source":"_posts/函数式入魔后遗症的一个构思.md","raw":"---\ntitle: 函数式入魔后遗症的一个构思\ndate: 2019-11-22 10:32:39\ntags: [函数式,乱语]\n---\n\n看了几本关于函数式的书和一堆博客后，一直想拿个东西练练手。\nphp7已经有匿名函数立即执行，例如 \n```php\n(function(){echo \"hello\";})()\n```\n这是不够的。\n以前写个一个公共方法，它接收一个匿名函数，让这个匿名函数处理特定的逻辑。\n现在我想到了它，我决定做的更纯粹，公共方法只提供数据，传入的匿名函数来处理逻辑。\n先做着，一两个月后再看看是否有问题。\n","slug":"函数式入魔后遗症的一个构思","published":1,"updated":"2021-02-20T03:28:23.344Z","_id":"ckgd5uy9n0002y4u2hrvh6jrn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看了几本关于函数式的书和一堆博客后，一直想拿个东西练练手。<br>php7已经有匿名函数立即执行，例如 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;hello&quot;</span>;&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这是不够的。<br>以前写个一个公共方法，它接收一个匿名函数，让这个匿名函数处理特定的逻辑。<br>现在我想到了它，我决定做的更纯粹，公共方法只提供数据，传入的匿名函数来处理逻辑。<br>先做着，一两个月后再看看是否有问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看了几本关于函数式的书和一堆博客后，一直想拿个东西练练手。<br>php7已经有匿名函数立即执行，例如 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;hello&quot;</span>;&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这是不够的。<br>以前写个一个公共方法，它接收一个匿名函数，让这个匿名函数处理特定的逻辑。<br>现在我想到了它，我决定做的更纯粹，公共方法只提供数据，传入的匿名函数来处理逻辑。<br>先做着，一两个月后再看看是否有问题。</p>\n"},{"title":"逻辑图的思考-2","date":"2020-03-11T02:31:10.000Z","_content":"\n## 二元逻辑图\n> 第一镜像线   \n> 第二镜像线\n\n### 1.符合第一镜像线特性的逻辑图之间可以相互转换 \n```\n{(0,0),(0,1)}与, {(0,1),(1,1)}或, {(1,0),(0,0)}或非, {(1,1),(1,0)}与非, \n{(0,1),(1,0)}异或, {(1,0),(0,1)}异或非, \n{(0,0),(0,0)}常开, {(1,1),(1,1)}常闭\n三种转换方式\n组合，不相干逻辑图的后置取反，第二镜像线对面逻辑图的前置取反\n```\n\n### 2.符合第二镜像线特性的逻辑图之间可以相互转换 \n```\n{(1,0),(1,1)}A蕴含B, {(0,1),(0,0)}A蕴含B非， \n{(0,0),(1,0)}B蕴含B, {(1,1),(0,1)}B蕴含A非\n两种转换方式 \n第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反\n```\n\n### 3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换 \n```\n{(1,0),(1,0)} A非, {(0,1),(0,1)} A线性\n{(1,1),(0,0)} B非, {(0,0),(1,1)} B线性, \n两种转换方式\n第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反\n```\n","source":"_posts/逻辑图的思考-2.md","raw":"---\ntitle: 逻辑图的思考-2\ndate: 2020-03-11 10:31:10\ntags: [逻辑门]\n---\n\n## 二元逻辑图\n> 第一镜像线   \n> 第二镜像线\n\n### 1.符合第一镜像线特性的逻辑图之间可以相互转换 \n```\n{(0,0),(0,1)}与, {(0,1),(1,1)}或, {(1,0),(0,0)}或非, {(1,1),(1,0)}与非, \n{(0,1),(1,0)}异或, {(1,0),(0,1)}异或非, \n{(0,0),(0,0)}常开, {(1,1),(1,1)}常闭\n三种转换方式\n组合，不相干逻辑图的后置取反，第二镜像线对面逻辑图的前置取反\n```\n\n### 2.符合第二镜像线特性的逻辑图之间可以相互转换 \n```\n{(1,0),(1,1)}A蕴含B, {(0,1),(0,0)}A蕴含B非， \n{(0,0),(1,0)}B蕴含B, {(1,1),(0,1)}B蕴含A非\n两种转换方式 \n第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反\n```\n\n### 3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换 \n```\n{(1,0),(1,0)} A非, {(0,1),(0,1)} A线性\n{(1,1),(0,0)} B非, {(0,0),(1,1)} B线性, \n两种转换方式\n第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反\n```\n","slug":"逻辑图的思考-2","published":1,"updated":"2021-02-20T03:28:23.327Z","_id":"ckgd5uy9o0003y4u20969h22i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"二元逻辑图\"><a href=\"#二元逻辑图\" class=\"headerlink\" title=\"二元逻辑图\"></a>二元逻辑图</h2><blockquote>\n<p>第一镜像线<br>第二镜像线</p>\n</blockquote>\n<h3 id=\"1-符合第一镜像线特性的逻辑图之间可以相互转换\"><a href=\"#1-符合第一镜像线特性的逻辑图之间可以相互转换\" class=\"headerlink\" title=\"1.符合第一镜像线特性的逻辑图之间可以相互转换\"></a>1.符合第一镜像线特性的逻辑图之间可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(0,0),(0,1)&#125;与, &#123;(0,1),(1,1)&#125;或, &#123;(1,0),(0,0)&#125;或非, &#123;(1,1),(1,0)&#125;与非, </span><br><span class=\"line\">&#123;(0,1),(1,0)&#125;异或, &#123;(1,0),(0,1)&#125;异或非, </span><br><span class=\"line\">&#123;(0,0),(0,0)&#125;常开, &#123;(1,1),(1,1)&#125;常闭</span><br><span class=\"line\">三种转换方式</span><br><span class=\"line\">组合，不相干逻辑图的后置取反，第二镜像线对面逻辑图的前置取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-符合第二镜像线特性的逻辑图之间可以相互转换\"><a href=\"#2-符合第二镜像线特性的逻辑图之间可以相互转换\" class=\"headerlink\" title=\"2.符合第二镜像线特性的逻辑图之间可以相互转换\"></a>2.符合第二镜像线特性的逻辑图之间可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(1,0),(1,1)&#125;A蕴含B, &#123;(0,1),(0,0)&#125;A蕴含B非， </span><br><span class=\"line\">&#123;(0,0),(1,0)&#125;B蕴含B, &#123;(1,1),(0,1)&#125;B蕴含A非</span><br><span class=\"line\">两种转换方式 </span><br><span class=\"line\">第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\"><a href=\"#3-既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\" class=\"headerlink\" title=\"3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\"></a>3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(1,0),(1,0)&#125; A非, &#123;(0,1),(0,1)&#125; A线性</span><br><span class=\"line\">&#123;(1,1),(0,0)&#125; B非, &#123;(0,0),(1,1)&#125; B线性, </span><br><span class=\"line\">两种转换方式</span><br><span class=\"line\">第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二元逻辑图\"><a href=\"#二元逻辑图\" class=\"headerlink\" title=\"二元逻辑图\"></a>二元逻辑图</h2><blockquote>\n<p>第一镜像线<br>第二镜像线</p>\n</blockquote>\n<h3 id=\"1-符合第一镜像线特性的逻辑图之间可以相互转换\"><a href=\"#1-符合第一镜像线特性的逻辑图之间可以相互转换\" class=\"headerlink\" title=\"1.符合第一镜像线特性的逻辑图之间可以相互转换\"></a>1.符合第一镜像线特性的逻辑图之间可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(0,0),(0,1)&#125;与, &#123;(0,1),(1,1)&#125;或, &#123;(1,0),(0,0)&#125;或非, &#123;(1,1),(1,0)&#125;与非, </span><br><span class=\"line\">&#123;(0,1),(1,0)&#125;异或, &#123;(1,0),(0,1)&#125;异或非, </span><br><span class=\"line\">&#123;(0,0),(0,0)&#125;常开, &#123;(1,1),(1,1)&#125;常闭</span><br><span class=\"line\">三种转换方式</span><br><span class=\"line\">组合，不相干逻辑图的后置取反，第二镜像线对面逻辑图的前置取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-符合第二镜像线特性的逻辑图之间可以相互转换\"><a href=\"#2-符合第二镜像线特性的逻辑图之间可以相互转换\" class=\"headerlink\" title=\"2.符合第二镜像线特性的逻辑图之间可以相互转换\"></a>2.符合第二镜像线特性的逻辑图之间可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(1,0),(1,1)&#125;A蕴含B, &#123;(0,1),(0,0)&#125;A蕴含B非， </span><br><span class=\"line\">&#123;(0,0),(1,0)&#125;B蕴含B, &#123;(1,1),(0,1)&#125;B蕴含A非</span><br><span class=\"line\">两种转换方式 </span><br><span class=\"line\">第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\"><a href=\"#3-既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\" class=\"headerlink\" title=\"3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换\"></a>3.既不符合第一镜像线特性也不符合第二镜像线特性的逻辑图可以相互转换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(1,0),(1,0)&#125; A非, &#123;(0,1),(0,1)&#125; A线性</span><br><span class=\"line\">&#123;(1,1),(0,0)&#125; B非, &#123;(0,0),(1,1)&#125; B线性, </span><br><span class=\"line\">两种转换方式</span><br><span class=\"line\">第一镜像线对面逻辑图的AB点互换，不相干逻辑图的后置取反</span><br></pre></td></tr></table></figure>"},{"title":"就是不一样","date":"2019-11-11T13:52:34.000Z","_content":"苹果家的极简设计好是好，用户个个都这样拿出去不好。\n于是贴了很多脑残少女贴纸在壳子上，找到了自我。\nThink Different\n","source":"_posts/就是不一样.md","raw":"---\ntitle: 就是不一样\ndate: 2019-11-11 21:52:34\ntags: [乱语]\n---\n苹果家的极简设计好是好，用户个个都这样拿出去不好。\n于是贴了很多脑残少女贴纸在壳子上，找到了自我。\nThink Different\n","slug":"就是不一样","published":1,"updated":"2021-02-20T03:28:23.318Z","_id":"ckgd5uy9p0004y4u2f9va1jmu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>苹果家的极简设计好是好，用户个个都这样拿出去不好。<br>于是贴了很多脑残少女贴纸在壳子上，找到了自我。<br>Think Different</p>\n","site":{"data":{}},"excerpt":"","more":"<p>苹果家的极简设计好是好，用户个个都这样拿出去不好。<br>于是贴了很多脑残少女贴纸在壳子上，找到了自我。<br>Think Different</p>\n"},{"title":"逻辑图的思考","date":"2020-03-06T03:21:16.000Z","_content":"\n## 第一镜像线\n![第一镜像线](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF.jpg)\n## 第二镜像线\n![第二镜像线](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF.jpg)\n## 第一镜像线简化\n![第一镜像线简化](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E7%AE%80%E5%8C%96.jpg)\n\n\n\n# 每个逻辑都有三个实现方式\n## 1，两个其他逻辑的组合(与，或),具体是:\n## 一点OR两点\n![一点OR两点](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%80%E7%82%B9OR%E4%B8%A4%E7%82%B9.jpg)\n## 两点AND一点\n![两点AND一点](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%A4%E7%82%B9AND%E4%B8%80%E7%82%B9.jpg)\n## 2，第一镜像线下逻辑的后置取反\n![第一镜像线后置去反](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E5%90%8E%E7%BD%AE%E5%8E%BB%E5%8F%8D.jpg)\n## 3，第二镜像线下逻辑的前置取反\n![第二镜像线前置取反](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF%E5%89%8D%E7%BD%AE%E5%8F%96%E5%8F%8D.jpg)\n\n# SR锁存器\n## SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路\n![SR和负反馈](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E5%92%8C%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg)\n## SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\n![SR的简化](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E7%9A%84%E7%AE%80%E5%8C%96.jpg)\n","source":"_posts/逻辑图的思考.md","raw":"---\ntitle: 逻辑图的思考\ndate: 2020-03-06 11:21:16\ntags: [逻辑门]\n---\n\n## 第一镜像线\n![第一镜像线](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF.jpg)\n## 第二镜像线\n![第二镜像线](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF.jpg)\n## 第一镜像线简化\n![第一镜像线简化](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E7%AE%80%E5%8C%96.jpg)\n\n\n\n# 每个逻辑都有三个实现方式\n## 1，两个其他逻辑的组合(与，或),具体是:\n## 一点OR两点\n![一点OR两点](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%80%E7%82%B9OR%E4%B8%A4%E7%82%B9.jpg)\n## 两点AND一点\n![两点AND一点](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%A4%E7%82%B9AND%E4%B8%80%E7%82%B9.jpg)\n## 2，第一镜像线下逻辑的后置取反\n![第一镜像线后置去反](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E5%90%8E%E7%BD%AE%E5%8E%BB%E5%8F%8D.jpg)\n## 3，第二镜像线下逻辑的前置取反\n![第二镜像线前置取反](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF%E5%89%8D%E7%BD%AE%E5%8F%96%E5%8F%8D.jpg)\n\n# SR锁存器\n## SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路\n![SR和负反馈](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E5%92%8C%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg)\n## SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\n![SR的简化](https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E7%9A%84%E7%AE%80%E5%8C%96.jpg)\n","slug":"逻辑图的思考","published":1,"updated":"2021-02-20T03:28:23.340Z","_id":"ckgd5uy9p0005y4u2cld7cev3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一镜像线\"><a href=\"#第一镜像线\" class=\"headerlink\" title=\"第一镜像线\"></a>第一镜像线</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF.jpg\" alt=\"第一镜像线\"></p>\n<h2 id=\"第二镜像线\"><a href=\"#第二镜像线\" class=\"headerlink\" title=\"第二镜像线\"></a>第二镜像线</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF.jpg\" alt=\"第二镜像线\"></p>\n<h2 id=\"第一镜像线简化\"><a href=\"#第一镜像线简化\" class=\"headerlink\" title=\"第一镜像线简化\"></a>第一镜像线简化</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E7%AE%80%E5%8C%96.jpg\" alt=\"第一镜像线简化\"></p>\n<h1 id=\"每个逻辑都有三个实现方式\"><a href=\"#每个逻辑都有三个实现方式\" class=\"headerlink\" title=\"每个逻辑都有三个实现方式\"></a>每个逻辑都有三个实现方式</h1><h2 id=\"1，两个其他逻辑的组合-与，或-具体是\"><a href=\"#1，两个其他逻辑的组合-与，或-具体是\" class=\"headerlink\" title=\"1，两个其他逻辑的组合(与，或),具体是:\"></a>1，两个其他逻辑的组合(与，或),具体是:</h2><h2 id=\"一点OR两点\"><a href=\"#一点OR两点\" class=\"headerlink\" title=\"一点OR两点\"></a>一点OR两点</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%80%E7%82%B9OR%E4%B8%A4%E7%82%B9.jpg\" alt=\"一点OR两点\"></p>\n<h2 id=\"两点AND一点\"><a href=\"#两点AND一点\" class=\"headerlink\" title=\"两点AND一点\"></a>两点AND一点</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%A4%E7%82%B9AND%E4%B8%80%E7%82%B9.jpg\" alt=\"两点AND一点\"></p>\n<h2 id=\"2，第一镜像线下逻辑的后置取反\"><a href=\"#2，第一镜像线下逻辑的后置取反\" class=\"headerlink\" title=\"2，第一镜像线下逻辑的后置取反\"></a>2，第一镜像线下逻辑的后置取反</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E5%90%8E%E7%BD%AE%E5%8E%BB%E5%8F%8D.jpg\" alt=\"第一镜像线后置去反\"></p>\n<h2 id=\"3，第二镜像线下逻辑的前置取反\"><a href=\"#3，第二镜像线下逻辑的前置取反\" class=\"headerlink\" title=\"3，第二镜像线下逻辑的前置取反\"></a>3，第二镜像线下逻辑的前置取反</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF%E5%89%8D%E7%BD%AE%E5%8F%96%E5%8F%8D.jpg\" alt=\"第二镜像线前置取反\"></p>\n<h1 id=\"SR锁存器\"><a href=\"#SR锁存器\" class=\"headerlink\" title=\"SR锁存器\"></a>SR锁存器</h1><h2 id=\"SR锁存器利用反馈实现记忆-即当SR都为0时等价于两个负反馈的电路\"><a href=\"#SR锁存器利用反馈实现记忆-即当SR都为0时等价于两个负反馈的电路\" class=\"headerlink\" title=\"SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路\"></a>SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E5%92%8C%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg\" alt=\"SR和负反馈\"></p>\n<h2 id=\"SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\"><a href=\"#SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\" class=\"headerlink\" title=\"SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\"></a>SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E7%9A%84%E7%AE%80%E5%8C%96.jpg\" alt=\"SR的简化\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一镜像线\"><a href=\"#第一镜像线\" class=\"headerlink\" title=\"第一镜像线\"></a>第一镜像线</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF.jpg\" alt=\"第一镜像线\"></p>\n<h2 id=\"第二镜像线\"><a href=\"#第二镜像线\" class=\"headerlink\" title=\"第二镜像线\"></a>第二镜像线</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF.jpg\" alt=\"第二镜像线\"></p>\n<h2 id=\"第一镜像线简化\"><a href=\"#第一镜像线简化\" class=\"headerlink\" title=\"第一镜像线简化\"></a>第一镜像线简化</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E7%AE%80%E5%8C%96.jpg\" alt=\"第一镜像线简化\"></p>\n<h1 id=\"每个逻辑都有三个实现方式\"><a href=\"#每个逻辑都有三个实现方式\" class=\"headerlink\" title=\"每个逻辑都有三个实现方式\"></a>每个逻辑都有三个实现方式</h1><h2 id=\"1，两个其他逻辑的组合-与，或-具体是\"><a href=\"#1，两个其他逻辑的组合-与，或-具体是\" class=\"headerlink\" title=\"1，两个其他逻辑的组合(与，或),具体是:\"></a>1，两个其他逻辑的组合(与，或),具体是:</h2><h2 id=\"一点OR两点\"><a href=\"#一点OR两点\" class=\"headerlink\" title=\"一点OR两点\"></a>一点OR两点</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%80%E7%82%B9OR%E4%B8%A4%E7%82%B9.jpg\" alt=\"一点OR两点\"></p>\n<h2 id=\"两点AND一点\"><a href=\"#两点AND一点\" class=\"headerlink\" title=\"两点AND一点\"></a>两点AND一点</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E4%B8%A4%E7%82%B9AND%E4%B8%80%E7%82%B9.jpg\" alt=\"两点AND一点\"></p>\n<h2 id=\"2，第一镜像线下逻辑的后置取反\"><a href=\"#2，第一镜像线下逻辑的后置取反\" class=\"headerlink\" title=\"2，第一镜像线下逻辑的后置取反\"></a>2，第一镜像线下逻辑的后置取反</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%B8%80%E9%95%9C%E5%83%8F%E7%BA%BF%E5%90%8E%E7%BD%AE%E5%8E%BB%E5%8F%8D.jpg\" alt=\"第一镜像线后置去反\"></p>\n<h2 id=\"3，第二镜像线下逻辑的前置取反\"><a href=\"#3，第二镜像线下逻辑的前置取反\" class=\"headerlink\" title=\"3，第二镜像线下逻辑的前置取反\"></a>3，第二镜像线下逻辑的前置取反</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/%E7%AC%AC%E4%BA%8C%E9%95%9C%E5%83%8F%E7%BA%BF%E5%89%8D%E7%BD%AE%E5%8F%96%E5%8F%8D.jpg\" alt=\"第二镜像线前置取反\"></p>\n<h1 id=\"SR锁存器\"><a href=\"#SR锁存器\" class=\"headerlink\" title=\"SR锁存器\"></a>SR锁存器</h1><h2 id=\"SR锁存器利用反馈实现记忆-即当SR都为0时等价于两个负反馈的电路\"><a href=\"#SR锁存器利用反馈实现记忆-即当SR都为0时等价于两个负反馈的电路\" class=\"headerlink\" title=\"SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路\"></a>SR锁存器利用反馈实现记忆,即当SR都为0时等价于两个负反馈的电路</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E5%92%8C%E8%B4%9F%E5%8F%8D%E9%A6%88.jpg\" alt=\"SR和负反馈\"></p>\n<h2 id=\"SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\"><a href=\"#SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\" class=\"headerlink\" title=\"SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；\"></a>SR的简化，仅当S为0时，置1；仅当S为0时，置1；仅当R为0时，置0；当SR都为0时，置1；禁止设置SR都为0，因为变化到其他状态时结果可能会无序错乱；</h2><p><img src=\"https://blog-1252678064.cos.ap-shanghai.myqcloud.com/img/%E9%80%BB%E8%BE%91%E5%9B%BE%E6%A0%87/SR/sr%E7%9A%84%E7%AE%80%E5%8C%96.jpg\" alt=\"SR的简化\"></p>\n"},{"title":"域名和网站","date":"2019-11-11T13:57:02.000Z","_content":"周六晚上去阿里云看看有啥活动，也没咱们老用户的事。\n神不知鬼不觉的发现了一个极好的域名：null.link，太棒了这个。\n不光我一个人觉得，阿里也是这么觉得，所以给它标记为溢价域名，771元每年，靠！\n又突然想到我的MBP，那就搜搜吧。\nMBP13.com，MBP15.com，MacBookPro13.com，MacBookPro15.com居然都还在！\n激动，脑子乱转，心也砰砰跳，买吗，全买吗？\n不，缓了十来分钟，我只买了MBP13.com。\n我的MBP13不需要MBP15.com，MacBookPro15.com。\n那个MacBookPro13也不行，名字太长，而且太清晰明确，厨子哪天脑抽给改了名，这域名就成了黄花菜。\n就决定是你了，皮卡丘！\n阿里这买域名太费事，我转去namesilo买，8.99美元，那啥优惠码不管用。\n我买下的时候就想好了，必须是MBP13.com通过内网穿透指向MBP13上架设一个静态博客，这就是乐趣所在。\n搞定这一切已经是周日凌晨4点了。\n","source":"_posts/域名和网站.md","raw":"---\ntitle: 域名和网站\ndate: 2019-11-11 21:57:02\ntags: [site]\n---\n周六晚上去阿里云看看有啥活动，也没咱们老用户的事。\n神不知鬼不觉的发现了一个极好的域名：null.link，太棒了这个。\n不光我一个人觉得，阿里也是这么觉得，所以给它标记为溢价域名，771元每年，靠！\n又突然想到我的MBP，那就搜搜吧。\nMBP13.com，MBP15.com，MacBookPro13.com，MacBookPro15.com居然都还在！\n激动，脑子乱转，心也砰砰跳，买吗，全买吗？\n不，缓了十来分钟，我只买了MBP13.com。\n我的MBP13不需要MBP15.com，MacBookPro15.com。\n那个MacBookPro13也不行，名字太长，而且太清晰明确，厨子哪天脑抽给改了名，这域名就成了黄花菜。\n就决定是你了，皮卡丘！\n阿里这买域名太费事，我转去namesilo买，8.99美元，那啥优惠码不管用。\n我买下的时候就想好了，必须是MBP13.com通过内网穿透指向MBP13上架设一个静态博客，这就是乐趣所在。\n搞定这一切已经是周日凌晨4点了。\n","slug":"域名和网站","published":1,"updated":"2021-02-20T03:28:23.366Z","_id":"ckgd5uy9q0006y4u2cox40eq7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>周六晚上去阿里云看看有啥活动，也没咱们老用户的事。<br>神不知鬼不觉的发现了一个极好的域名：null.link，太棒了这个。<br>不光我一个人觉得，阿里也是这么觉得，所以给它标记为溢价域名，771元每年，靠！<br>又突然想到我的MBP，那就搜搜吧。<br>MBP13.com，MBP15.com，MacBookPro13.com，MacBookPro15.com居然都还在！<br>激动，脑子乱转，心也砰砰跳，买吗，全买吗？<br>不，缓了十来分钟，我只买了MBP13.com。<br>我的MBP13不需要MBP15.com，MacBookPro15.com。<br>那个MacBookPro13也不行，名字太长，而且太清晰明确，厨子哪天脑抽给改了名，这域名就成了黄花菜。<br>就决定是你了，皮卡丘！<br>阿里这买域名太费事，我转去namesilo买，8.99美元，那啥优惠码不管用。<br>我买下的时候就想好了，必须是MBP13.com通过内网穿透指向MBP13上架设一个静态博客，这就是乐趣所在。<br>搞定这一切已经是周日凌晨4点了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>周六晚上去阿里云看看有啥活动，也没咱们老用户的事。<br>神不知鬼不觉的发现了一个极好的域名：null.link，太棒了这个。<br>不光我一个人觉得，阿里也是这么觉得，所以给它标记为溢价域名，771元每年，靠！<br>又突然想到我的MBP，那就搜搜吧。<br>MBP13.com，MBP15.com，MacBookPro13.com，MacBookPro15.com居然都还在！<br>激动，脑子乱转，心也砰砰跳，买吗，全买吗？<br>不，缓了十来分钟，我只买了MBP13.com。<br>我的MBP13不需要MBP15.com，MacBookPro15.com。<br>那个MacBookPro13也不行，名字太长，而且太清晰明确，厨子哪天脑抽给改了名，这域名就成了黄花菜。<br>就决定是你了，皮卡丘！<br>阿里这买域名太费事，我转去namesilo买，8.99美元，那啥优惠码不管用。<br>我买下的时候就想好了，必须是MBP13.com通过内网穿透指向MBP13上架设一个静态博客，这就是乐趣所在。<br>搞定这一切已经是周日凌晨4点了。</p>\n"},{"title":"配件清单","date":"2019-11-11T13:16:15.000Z","_content":"淘宝店家送了键盘膜，这玩意我是不用的。\n这个mac触摸板听说很好，但我暂时没体会到，就买了小乙铝合金支架，架的高高的，45度角仰望它的屏幕。\n拓展坞也必须买，蓝盛100w的那个，又配了一个tf卡，每次插上拓展坞就可以自动备份系统数据。\n本身我就有俩键盘，一个红轴，一个静电容。\n有一个显示器，是二手的，1080P，才四百块。\n就想换个好点的，买了LG的4k屏，体验完全不一样。\n还有就是内胆包，小米家的。\n","source":"_posts/配件清单.md","raw":"---\ntitle: 配件清单\ndate: 2019-11-11 21:16:15\ntags: [MBP13]\n---\n淘宝店家送了键盘膜，这玩意我是不用的。\n这个mac触摸板听说很好，但我暂时没体会到，就买了小乙铝合金支架，架的高高的，45度角仰望它的屏幕。\n拓展坞也必须买，蓝盛100w的那个，又配了一个tf卡，每次插上拓展坞就可以自动备份系统数据。\n本身我就有俩键盘，一个红轴，一个静电容。\n有一个显示器，是二手的，1080P，才四百块。\n就想换个好点的，买了LG的4k屏，体验完全不一样。\n还有就是内胆包，小米家的。\n","slug":"配件清单","published":1,"updated":"2021-02-20T03:28:23.322Z","_id":"ckgd5uy9r0007y4u24sj0cv07","comments":1,"layout":"post","photos":[],"link":"","content":"<p>淘宝店家送了键盘膜，这玩意我是不用的。<br>这个mac触摸板听说很好，但我暂时没体会到，就买了小乙铝合金支架，架的高高的，45度角仰望它的屏幕。<br>拓展坞也必须买，蓝盛100w的那个，又配了一个tf卡，每次插上拓展坞就可以自动备份系统数据。<br>本身我就有俩键盘，一个红轴，一个静电容。<br>有一个显示器，是二手的，1080P，才四百块。<br>就想换个好点的，买了LG的4k屏，体验完全不一样。<br>还有就是内胆包，小米家的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>淘宝店家送了键盘膜，这玩意我是不用的。<br>这个mac触摸板听说很好，但我暂时没体会到，就买了小乙铝合金支架，架的高高的，45度角仰望它的屏幕。<br>拓展坞也必须买，蓝盛100w的那个，又配了一个tf卡，每次插上拓展坞就可以自动备份系统数据。<br>本身我就有俩键盘，一个红轴，一个静电容。<br>有一个显示器，是二手的，1080P，才四百块。<br>就想换个好点的，买了LG的4k屏，体验完全不一样。<br>还有就是内胆包，小米家的。</p>\n"},{"title":"鸭蛋和它的妈妈","date":"2020-11-13T03:06:28.000Z","_content":"小鸭子破壳后会主动把第一个看见的动物当妈妈。  \n如果小鸭子发现自己正在别人手里，就把这个人当妈妈。  \n有一个魔法可以让小鸭子在破壳前就知道自己的妈妈。  \n\n这个`鸭蛋`是 `js函数`。  \n这个`小鸭子`是 `js函数`里的`this`。   \n`破壳`是 `js函数`的执行。  \n \n### 默认绑定(1)\n```\n鸭蛋默默破壳，小鸭子就当全局对象当妈妈，这是 默认绑定。   \n!!! 严格模式下 小鸭子找不到全局对象。  \n```\n### 隐式绑定\n```\n有人把鸭蛋放在手里破壳，小鸭子当然会认这个人当妈妈。\n相当于 这个函数在 某个对象里面执行，这是 隐式绑定。  \n这个人即使是别人的下属，小鸭子仍然会认这个人当妈妈。   \n```\n### 默认绑定(2)\n```\n但当这个人拿了一会鸭蛋，又把鸭蛋放到外面，让它在外面破壳，这仍然是 默认绑定。\n```\n### 显式绑定\n```\n如果有人用 call,apply,bind 这些魔法让小鸭子破壳前就知道自己的妈妈，这是 显式绑定。  \n```\n### new绑定\n```\n如果有人用 new 这种魔法让小鸭子破壳前就知道自己的妈妈，这是 new绑定。 \n```\n","source":"_posts/鸭蛋和它的妈妈.md","raw":"---\ntitle: 鸭蛋和它的妈妈\ndate: 2020-11-13 11:06:28\ntags: [JavaScript,乱语]\n---\n小鸭子破壳后会主动把第一个看见的动物当妈妈。  \n如果小鸭子发现自己正在别人手里，就把这个人当妈妈。  \n有一个魔法可以让小鸭子在破壳前就知道自己的妈妈。  \n\n这个`鸭蛋`是 `js函数`。  \n这个`小鸭子`是 `js函数`里的`this`。   \n`破壳`是 `js函数`的执行。  \n \n### 默认绑定(1)\n```\n鸭蛋默默破壳，小鸭子就当全局对象当妈妈，这是 默认绑定。   \n!!! 严格模式下 小鸭子找不到全局对象。  \n```\n### 隐式绑定\n```\n有人把鸭蛋放在手里破壳，小鸭子当然会认这个人当妈妈。\n相当于 这个函数在 某个对象里面执行，这是 隐式绑定。  \n这个人即使是别人的下属，小鸭子仍然会认这个人当妈妈。   \n```\n### 默认绑定(2)\n```\n但当这个人拿了一会鸭蛋，又把鸭蛋放到外面，让它在外面破壳，这仍然是 默认绑定。\n```\n### 显式绑定\n```\n如果有人用 call,apply,bind 这些魔法让小鸭子破壳前就知道自己的妈妈，这是 显式绑定。  \n```\n### new绑定\n```\n如果有人用 new 这种魔法让小鸭子破壳前就知道自己的妈妈，这是 new绑定。 \n```\n","slug":"鸭蛋和它的妈妈","published":1,"updated":"2021-02-22T02:00:26.584Z","_id":"ckhfp717a0000g6o8a4pq7pav","comments":1,"layout":"post","photos":[],"link":"","content":"<p>小鸭子破壳后会主动把第一个看见的动物当妈妈。<br>如果小鸭子发现自己正在别人手里，就把这个人当妈妈。<br>有一个魔法可以让小鸭子在破壳前就知道自己的妈妈。  </p>\n<p>这个<code>鸭蛋</code>是 <code>js函数</code>。<br>这个<code>小鸭子</code>是 <code>js函数</code>里的<code>this</code>。<br><code>破壳</code>是 <code>js函数</code>的执行。  </p>\n<h3 id=\"默认绑定-1\"><a href=\"#默认绑定-1\" class=\"headerlink\" title=\"默认绑定(1)\"></a>默认绑定(1)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鸭蛋默默破壳，小鸭子就当全局对象当妈妈，这是 默认绑定。   </span><br><span class=\"line\">!!! 严格模式下 小鸭子找不到全局对象。  </span><br></pre></td></tr></table></figure>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有人把鸭蛋放在手里破壳，小鸭子当然会认这个人当妈妈。</span><br><span class=\"line\">相当于 这个函数在 某个对象里面执行，这是 隐式绑定。  </span><br><span class=\"line\">这个人即使是别人的下属，小鸭子仍然会认这个人当妈妈。   </span><br></pre></td></tr></table></figure>\n<h3 id=\"默认绑定-2\"><a href=\"#默认绑定-2\" class=\"headerlink\" title=\"默认绑定(2)\"></a>默认绑定(2)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">但当这个人拿了一会鸭蛋，又把鸭蛋放到外面，让它在外面破壳，这仍然是 默认绑定。</span><br></pre></td></tr></table></figure>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有人用 call,apply,bind 这些魔法让小鸭子破壳前就知道自己的妈妈，这是 显式绑定。  </span><br></pre></td></tr></table></figure>\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有人用 new 这种魔法让小鸭子破壳前就知道自己的妈妈，这是 new绑定。 </span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>小鸭子破壳后会主动把第一个看见的动物当妈妈。<br>如果小鸭子发现自己正在别人手里，就把这个人当妈妈。<br>有一个魔法可以让小鸭子在破壳前就知道自己的妈妈。  </p>\n<p>这个<code>鸭蛋</code>是 <code>js函数</code>。<br>这个<code>小鸭子</code>是 <code>js函数</code>里的<code>this</code>。<br><code>破壳</code>是 <code>js函数</code>的执行。  </p>\n<h3 id=\"默认绑定-1\"><a href=\"#默认绑定-1\" class=\"headerlink\" title=\"默认绑定(1)\"></a>默认绑定(1)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鸭蛋默默破壳，小鸭子就当全局对象当妈妈，这是 默认绑定。   </span><br><span class=\"line\">!!! 严格模式下 小鸭子找不到全局对象。  </span><br></pre></td></tr></table></figure>\n<h3 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有人把鸭蛋放在手里破壳，小鸭子当然会认这个人当妈妈。</span><br><span class=\"line\">相当于 这个函数在 某个对象里面执行，这是 隐式绑定。  </span><br><span class=\"line\">这个人即使是别人的下属，小鸭子仍然会认这个人当妈妈。   </span><br></pre></td></tr></table></figure>\n<h3 id=\"默认绑定-2\"><a href=\"#默认绑定-2\" class=\"headerlink\" title=\"默认绑定(2)\"></a>默认绑定(2)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">但当这个人拿了一会鸭蛋，又把鸭蛋放到外面，让它在外面破壳，这仍然是 默认绑定。</span><br></pre></td></tr></table></figure>\n<h3 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有人用 call,apply,bind 这些魔法让小鸭子破壳前就知道自己的妈妈，这是 显式绑定。  </span><br></pre></td></tr></table></figure>\n<h3 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有人用 new 这种魔法让小鸭子破壳前就知道自己的妈妈，这是 new绑定。 </span><br></pre></td></tr></table></figure>"},{"title":"一串串的的","date":"2020-12-26T05:57:07.000Z","_content":"\n首先，\"的地得\"要分清。\n动词前用\"地\"，动词后用\"得\"，其他情况用\"的\"。\n但是！其他情况中也应该继续分！\n其他情况中，形容词后用\"的\"，剩下的用\"之\"。\n\n我的可怜的眼睛，看书看的很疼，疼的厉害。\n\n按照上面的规则，应该改为：\n我之可怜的眼睛，看书看得很疼，疼地厉害。\n\n但是这个\"我之可怜的眼睛\"，还是会有描述混乱的情况。\n","source":"_posts/一串串的的.md","raw":"---\ntitle: 一串串的的\ndate: 2020-12-26 13:57:07\ntags: [乱语]\n---\n\n首先，\"的地得\"要分清。\n动词前用\"地\"，动词后用\"得\"，其他情况用\"的\"。\n但是！其他情况中也应该继续分！\n其他情况中，形容词后用\"的\"，剩下的用\"之\"。\n\n我的可怜的眼睛，看书看的很疼，疼的厉害。\n\n按照上面的规则，应该改为：\n我之可怜的眼睛，看书看得很疼，疼地厉害。\n\n但是这个\"我之可怜的眼睛\"，还是会有描述混乱的情况。\n","slug":"一串串的的","published":1,"updated":"2021-02-20T03:28:23.357Z","_id":"ckjwhkuyv0000jpo8evukgq28","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先，”的地得”要分清。<br>动词前用”地”，动词后用”得”，其他情况用”的”。<br>但是！其他情况中也应该继续分！<br>其他情况中，形容词后用”的”，剩下的用”之”。</p>\n<p>我的可怜的眼睛，看书看的很疼，疼的厉害。</p>\n<p>按照上面的规则，应该改为：<br>我之可怜的眼睛，看书看得很疼，疼地厉害。</p>\n<p>但是这个”我之可怜的眼睛”，还是会有描述混乱的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，”的地得”要分清。<br>动词前用”地”，动词后用”得”，其他情况用”的”。<br>但是！其他情况中也应该继续分！<br>其他情况中，形容词后用”的”，剩下的用”之”。</p>\n<p>我的可怜的眼睛，看书看的很疼，疼的厉害。</p>\n<p>按照上面的规则，应该改为：<br>我之可怜的眼睛，看书看得很疼，疼地厉害。</p>\n<p>但是这个”我之可怜的眼睛”，还是会有描述混乱的情况。</p>\n"},{"title":"混沌时代的编辑器: ed","date":"2021-01-14T04:06:04.000Z","_content":"Ken Thompson于1971年8月发布ed的第一个版本，是Unix操作系统三个最基础的组件(编译器、ed、shell)。\n\n打开文件后，默认进入的是\"命令模式\"，编辑文件时进入\"编辑模式\"。   \n命令模式下的导航命令\n```\n直接输入行号并回车，跳转到对应行，并回显对应行的文字（不带行号）。\n输入回车，会跳转到下一行，并回显对应行的文字（不带行号）。\n输入 . ，会重复显示当前行的文字（不带行号）。\n输入 n，会回显当前行的文字（带行号）。\n```\n切换至输入模式的命令如下：\n```\na，在当前行的下一行开始插入文字；\ni，在当前行的上一行开始插入文字；\nc，抹除当前行的所有文字，重新输入。\n```\n注意 c 命令的危险性。\n\n切换至输入模式后，就请随意地打字吧，回车也会忠实地写入文件。\n缺点是没有办法修改回车符以前的输错的文字。\n如果想修改，必须退出当前的输入模式再尝试修改。\n如果想退出输入模式，在新行输入 `.` 即可，就是英文句点。\n\n以下是一个 Linux ed 完整实例解析：\n```shell\n% ed test.txt     #  编辑文本test.txt\ntest.txt: No such file or directory   # 如果文件不存在,就生成该文件\na           # a追加编辑,进入编辑模式\none         # 在新行里编辑\ntwo         # 在新行里编辑\nthree       # 在新行里编辑\n.           # 保存编辑的数据,退出编辑模式\n1           # 展示指定行号的数据,第1行\none         # \n2           # 展示指定行号的数据,第2行\ntwo         # \n3           # 展示指定行号的数据,第3行\nthree       # \n1,2         # -指定多行时仅展示最后指定行的数据\ntwo         # -\n1,2l        # -l可以展示多行数据,已$结尾\nOne$        # -\ntwo$        # -\n,l          # \",l\"是\"1,$l\"的简写,展示全部行的数据,已$结尾\none$        # \ntwo$        # \nthree$      # \n1i          # i向前行插入编辑,\"1i\"是第1行前插入编辑,进入编辑模式\nzore        # 在新行里编辑数据\n.           # 保存编辑数据,退出编辑模式\n1           # 展示指定行号的数据,第1行\nzore        # \n,l          # \nzore$       # \none$        # \ntwo$        # \nthree$      # \n1d          # d删除行,\"1d\"删除第1行\n,l          # \none$        # \ntwo$        # \nthree$      # \n1,2d        # d删除行,\"1,2d\"删除多行\n,l          # \nthree$      # \nu           # u撤销上一次的编辑,就是上一次的文本变动\n,l          # \none$        # \ntwo$        # \nthree$      # \n1t1         # {x,y}tz 多行复制追加到第z行之后\n,l          # \none$        # 原第1行\none$        # 新插入的行数据\ntwo$        # \nthree$      # \n1d          # d删除行,\n1m3         # {x,y}mz 多行复制覆盖到第z行开始后的数据\n,l          # \ntwo$        # \nthree$      # \none$        # 第3行被覆盖\nu           # u撤销上一次的编辑\n1m4         # 覆盖不存在的行\n?           # ?报错\n1,$s/o/O/g  # s行内替换,当做行内修改用,可指定多行\n,l\nOne$        # 受替换影响\ntwO$        # 受替换影响\nthree$      # 未受影响\nwq          # w为保存编辑到文本,q为退出编辑器\n14          # 展示文本内字符数量\n%           # 已退到命令行中\n```\n\n这是文件的内容是：\n```shell\n$ cat text.text\nOne\ntwO\nthree\n```\n\n后续影响:\n```\nex (文本编辑器)，最初是扩展版本的ed。\nvi，基于ex的可视全面屏编辑器.\nsed，基于ed内脚本特征的标准UNIX流式编辑器。\n```\n","source":"_posts/混沌时代的编辑器-ed.md","raw":"---\ntitle: '混沌时代的编辑器: ed'\ndate: 2021-01-14 12:06:04\ntags: [编辑器,linux]\n---\nKen Thompson于1971年8月发布ed的第一个版本，是Unix操作系统三个最基础的组件(编译器、ed、shell)。\n\n打开文件后，默认进入的是\"命令模式\"，编辑文件时进入\"编辑模式\"。   \n命令模式下的导航命令\n```\n直接输入行号并回车，跳转到对应行，并回显对应行的文字（不带行号）。\n输入回车，会跳转到下一行，并回显对应行的文字（不带行号）。\n输入 . ，会重复显示当前行的文字（不带行号）。\n输入 n，会回显当前行的文字（带行号）。\n```\n切换至输入模式的命令如下：\n```\na，在当前行的下一行开始插入文字；\ni，在当前行的上一行开始插入文字；\nc，抹除当前行的所有文字，重新输入。\n```\n注意 c 命令的危险性。\n\n切换至输入模式后，就请随意地打字吧，回车也会忠实地写入文件。\n缺点是没有办法修改回车符以前的输错的文字。\n如果想修改，必须退出当前的输入模式再尝试修改。\n如果想退出输入模式，在新行输入 `.` 即可，就是英文句点。\n\n以下是一个 Linux ed 完整实例解析：\n```shell\n% ed test.txt     #  编辑文本test.txt\ntest.txt: No such file or directory   # 如果文件不存在,就生成该文件\na           # a追加编辑,进入编辑模式\none         # 在新行里编辑\ntwo         # 在新行里编辑\nthree       # 在新行里编辑\n.           # 保存编辑的数据,退出编辑模式\n1           # 展示指定行号的数据,第1行\none         # \n2           # 展示指定行号的数据,第2行\ntwo         # \n3           # 展示指定行号的数据,第3行\nthree       # \n1,2         # -指定多行时仅展示最后指定行的数据\ntwo         # -\n1,2l        # -l可以展示多行数据,已$结尾\nOne$        # -\ntwo$        # -\n,l          # \",l\"是\"1,$l\"的简写,展示全部行的数据,已$结尾\none$        # \ntwo$        # \nthree$      # \n1i          # i向前行插入编辑,\"1i\"是第1行前插入编辑,进入编辑模式\nzore        # 在新行里编辑数据\n.           # 保存编辑数据,退出编辑模式\n1           # 展示指定行号的数据,第1行\nzore        # \n,l          # \nzore$       # \none$        # \ntwo$        # \nthree$      # \n1d          # d删除行,\"1d\"删除第1行\n,l          # \none$        # \ntwo$        # \nthree$      # \n1,2d        # d删除行,\"1,2d\"删除多行\n,l          # \nthree$      # \nu           # u撤销上一次的编辑,就是上一次的文本变动\n,l          # \none$        # \ntwo$        # \nthree$      # \n1t1         # {x,y}tz 多行复制追加到第z行之后\n,l          # \none$        # 原第1行\none$        # 新插入的行数据\ntwo$        # \nthree$      # \n1d          # d删除行,\n1m3         # {x,y}mz 多行复制覆盖到第z行开始后的数据\n,l          # \ntwo$        # \nthree$      # \none$        # 第3行被覆盖\nu           # u撤销上一次的编辑\n1m4         # 覆盖不存在的行\n?           # ?报错\n1,$s/o/O/g  # s行内替换,当做行内修改用,可指定多行\n,l\nOne$        # 受替换影响\ntwO$        # 受替换影响\nthree$      # 未受影响\nwq          # w为保存编辑到文本,q为退出编辑器\n14          # 展示文本内字符数量\n%           # 已退到命令行中\n```\n\n这是文件的内容是：\n```shell\n$ cat text.text\nOne\ntwO\nthree\n```\n\n后续影响:\n```\nex (文本编辑器)，最初是扩展版本的ed。\nvi，基于ex的可视全面屏编辑器.\nsed，基于ed内脚本特征的标准UNIX流式编辑器。\n```\n","slug":"混沌时代的编辑器-ed","published":1,"updated":"2021-02-22T02:19:14.818Z","_id":"ckjwhkuz00002jpo89pymbqn7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ken Thompson于1971年8月发布ed的第一个版本，是Unix操作系统三个最基础的组件(编译器、ed、shell)。</p>\n<p>打开文件后，默认进入的是”命令模式”，编辑文件时进入”编辑模式”。<br>命令模式下的导航命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接输入行号并回车，跳转到对应行，并回显对应行的文字（不带行号）。</span><br><span class=\"line\">输入回车，会跳转到下一行，并回显对应行的文字（不带行号）。</span><br><span class=\"line\">输入 . ，会重复显示当前行的文字（不带行号）。</span><br><span class=\"line\">输入 n，会回显当前行的文字（带行号）。</span><br></pre></td></tr></table></figure>\n<p>切换至输入模式的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a，在当前行的下一行开始插入文字；</span><br><span class=\"line\">i，在当前行的上一行开始插入文字；</span><br><span class=\"line\">c，抹除当前行的所有文字，重新输入。</span><br></pre></td></tr></table></figure>\n<p>注意 c 命令的危险性。</p>\n<p>切换至输入模式后，就请随意地打字吧，回车也会忠实地写入文件。<br>缺点是没有办法修改回车符以前的输错的文字。<br>如果想修改，必须退出当前的输入模式再尝试修改。<br>如果想退出输入模式，在新行输入 <code>.</code> 即可，就是英文句点。</p>\n<p>以下是一个 Linux ed 完整实例解析：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> ed test.txt     <span class=\"comment\">#  编辑文本test.txt</span></span></span><br><span class=\"line\">test.txt: No such file or directory   # 如果文件不存在,就生成该文件</span><br><span class=\"line\">a           # a追加编辑,进入编辑模式</span><br><span class=\"line\">one         # 在新行里编辑</span><br><span class=\"line\">two         # 在新行里编辑</span><br><span class=\"line\">three       # 在新行里编辑</span><br><span class=\"line\">.           # 保存编辑的数据,退出编辑模式</span><br><span class=\"line\">1           # 展示指定行号的数据,第1行</span><br><span class=\"line\">one         # </span><br><span class=\"line\">2           # 展示指定行号的数据,第2行</span><br><span class=\"line\">two         # </span><br><span class=\"line\">3           # 展示指定行号的数据,第3行</span><br><span class=\"line\">three       # </span><br><span class=\"line\">1,2         # -指定多行时仅展示最后指定行的数据</span><br><span class=\"line\">two         # -</span><br><span class=\"line\">1,2l        # -l可以展示多行数据,已$结尾</span><br><span class=\"line\"><span class=\"meta\">One$</span><span class=\"bash\">        <span class=\"comment\"># -</span></span></span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\"># -</span></span></span><br><span class=\"line\">,l          # &quot;,l&quot;是&quot;1,$l&quot;的简写,展示全部行的数据,已$结尾</span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1i          # i向前行插入编辑,&quot;1i&quot;是第1行前插入编辑,进入编辑模式</span><br><span class=\"line\">zore        # 在新行里编辑数据</span><br><span class=\"line\">.           # 保存编辑数据,退出编辑模式</span><br><span class=\"line\">1           # 展示指定行号的数据,第1行</span><br><span class=\"line\">zore        # </span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">zore$</span><span class=\"bash\">       <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1d          # d删除行,&quot;1d&quot;删除第1行</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1,2d        # d删除行,&quot;1,2d&quot;删除多行</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">u           # u撤销上一次的编辑,就是上一次的文本变动</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1t1         # &#123;x,y&#125;tz 多行复制追加到第z行之后</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 原第1行</span></span></span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 新插入的行数据</span></span></span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1d          # d删除行,</span><br><span class=\"line\">1m3         # &#123;x,y&#125;mz 多行复制覆盖到第z行开始后的数据</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 第3行被覆盖</span></span></span><br><span class=\"line\">u           # u撤销上一次的编辑</span><br><span class=\"line\">1m4         # 覆盖不存在的行</span><br><span class=\"line\">?           # ?报错</span><br><span class=\"line\">1,$s/o/O/g  # s行内替换,当做行内修改用,可指定多行</span><br><span class=\"line\">,l</span><br><span class=\"line\"><span class=\"meta\">One$</span><span class=\"bash\">        <span class=\"comment\"># 受替换影响</span></span></span><br><span class=\"line\"><span class=\"meta\">twO$</span><span class=\"bash\">        <span class=\"comment\"># 受替换影响</span></span></span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\"># 未受影响</span></span></span><br><span class=\"line\">wq          # w为保存编辑到文本,q为退出编辑器</span><br><span class=\"line\">14          # 展示文本内字符数量</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">           <span class=\"comment\"># 已退到命令行中</span></span></span><br></pre></td></tr></table></figure>\n<p>这是文件的内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat text.text</span></span><br><span class=\"line\">One</span><br><span class=\"line\">twO</span><br><span class=\"line\">three</span><br></pre></td></tr></table></figure>\n<p>后续影响:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex (文本编辑器)，最初是扩展版本的ed。</span><br><span class=\"line\">vi，基于ex的可视全面屏编辑器.</span><br><span class=\"line\">sed，基于ed内脚本特征的标准UNIX流式编辑器。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Ken Thompson于1971年8月发布ed的第一个版本，是Unix操作系统三个最基础的组件(编译器、ed、shell)。</p>\n<p>打开文件后，默认进入的是”命令模式”，编辑文件时进入”编辑模式”。<br>命令模式下的导航命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接输入行号并回车，跳转到对应行，并回显对应行的文字（不带行号）。</span><br><span class=\"line\">输入回车，会跳转到下一行，并回显对应行的文字（不带行号）。</span><br><span class=\"line\">输入 . ，会重复显示当前行的文字（不带行号）。</span><br><span class=\"line\">输入 n，会回显当前行的文字（带行号）。</span><br></pre></td></tr></table></figure>\n<p>切换至输入模式的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a，在当前行的下一行开始插入文字；</span><br><span class=\"line\">i，在当前行的上一行开始插入文字；</span><br><span class=\"line\">c，抹除当前行的所有文字，重新输入。</span><br></pre></td></tr></table></figure>\n<p>注意 c 命令的危险性。</p>\n<p>切换至输入模式后，就请随意地打字吧，回车也会忠实地写入文件。<br>缺点是没有办法修改回车符以前的输错的文字。<br>如果想修改，必须退出当前的输入模式再尝试修改。<br>如果想退出输入模式，在新行输入 <code>.</code> 即可，就是英文句点。</p>\n<p>以下是一个 Linux ed 完整实例解析：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> ed test.txt     <span class=\"comment\">#  编辑文本test.txt</span></span></span><br><span class=\"line\">test.txt: No such file or directory   # 如果文件不存在,就生成该文件</span><br><span class=\"line\">a           # a追加编辑,进入编辑模式</span><br><span class=\"line\">one         # 在新行里编辑</span><br><span class=\"line\">two         # 在新行里编辑</span><br><span class=\"line\">three       # 在新行里编辑</span><br><span class=\"line\">.           # 保存编辑的数据,退出编辑模式</span><br><span class=\"line\">1           # 展示指定行号的数据,第1行</span><br><span class=\"line\">one         # </span><br><span class=\"line\">2           # 展示指定行号的数据,第2行</span><br><span class=\"line\">two         # </span><br><span class=\"line\">3           # 展示指定行号的数据,第3行</span><br><span class=\"line\">three       # </span><br><span class=\"line\">1,2         # -指定多行时仅展示最后指定行的数据</span><br><span class=\"line\">two         # -</span><br><span class=\"line\">1,2l        # -l可以展示多行数据,已$结尾</span><br><span class=\"line\"><span class=\"meta\">One$</span><span class=\"bash\">        <span class=\"comment\"># -</span></span></span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\"># -</span></span></span><br><span class=\"line\">,l          # &quot;,l&quot;是&quot;1,$l&quot;的简写,展示全部行的数据,已$结尾</span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1i          # i向前行插入编辑,&quot;1i&quot;是第1行前插入编辑,进入编辑模式</span><br><span class=\"line\">zore        # 在新行里编辑数据</span><br><span class=\"line\">.           # 保存编辑数据,退出编辑模式</span><br><span class=\"line\">1           # 展示指定行号的数据,第1行</span><br><span class=\"line\">zore        # </span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">zore$</span><span class=\"bash\">       <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1d          # d删除行,&quot;1d&quot;删除第1行</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1,2d        # d删除行,&quot;1,2d&quot;删除多行</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">u           # u撤销上一次的编辑,就是上一次的文本变动</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1t1         # &#123;x,y&#125;tz 多行复制追加到第z行之后</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 原第1行</span></span></span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 新插入的行数据</span></span></span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\">1d          # d删除行,</span><br><span class=\"line\">1m3         # &#123;x,y&#125;mz 多行复制覆盖到第z行开始后的数据</span><br><span class=\"line\">,l          # </span><br><span class=\"line\"><span class=\"meta\">two$</span><span class=\"bash\">        <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\">#</span></span> </span><br><span class=\"line\"><span class=\"meta\">one$</span><span class=\"bash\">        <span class=\"comment\"># 第3行被覆盖</span></span></span><br><span class=\"line\">u           # u撤销上一次的编辑</span><br><span class=\"line\">1m4         # 覆盖不存在的行</span><br><span class=\"line\">?           # ?报错</span><br><span class=\"line\">1,$s/o/O/g  # s行内替换,当做行内修改用,可指定多行</span><br><span class=\"line\">,l</span><br><span class=\"line\"><span class=\"meta\">One$</span><span class=\"bash\">        <span class=\"comment\"># 受替换影响</span></span></span><br><span class=\"line\"><span class=\"meta\">twO$</span><span class=\"bash\">        <span class=\"comment\"># 受替换影响</span></span></span><br><span class=\"line\"><span class=\"meta\">three$</span><span class=\"bash\">      <span class=\"comment\"># 未受影响</span></span></span><br><span class=\"line\">wq          # w为保存编辑到文本,q为退出编辑器</span><br><span class=\"line\">14          # 展示文本内字符数量</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">           <span class=\"comment\"># 已退到命令行中</span></span></span><br></pre></td></tr></table></figure>\n<p>这是文件的内容是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat text.text</span></span><br><span class=\"line\">One</span><br><span class=\"line\">twO</span><br><span class=\"line\">three</span><br></pre></td></tr></table></figure>\n<p>后续影响:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex (文本编辑器)，最初是扩展版本的ed。</span><br><span class=\"line\">vi，基于ex的可视全面屏编辑器.</span><br><span class=\"line\">sed，基于ed内脚本特征的标准UNIX流式编辑器。</span><br></pre></td></tr></table></figure>"},{"title":"单行命令perl的技巧","date":"2021-01-20T09:42:25.000Z","_content":"\n| 意图     | 选项 | 同义代码 | 备注 \t|\n| -------- | ---- | ------- | ---- |\n| 起始代码 |  |BEGIN{}| 在任何代码执行之前先执行。当仅初始化变量时，同 `-s` 选项。 |\n| 结尾代码 |\t\t|END{}   或  }{\t| 在整个程序执行最后时候执行。 |\n| 起始变量\t\t |-s\t\t|\t\t| perl的-s选项允许解析`--`之后的`-xxx=yyy`格式的开关选项。 |\n| \t|\t|\t|\t|\n| 行处理\t\t |\t\t|\t\t| 将 `分隔后的行` 放进数组 `$_` 中 |\n| 行输入分隔符\t|-l \t|$/ \t| 未启用选项时，默认值是 `\\n` 。启用选项时如果没有给定任何选项参数，则与 `行输入分隔符` 同值。 |\n| 行输出分隔符\t|-0 \t|$\\ \t| 默认值是  ` null` ，即多行拼成一行。 |\n| 行替换\t\t |-p \t|while(<>){print}|强制输出 `$_`|\n| 行匹配\t\t |-n \t|while(<>)| 可选输出 |\n| 行增删\t\t |\t\t|$.\t\t| 全局变量，存储当前行号 |\n| \t|\t|\t|\t|\n| 启用字段分隔\t| -a |\t\t| 默认不启用。启用后，将 `分隔后的字段` 放进数组 `@F` 中 |\n| 字段输入分隔符\t|-F\t\t|split  / /,$_|\t|\n| 字段输出分隔符\t|\t|$\"| 变量指定print/say输出 `双引号` 包围时的列表/数组时的元素分隔符，默认值为空格。 |\n| 字段输出分隔符\t|\t\t|\\$,\t| 变量指定print/say输出 `无双引号` 包围的列表/数组时的元素分隔符，默认值为undef，也就是元素之间紧紧相连。 |\n| 字段处理\t\t |\t\t|$F[i] \t|\t\t|\n| \t|\t| |\t|\n| 保存修改\t| -i | | i.bak 将 原文件xxx 备份为 xxx.bak |\n| 重复符号\t|  |x | 字母 `X` 的小写 |\n| 转成数值\t|  |scalar() 或 ~~ |  |\n| 匹配真\t|  |=~ |  |\n| 匹配假\t|  |!~ |  |\n| 数组最大下标\t|  |$#array | 数组@array的最后一个元素的下标值 |\n\n\n### 注意点:\n-p 选项的注意点\n\n`ls | perl -pe 'substr $_,1,2'` 仅输出 `ls` 的数据。\n`ls | perl -pe '$_ = substr $_,1,2'` 可输出处理过的数据。\n\n","source":"_posts/单行命令perl的技巧.md","raw":"---\ntitle: 单行命令perl的技巧\ndate: 2021-01-20 17:42:25\ntags: [perl]\n---\n\n| 意图     | 选项 | 同义代码 | 备注 \t|\n| -------- | ---- | ------- | ---- |\n| 起始代码 |  |BEGIN{}| 在任何代码执行之前先执行。当仅初始化变量时，同 `-s` 选项。 |\n| 结尾代码 |\t\t|END{}   或  }{\t| 在整个程序执行最后时候执行。 |\n| 起始变量\t\t |-s\t\t|\t\t| perl的-s选项允许解析`--`之后的`-xxx=yyy`格式的开关选项。 |\n| \t|\t|\t|\t|\n| 行处理\t\t |\t\t|\t\t| 将 `分隔后的行` 放进数组 `$_` 中 |\n| 行输入分隔符\t|-l \t|$/ \t| 未启用选项时，默认值是 `\\n` 。启用选项时如果没有给定任何选项参数，则与 `行输入分隔符` 同值。 |\n| 行输出分隔符\t|-0 \t|$\\ \t| 默认值是  ` null` ，即多行拼成一行。 |\n| 行替换\t\t |-p \t|while(<>){print}|强制输出 `$_`|\n| 行匹配\t\t |-n \t|while(<>)| 可选输出 |\n| 行增删\t\t |\t\t|$.\t\t| 全局变量，存储当前行号 |\n| \t|\t|\t|\t|\n| 启用字段分隔\t| -a |\t\t| 默认不启用。启用后，将 `分隔后的字段` 放进数组 `@F` 中 |\n| 字段输入分隔符\t|-F\t\t|split  / /,$_|\t|\n| 字段输出分隔符\t|\t|$\"| 变量指定print/say输出 `双引号` 包围时的列表/数组时的元素分隔符，默认值为空格。 |\n| 字段输出分隔符\t|\t\t|\\$,\t| 变量指定print/say输出 `无双引号` 包围的列表/数组时的元素分隔符，默认值为undef，也就是元素之间紧紧相连。 |\n| 字段处理\t\t |\t\t|$F[i] \t|\t\t|\n| \t|\t| |\t|\n| 保存修改\t| -i | | i.bak 将 原文件xxx 备份为 xxx.bak |\n| 重复符号\t|  |x | 字母 `X` 的小写 |\n| 转成数值\t|  |scalar() 或 ~~ |  |\n| 匹配真\t|  |=~ |  |\n| 匹配假\t|  |!~ |  |\n| 数组最大下标\t|  |$#array | 数组@array的最后一个元素的下标值 |\n\n\n### 注意点:\n-p 选项的注意点\n\n`ls | perl -pe 'substr $_,1,2'` 仅输出 `ls` 的数据。\n`ls | perl -pe '$_ = substr $_,1,2'` 可输出处理过的数据。\n\n","slug":"单行命令perl的技巧","published":1,"updated":"2021-02-20T03:28:23.354Z","_id":"ckk59hy4o00003ko83k8nahsj","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th>意图</th>\n<th>选项</th>\n<th>同义代码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>起始代码</td>\n<td></td>\n<td>BEGIN{}</td>\n<td>在任何代码执行之前先执行。当仅初始化变量时，同 <code>-s</code> 选项。</td>\n</tr>\n<tr>\n<td>结尾代码</td>\n<td></td>\n<td>END{}   或  }{</td>\n<td>在整个程序执行最后时候执行。</td>\n</tr>\n<tr>\n<td>起始变量</td>\n<td>-s</td>\n<td></td>\n<td>perl的-s选项允许解析<code>--</code>之后的<code>-xxx=yyy</code>格式的开关选项。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>行处理</td>\n<td></td>\n<td></td>\n<td>将 <code>分隔后的行</code> 放进数组 <code>$_</code> 中</td>\n</tr>\n<tr>\n<td>行输入分隔符</td>\n<td>-l</td>\n<td>$/</td>\n<td>未启用选项时，默认值是 <code>\\n</code> 。启用选项时如果没有给定任何选项参数，则与 <code>行输入分隔符</code> 同值。</td>\n</tr>\n<tr>\n<td>行输出分隔符</td>\n<td>-0</td>\n<td>$\\</td>\n<td>默认值是  <code> null</code> ，即多行拼成一行。</td>\n</tr>\n<tr>\n<td>行替换</td>\n<td>-p</td>\n<td>while(&lt;&gt;){print}</td>\n<td>强制输出 <code>$_</code></td>\n</tr>\n<tr>\n<td>行匹配</td>\n<td>-n</td>\n<td>while(&lt;&gt;)</td>\n<td>可选输出</td>\n</tr>\n<tr>\n<td>行增删</td>\n<td></td>\n<td>$.</td>\n<td>全局变量，存储当前行号</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>启用字段分隔</td>\n<td>-a</td>\n<td></td>\n<td>默认不启用。启用后，将 <code>分隔后的字段</code> 放进数组 <code>@F</code> 中</td>\n</tr>\n<tr>\n<td>字段输入分隔符</td>\n<td>-F</td>\n<td>split  / /,$_</td>\n<td></td>\n</tr>\n<tr>\n<td>字段输出分隔符</td>\n<td></td>\n<td>$”</td>\n<td>变量指定print/say输出 <code>双引号</code> 包围时的列表/数组时的元素分隔符，默认值为空格。</td>\n</tr>\n<tr>\n<td>字段输出分隔符</td>\n<td></td>\n<td>$,</td>\n<td>变量指定print/say输出 <code>无双引号</code> 包围的列表/数组时的元素分隔符，默认值为undef，也就是元素之间紧紧相连。</td>\n</tr>\n<tr>\n<td>字段处理</td>\n<td></td>\n<td>$F[i]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>保存修改</td>\n<td>-i</td>\n<td></td>\n<td>i.bak 将 原文件xxx 备份为 xxx.bak</td>\n</tr>\n<tr>\n<td>重复符号</td>\n<td></td>\n<td>x</td>\n<td>字母 <code>X</code> 的小写</td>\n</tr>\n<tr>\n<td>转成数值</td>\n<td></td>\n<td>scalar() 或 ~~</td>\n<td></td>\n</tr>\n<tr>\n<td>匹配真</td>\n<td></td>\n<td>=~</td>\n<td></td>\n</tr>\n<tr>\n<td>匹配假</td>\n<td></td>\n<td>!~</td>\n<td></td>\n</tr>\n<tr>\n<td>数组最大下标</td>\n<td></td>\n<td>$#array</td>\n<td>数组@array的最后一个元素的下标值</td>\n</tr>\n</tbody></table>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点:\"></a>注意点:</h3><p>-p 选项的注意点</p>\n<p><code>ls | perl -pe &#39;substr $_,1,2&#39;</code> 仅输出 <code>ls</code> 的数据。<br><code>ls | perl -pe &#39;$_ = substr $_,1,2&#39;</code> 可输出处理过的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>意图</th>\n<th>选项</th>\n<th>同义代码</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>起始代码</td>\n<td></td>\n<td>BEGIN{}</td>\n<td>在任何代码执行之前先执行。当仅初始化变量时，同 <code>-s</code> 选项。</td>\n</tr>\n<tr>\n<td>结尾代码</td>\n<td></td>\n<td>END{}   或  }{</td>\n<td>在整个程序执行最后时候执行。</td>\n</tr>\n<tr>\n<td>起始变量</td>\n<td>-s</td>\n<td></td>\n<td>perl的-s选项允许解析<code>--</code>之后的<code>-xxx=yyy</code>格式的开关选项。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>行处理</td>\n<td></td>\n<td></td>\n<td>将 <code>分隔后的行</code> 放进数组 <code>$_</code> 中</td>\n</tr>\n<tr>\n<td>行输入分隔符</td>\n<td>-l</td>\n<td>$/</td>\n<td>未启用选项时，默认值是 <code>\\n</code> 。启用选项时如果没有给定任何选项参数，则与 <code>行输入分隔符</code> 同值。</td>\n</tr>\n<tr>\n<td>行输出分隔符</td>\n<td>-0</td>\n<td>$\\</td>\n<td>默认值是  <code> null</code> ，即多行拼成一行。</td>\n</tr>\n<tr>\n<td>行替换</td>\n<td>-p</td>\n<td>while(&lt;&gt;){print}</td>\n<td>强制输出 <code>$_</code></td>\n</tr>\n<tr>\n<td>行匹配</td>\n<td>-n</td>\n<td>while(&lt;&gt;)</td>\n<td>可选输出</td>\n</tr>\n<tr>\n<td>行增删</td>\n<td></td>\n<td>$.</td>\n<td>全局变量，存储当前行号</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>启用字段分隔</td>\n<td>-a</td>\n<td></td>\n<td>默认不启用。启用后，将 <code>分隔后的字段</code> 放进数组 <code>@F</code> 中</td>\n</tr>\n<tr>\n<td>字段输入分隔符</td>\n<td>-F</td>\n<td>split  / /,$_</td>\n<td></td>\n</tr>\n<tr>\n<td>字段输出分隔符</td>\n<td></td>\n<td>$”</td>\n<td>变量指定print/say输出 <code>双引号</code> 包围时的列表/数组时的元素分隔符，默认值为空格。</td>\n</tr>\n<tr>\n<td>字段输出分隔符</td>\n<td></td>\n<td>$,</td>\n<td>变量指定print/say输出 <code>无双引号</code> 包围的列表/数组时的元素分隔符，默认值为undef，也就是元素之间紧紧相连。</td>\n</tr>\n<tr>\n<td>字段处理</td>\n<td></td>\n<td>$F[i]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>保存修改</td>\n<td>-i</td>\n<td></td>\n<td>i.bak 将 原文件xxx 备份为 xxx.bak</td>\n</tr>\n<tr>\n<td>重复符号</td>\n<td></td>\n<td>x</td>\n<td>字母 <code>X</code> 的小写</td>\n</tr>\n<tr>\n<td>转成数值</td>\n<td></td>\n<td>scalar() 或 ~~</td>\n<td></td>\n</tr>\n<tr>\n<td>匹配真</td>\n<td></td>\n<td>=~</td>\n<td></td>\n</tr>\n<tr>\n<td>匹配假</td>\n<td></td>\n<td>!~</td>\n<td></td>\n</tr>\n<tr>\n<td>数组最大下标</td>\n<td></td>\n<td>$#array</td>\n<td>数组@array的最后一个元素的下标值</td>\n</tr>\n</tbody></table>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点:\"></a>注意点:</h3><p>-p 选项的注意点</p>\n<p><code>ls | perl -pe &#39;substr $_,1,2&#39;</code> 仅输出 <code>ls</code> 的数据。<br><code>ls | perl -pe &#39;$_ = substr $_,1,2&#39;</code> 可输出处理过的数据。</p>\n"},{"title":"文件描述符AND水枪","date":"2021-01-27T08:58:40.000Z","_content":"\nShell`辅助`我们调用其他命令。我们要时时刻刻记住，是Shell启动了`命令`，`命令`被启动时看到的`环境`是被Shell修改了的。  \n比如：  \n```shell\ncat *.log  \n```\n`命令cat`会输出工作目录下所有\".log\"结尾的文件内容，因为Shell启动`命令cat`前时把 \"*.log\"替换了。  \n\n那么我们写`文件重定向`时Shell做了什么呢？  \n首先我们看看重定向的写法:  \n```shell\ncmd0 0< list.txt     # 标准输入  \ncmd0 < list.txt      # 标准输入(简写)  \n\ncmd1 1> data.log     # 标准输出  \ncmd1 > data.log      # 标准输出(简写)  \n\ncmd2 2> err.log      # 标准错误输出(其他文件描述符不能简写)   \n```\n\nShell会扫描到 `0<`, `<`, `1>`, `>`, `2>` 等带有`<`,`>`的字符串，开始设置`文件描述符`的`重定向`，然后启动`命令cmd`。  \n`命令cmd`以正常的方式工作，如果用到了被Shell重定向的`文件描述符`，他也不会察觉到。   \n\n`标准输入0`是单向，向内的。数据传输到命令cmd0自身。  \n`标准输出1`和`标准错误2`是单向，向外的。   \n其他文件描述符都是双向的。   \n\n`cmd0` 如果用到了`标准输入`，它等来的不是`键盘`输入的数据，而是`文件`传入的数据。  \n`cmd1` 如果用到了`标准输出`，它以为把数据输出到`屏幕`上，其实去了`文件`中。  \n\n把`文件描述符`当成`水枪`。    \n把左边的`命令cmd`和右边的`文件file`当成水池。   \n\n文件描述符是进程私有的，它指向的`文件`其实是`套接字`，  \n真实情况是只有`操作系统`能打开文件，操作系统掌握着`套接字`，所以`套接字`是共有的。  \n\n所以`文件描述符`可以随时修改指向的`套接字`。   \n例如 `2>&1`，即是将`2号文件描述符`重新指向`1号文件描述符`当时指向的`套接字`。   \n可以比喻成 `2号水枪`也去`1号水枪`放水的`池子`里放水了。\n\n```shell\ncmd file1   # file1被cmd打开，默认给它一个新的文件描述符，012已经被占用了，所以会有文件描述符3表示打开的file1。   \ncmd < file2 # file2被Shell重定向到0，即用0来表示打开的file2。而cmd在等待标准输入0的输入数据。\n\ncmd >file3 2>&   # 1号文件描述符指向file3，2号文件描述符跟着也指向1号文件描述符指向的file3。\n# 故1号2号文件描述符都指向了同一个文件。  \ncmd 2>& >file4   #2号文件描述符跟着1号文件描述符指向的文件，而1号描述符转而指向file4。\n# 故1号2号文件描述符分别指向了两个文件。\n```\n\n[其他补充](https://www.junmajinlong.com/shell/fd_duplicate/)\n","source":"_posts/文件描述符AND水枪.md","raw":"---\ntitle: 文件描述符AND水枪\ndate: 2021-01-27 16:58:40\ntags: [linux,bash]\n---\n\nShell`辅助`我们调用其他命令。我们要时时刻刻记住，是Shell启动了`命令`，`命令`被启动时看到的`环境`是被Shell修改了的。  \n比如：  \n```shell\ncat *.log  \n```\n`命令cat`会输出工作目录下所有\".log\"结尾的文件内容，因为Shell启动`命令cat`前时把 \"*.log\"替换了。  \n\n那么我们写`文件重定向`时Shell做了什么呢？  \n首先我们看看重定向的写法:  \n```shell\ncmd0 0< list.txt     # 标准输入  \ncmd0 < list.txt      # 标准输入(简写)  \n\ncmd1 1> data.log     # 标准输出  \ncmd1 > data.log      # 标准输出(简写)  \n\ncmd2 2> err.log      # 标准错误输出(其他文件描述符不能简写)   \n```\n\nShell会扫描到 `0<`, `<`, `1>`, `>`, `2>` 等带有`<`,`>`的字符串，开始设置`文件描述符`的`重定向`，然后启动`命令cmd`。  \n`命令cmd`以正常的方式工作，如果用到了被Shell重定向的`文件描述符`，他也不会察觉到。   \n\n`标准输入0`是单向，向内的。数据传输到命令cmd0自身。  \n`标准输出1`和`标准错误2`是单向，向外的。   \n其他文件描述符都是双向的。   \n\n`cmd0` 如果用到了`标准输入`，它等来的不是`键盘`输入的数据，而是`文件`传入的数据。  \n`cmd1` 如果用到了`标准输出`，它以为把数据输出到`屏幕`上，其实去了`文件`中。  \n\n把`文件描述符`当成`水枪`。    \n把左边的`命令cmd`和右边的`文件file`当成水池。   \n\n文件描述符是进程私有的，它指向的`文件`其实是`套接字`，  \n真实情况是只有`操作系统`能打开文件，操作系统掌握着`套接字`，所以`套接字`是共有的。  \n\n所以`文件描述符`可以随时修改指向的`套接字`。   \n例如 `2>&1`，即是将`2号文件描述符`重新指向`1号文件描述符`当时指向的`套接字`。   \n可以比喻成 `2号水枪`也去`1号水枪`放水的`池子`里放水了。\n\n```shell\ncmd file1   # file1被cmd打开，默认给它一个新的文件描述符，012已经被占用了，所以会有文件描述符3表示打开的file1。   \ncmd < file2 # file2被Shell重定向到0，即用0来表示打开的file2。而cmd在等待标准输入0的输入数据。\n\ncmd >file3 2>&   # 1号文件描述符指向file3，2号文件描述符跟着也指向1号文件描述符指向的file3。\n# 故1号2号文件描述符都指向了同一个文件。  \ncmd 2>& >file4   #2号文件描述符跟着1号文件描述符指向的文件，而1号描述符转而指向file4。\n# 故1号2号文件描述符分别指向了两个文件。\n```\n\n[其他补充](https://www.junmajinlong.com/shell/fd_duplicate/)\n","slug":"文件描述符AND水枪","published":1,"updated":"2021-02-23T03:01:20.961Z","_id":"ckkf8dnsb0000e0o8dxo475r5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Shell<code>辅助</code>我们调用其他命令。我们要时时刻刻记住，是Shell启动了<code>命令</code>，<code>命令</code>被启动时看到的<code>环境</code>是被Shell修改了的。<br>比如：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat *.log  </span><br></pre></td></tr></table></figure>\n<p><code>命令cat</code>会输出工作目录下所有”.log”结尾的文件内容，因为Shell启动<code>命令cat</code>前时把 “*.log”替换了。  </p>\n<p>那么我们写<code>文件重定向</code>时Shell做了什么呢？<br>首先我们看看重定向的写法:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd0 0&lt; list.txt     # 标准输入  </span><br><span class=\"line\">cmd0 &lt; list.txt      # 标准输入(简写)  </span><br><span class=\"line\"></span><br><span class=\"line\">cmd1 1&gt; data.log     # 标准输出  </span><br><span class=\"line\">cmd1 &gt; data.log      # 标准输出(简写)  </span><br><span class=\"line\"></span><br><span class=\"line\">cmd2 2&gt; err.log      # 标准错误输出(其他文件描述符不能简写)   </span><br></pre></td></tr></table></figure>\n<p>Shell会扫描到 <code>0&lt;</code>, <code>&lt;</code>, <code>1&gt;</code>, <code>&gt;</code>, <code>2&gt;</code> 等带有<code>&lt;</code>,<code>&gt;</code>的字符串，开始设置<code>文件描述符</code>的<code>重定向</code>，然后启动<code>命令cmd</code>。<br><code>命令cmd</code>以正常的方式工作，如果用到了被Shell重定向的<code>文件描述符</code>，他也不会察觉到。   </p>\n<p><code>标准输入0</code>是单向，向内的。数据传输到命令cmd0自身。<br><code>标准输出1</code>和<code>标准错误2</code>是单向，向外的。<br>其他文件描述符都是双向的。   </p>\n<p><code>cmd0</code> 如果用到了<code>标准输入</code>，它等来的不是<code>键盘</code>输入的数据，而是<code>文件</code>传入的数据。<br><code>cmd1</code> 如果用到了<code>标准输出</code>，它以为把数据输出到<code>屏幕</code>上，其实去了<code>文件</code>中。  </p>\n<p>把<code>文件描述符</code>当成<code>水枪</code>。<br>把左边的<code>命令cmd</code>和右边的<code>文件file</code>当成水池。   </p>\n<p>文件描述符是进程私有的，它指向的<code>文件</code>其实是<code>套接字</code>，<br>真实情况是只有<code>操作系统</code>能打开文件，操作系统掌握着<code>套接字</code>，所以<code>套接字</code>是共有的。  </p>\n<p>所以<code>文件描述符</code>可以随时修改指向的<code>套接字</code>。<br>例如 <code>2&gt;&amp;1</code>，即是将<code>2号文件描述符</code>重新指向<code>1号文件描述符</code>当时指向的<code>套接字</code>。<br>可以比喻成 <code>2号水枪</code>也去<code>1号水枪</code>放水的<code>池子</code>里放水了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd file1   # file1被cmd打开，默认给它一个新的文件描述符，012已经被占用了，所以会有文件描述符3表示打开的file1。   </span><br><span class=\"line\">cmd &lt; file2 # file2被Shell重定向到0，即用0来表示打开的file2。而cmd在等待标准输入0的输入数据。</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &gt;file3 2&gt;&amp;   # 1号文件描述符指向file3，2号文件描述符跟着也指向1号文件描述符指向的file3。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故1号2号文件描述符都指向了同一个文件。</span>  </span><br><span class=\"line\">cmd 2&gt;&amp; &gt;file4   #2号文件描述符跟着1号文件描述符指向的文件，而1号描述符转而指向file4。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故1号2号文件描述符分别指向了两个文件。</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.junmajinlong.com/shell/fd_duplicate/\">其他补充</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Shell<code>辅助</code>我们调用其他命令。我们要时时刻刻记住，是Shell启动了<code>命令</code>，<code>命令</code>被启动时看到的<code>环境</code>是被Shell修改了的。<br>比如：  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat *.log  </span><br></pre></td></tr></table></figure>\n<p><code>命令cat</code>会输出工作目录下所有”.log”结尾的文件内容，因为Shell启动<code>命令cat</code>前时把 “*.log”替换了。  </p>\n<p>那么我们写<code>文件重定向</code>时Shell做了什么呢？<br>首先我们看看重定向的写法:  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd0 0&lt; list.txt     # 标准输入  </span><br><span class=\"line\">cmd0 &lt; list.txt      # 标准输入(简写)  </span><br><span class=\"line\"></span><br><span class=\"line\">cmd1 1&gt; data.log     # 标准输出  </span><br><span class=\"line\">cmd1 &gt; data.log      # 标准输出(简写)  </span><br><span class=\"line\"></span><br><span class=\"line\">cmd2 2&gt; err.log      # 标准错误输出(其他文件描述符不能简写)   </span><br></pre></td></tr></table></figure>\n<p>Shell会扫描到 <code>0&lt;</code>, <code>&lt;</code>, <code>1&gt;</code>, <code>&gt;</code>, <code>2&gt;</code> 等带有<code>&lt;</code>,<code>&gt;</code>的字符串，开始设置<code>文件描述符</code>的<code>重定向</code>，然后启动<code>命令cmd</code>。<br><code>命令cmd</code>以正常的方式工作，如果用到了被Shell重定向的<code>文件描述符</code>，他也不会察觉到。   </p>\n<p><code>标准输入0</code>是单向，向内的。数据传输到命令cmd0自身。<br><code>标准输出1</code>和<code>标准错误2</code>是单向，向外的。<br>其他文件描述符都是双向的。   </p>\n<p><code>cmd0</code> 如果用到了<code>标准输入</code>，它等来的不是<code>键盘</code>输入的数据，而是<code>文件</code>传入的数据。<br><code>cmd1</code> 如果用到了<code>标准输出</code>，它以为把数据输出到<code>屏幕</code>上，其实去了<code>文件</code>中。  </p>\n<p>把<code>文件描述符</code>当成<code>水枪</code>。<br>把左边的<code>命令cmd</code>和右边的<code>文件file</code>当成水池。   </p>\n<p>文件描述符是进程私有的，它指向的<code>文件</code>其实是<code>套接字</code>，<br>真实情况是只有<code>操作系统</code>能打开文件，操作系统掌握着<code>套接字</code>，所以<code>套接字</code>是共有的。  </p>\n<p>所以<code>文件描述符</code>可以随时修改指向的<code>套接字</code>。<br>例如 <code>2&gt;&amp;1</code>，即是将<code>2号文件描述符</code>重新指向<code>1号文件描述符</code>当时指向的<code>套接字</code>。<br>可以比喻成 <code>2号水枪</code>也去<code>1号水枪</code>放水的<code>池子</code>里放水了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd file1   # file1被cmd打开，默认给它一个新的文件描述符，012已经被占用了，所以会有文件描述符3表示打开的file1。   </span><br><span class=\"line\">cmd &lt; file2 # file2被Shell重定向到0，即用0来表示打开的file2。而cmd在等待标准输入0的输入数据。</span><br><span class=\"line\"></span><br><span class=\"line\">cmd &gt;file3 2&gt;&amp;   # 1号文件描述符指向file3，2号文件描述符跟着也指向1号文件描述符指向的file3。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故1号2号文件描述符都指向了同一个文件。</span>  </span><br><span class=\"line\">cmd 2&gt;&amp; &gt;file4   #2号文件描述符跟着1号文件描述符指向的文件，而1号描述符转而指向file4。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 故1号2号文件描述符分别指向了两个文件。</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.junmajinlong.com/shell/fd_duplicate/\">其他补充</a></p>\n"},{"title":"终极文本分析工具","date":"2021-01-29T05:46:10.000Z","_content":"当前常用的文本分析工具，尤其是指三剑客\"grep\",\"sed\",\"awk\"。他们在查找某个单词，处理某一行，处理某一个字段，简单的字段联动时，还是可以应付的。\nperl,ruby之类的语言也只是简化三剑客的操作，并没有更一步处理复杂的文本。\n\n对一个文本里的多个字段做聚合处理时，awk需要事先知道这些字段的前后位置。它忽略了其他字段，因为其他字段对他来说没有意义。但是如果每个字段都有意义，事情就复杂起来了。\n\n即使awk,perl,ruby强行处理，写出来的代码既复杂又不直观，后续如果待处理文本中如有字段变更意义，代码的升级会非常痛苦。\n\n词法分析和语法分析就是终极工具。它几乎可以无视文本格式(有的文本中格式是有意义的，不能忽视)，最极端的功能是将一行json文本格式化成漂亮的多行缩进排布。  \njison就是这样一种工具，它既可以转换文本格式，还可以根据规则执行文本中描述的逻辑。\n\ntest.jison\n```text\n%lex\n%%\n\n\\s+\t\t\t/* skip whitespace */\n\\w+\t\t\treturn 'ATOM'\n\":\"\t\t\treturn 'INFO'\n\"{\"\t\t\treturn 'BEGIN'\n\"}\"\t\t\treturn 'END'\n<<EOF>>\t\treturn 'EOF'\n.\t\t\treturn 'INVALID'\n\n/lex\n\n%start experssions\n%%\n\nexperssions\n\t: item EOF\n\t\t{ console.log($1); }\n\t;\n\nitem\n\t: ATOM INFO ATOM\n\t\t{ $$ = $1 + \" : \" + $3; }\n\t| ATOM INFO item \n\t\t{ $$ = $1 + \" : \" + $3; }\n\t| BEGIN item END\n\t\t{ $$ = \"{\" + $2 + \"}\"; }\n\t;\n```\n\ntest.txt\n```text\n{\n  xxx:{\n\nyyyy:{\nzzz:aaaa}\n      }\n}\n```\n\n\n```text\njison test.jison\nnode test.js test.txt\n```\n\n执行结果\n```text\n{xxx : {yyyy : {zzz : aaaa}}}\n```\n","source":"_posts/终极文本分析工具.md","raw":"---\ntitle: 终极文本分析工具\ndate: 2021-01-29 13:46:10\ntags: [编译器]\n---\n当前常用的文本分析工具，尤其是指三剑客\"grep\",\"sed\",\"awk\"。他们在查找某个单词，处理某一行，处理某一个字段，简单的字段联动时，还是可以应付的。\nperl,ruby之类的语言也只是简化三剑客的操作，并没有更一步处理复杂的文本。\n\n对一个文本里的多个字段做聚合处理时，awk需要事先知道这些字段的前后位置。它忽略了其他字段，因为其他字段对他来说没有意义。但是如果每个字段都有意义，事情就复杂起来了。\n\n即使awk,perl,ruby强行处理，写出来的代码既复杂又不直观，后续如果待处理文本中如有字段变更意义，代码的升级会非常痛苦。\n\n词法分析和语法分析就是终极工具。它几乎可以无视文本格式(有的文本中格式是有意义的，不能忽视)，最极端的功能是将一行json文本格式化成漂亮的多行缩进排布。  \njison就是这样一种工具，它既可以转换文本格式，还可以根据规则执行文本中描述的逻辑。\n\ntest.jison\n```text\n%lex\n%%\n\n\\s+\t\t\t/* skip whitespace */\n\\w+\t\t\treturn 'ATOM'\n\":\"\t\t\treturn 'INFO'\n\"{\"\t\t\treturn 'BEGIN'\n\"}\"\t\t\treturn 'END'\n<<EOF>>\t\treturn 'EOF'\n.\t\t\treturn 'INVALID'\n\n/lex\n\n%start experssions\n%%\n\nexperssions\n\t: item EOF\n\t\t{ console.log($1); }\n\t;\n\nitem\n\t: ATOM INFO ATOM\n\t\t{ $$ = $1 + \" : \" + $3; }\n\t| ATOM INFO item \n\t\t{ $$ = $1 + \" : \" + $3; }\n\t| BEGIN item END\n\t\t{ $$ = \"{\" + $2 + \"}\"; }\n\t;\n```\n\ntest.txt\n```text\n{\n  xxx:{\n\nyyyy:{\nzzz:aaaa}\n      }\n}\n```\n\n\n```text\njison test.jison\nnode test.js test.txt\n```\n\n执行结果\n```text\n{xxx : {yyyy : {zzz : aaaa}}}\n```\n","slug":"终极文本分析工具","published":1,"updated":"2021-02-20T03:28:23.351Z","_id":"ckkhvy4lq0000ofo8dfq818ee","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当前常用的文本分析工具，尤其是指三剑客”grep”,”sed”,”awk”。他们在查找某个单词，处理某一行，处理某一个字段，简单的字段联动时，还是可以应付的。<br>perl,ruby之类的语言也只是简化三剑客的操作，并没有更一步处理复杂的文本。</p>\n<p>对一个文本里的多个字段做聚合处理时，awk需要事先知道这些字段的前后位置。它忽略了其他字段，因为其他字段对他来说没有意义。但是如果每个字段都有意义，事情就复杂起来了。</p>\n<p>即使awk,perl,ruby强行处理，写出来的代码既复杂又不直观，后续如果待处理文本中如有字段变更意义，代码的升级会非常痛苦。</p>\n<p>词法分析和语法分析就是终极工具。它几乎可以无视文本格式(有的文本中格式是有意义的，不能忽视)，最极端的功能是将一行json文本格式化成漂亮的多行缩进排布。<br>jison就是这样一种工具，它既可以转换文本格式，还可以根据规则执行文本中描述的逻辑。</p>\n<p>test.jison</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%lex</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">\\s+\t\t\t/* skip whitespace */</span><br><span class=\"line\">\\w+\t\t\treturn &#x27;ATOM&#x27;</span><br><span class=\"line\">&quot;:&quot;\t\t\treturn &#x27;INFO&#x27;</span><br><span class=\"line\">&quot;&#123;&quot;\t\t\treturn &#x27;BEGIN&#x27;</span><br><span class=\"line\">&quot;&#125;&quot;\t\t\treturn &#x27;END&#x27;</span><br><span class=\"line\">&lt;&lt;EOF&gt;&gt;\t\treturn &#x27;EOF&#x27;</span><br><span class=\"line\">.\t\t\treturn &#x27;INVALID&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/lex</span><br><span class=\"line\"></span><br><span class=\"line\">%start experssions</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">experssions</span><br><span class=\"line\">\t: item EOF</span><br><span class=\"line\">\t\t&#123; console.log($1); &#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\"></span><br><span class=\"line\">item</span><br><span class=\"line\">\t: ATOM INFO ATOM</span><br><span class=\"line\">\t\t&#123; $$ = $1 + &quot; : &quot; + $3; &#125;</span><br><span class=\"line\">\t| ATOM INFO item </span><br><span class=\"line\">\t\t&#123; $$ = $1 + &quot; : &quot; + $3; &#125;</span><br><span class=\"line\">\t| BEGIN item END</span><br><span class=\"line\">\t\t&#123; $$ = &quot;&#123;&quot; + $2 + &quot;&#125;&quot;; &#125;</span><br><span class=\"line\">\t;</span><br></pre></td></tr></table></figure>\n<p>test.txt</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  xxx:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">yyyy:&#123;</span><br><span class=\"line\">zzz:aaaa&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jison test.jison</span><br><span class=\"line\">node test.js test.txt</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;xxx : &#123;yyyy : &#123;zzz : aaaa&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>当前常用的文本分析工具，尤其是指三剑客”grep”,”sed”,”awk”。他们在查找某个单词，处理某一行，处理某一个字段，简单的字段联动时，还是可以应付的。<br>perl,ruby之类的语言也只是简化三剑客的操作，并没有更一步处理复杂的文本。</p>\n<p>对一个文本里的多个字段做聚合处理时，awk需要事先知道这些字段的前后位置。它忽略了其他字段，因为其他字段对他来说没有意义。但是如果每个字段都有意义，事情就复杂起来了。</p>\n<p>即使awk,perl,ruby强行处理，写出来的代码既复杂又不直观，后续如果待处理文本中如有字段变更意义，代码的升级会非常痛苦。</p>\n<p>词法分析和语法分析就是终极工具。它几乎可以无视文本格式(有的文本中格式是有意义的，不能忽视)，最极端的功能是将一行json文本格式化成漂亮的多行缩进排布。<br>jison就是这样一种工具，它既可以转换文本格式，还可以根据规则执行文本中描述的逻辑。</p>\n<p>test.jison</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%lex</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">\\s+\t\t\t/* skip whitespace */</span><br><span class=\"line\">\\w+\t\t\treturn &#x27;ATOM&#x27;</span><br><span class=\"line\">&quot;:&quot;\t\t\treturn &#x27;INFO&#x27;</span><br><span class=\"line\">&quot;&#123;&quot;\t\t\treturn &#x27;BEGIN&#x27;</span><br><span class=\"line\">&quot;&#125;&quot;\t\t\treturn &#x27;END&#x27;</span><br><span class=\"line\">&lt;&lt;EOF&gt;&gt;\t\treturn &#x27;EOF&#x27;</span><br><span class=\"line\">.\t\t\treturn &#x27;INVALID&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/lex</span><br><span class=\"line\"></span><br><span class=\"line\">%start experssions</span><br><span class=\"line\">%%</span><br><span class=\"line\"></span><br><span class=\"line\">experssions</span><br><span class=\"line\">\t: item EOF</span><br><span class=\"line\">\t\t&#123; console.log($1); &#125;</span><br><span class=\"line\">\t;</span><br><span class=\"line\"></span><br><span class=\"line\">item</span><br><span class=\"line\">\t: ATOM INFO ATOM</span><br><span class=\"line\">\t\t&#123; $$ = $1 + &quot; : &quot; + $3; &#125;</span><br><span class=\"line\">\t| ATOM INFO item </span><br><span class=\"line\">\t\t&#123; $$ = $1 + &quot; : &quot; + $3; &#125;</span><br><span class=\"line\">\t| BEGIN item END</span><br><span class=\"line\">\t\t&#123; $$ = &quot;&#123;&quot; + $2 + &quot;&#125;&quot;; &#125;</span><br><span class=\"line\">\t;</span><br></pre></td></tr></table></figure>\n<p>test.txt</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  xxx:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">yyyy:&#123;</span><br><span class=\"line\">zzz:aaaa&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jison test.jison</span><br><span class=\"line\">node test.js test.txt</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;xxx : &#123;yyyy : &#123;zzz : aaaa&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"IP的一些资料","date":"2021-02-02T02:23:44.000Z","_content":"### 中国的IPv4数量  \nhttp://www.cac.gov.cn/wxb_pdf/0228043.pdf 的第5页，\"截至 2018 年 12 月，我国 IPv4 地址数量为 33892 万个。\"\n\n### 一些聚合网站\nhttp://ip.bczs.net/   \nhttp://ip.yqie.com/\n\n可以查询各国ip数量分布，其中有研究价值的是各省市，比如  \n[上海IP地址列表](http://ip.yqie.com/cn/shanghai/)   \n[上海市网吧IP地址列表](http://ip.yqie.com/cn/shanghai/wangba.htm)  \n可以看见各机构申请IP的数量\n\n当前公网IP地址是 116.233.76.62\n```text\n您的本机 IP：116.233.76.62\n所属国家/地区：中国(CN)\n路由信息：116.233.0.0/16\n区域号码：AS4812\n区域名称：CHINANET-SH-AP\n描述信息：China Telecom (Group) Shanghai Telecom Company Shanghai China\n中国电信（集团） 上海电信公司 上海，中国\n\nIP地址段：116.224.0.0 - 116.239.255.255\nIP段名称：CHINANET-SH\nIP段描述：CHINANET Shanghai province network China Telecom No.31,jingrong street Beijing 100032\n\n参考数据：116.232.205.0-116.233.89.255 上海市徐汇区 电信\nIP数据：116.224.0.0-116.239.255.255 中国 上海 上海\n```\n\n### MAC的直连范围\n\nhttps://juejin.cn/post/6917139283463634951   \n\nMAC 地址的通信范围比较小，局限在一个子网里面。  \n例如，从 192.168.0.2/24 访问192.168.0.3/24 是可以用 MAC 地址的。   \n一旦跨子网，即从 192.168.0.2/24 到 192.168.1.2/24，MAC地址就不行了，需要 IP 地址起作用了   \n\n### 几个概念\n\nhttps://juejin.cn/post/6905319321321504775\n```text\n\n包:  相当于发送请求的网络包\n\n消息:     应用协议中数据的单位\n段:      TCP数据流中的信息\n片:      IP中数据单位\n帧:      数据链路层中包的单位\n```\n","source":"_posts/IP的一些资料.md","raw":"---\ntitle: IP的一些资料\ndate: 2021-02-02 10:23:44\ntags: [ip]\n---\n### 中国的IPv4数量  \nhttp://www.cac.gov.cn/wxb_pdf/0228043.pdf 的第5页，\"截至 2018 年 12 月，我国 IPv4 地址数量为 33892 万个。\"\n\n### 一些聚合网站\nhttp://ip.bczs.net/   \nhttp://ip.yqie.com/\n\n可以查询各国ip数量分布，其中有研究价值的是各省市，比如  \n[上海IP地址列表](http://ip.yqie.com/cn/shanghai/)   \n[上海市网吧IP地址列表](http://ip.yqie.com/cn/shanghai/wangba.htm)  \n可以看见各机构申请IP的数量\n\n当前公网IP地址是 116.233.76.62\n```text\n您的本机 IP：116.233.76.62\n所属国家/地区：中国(CN)\n路由信息：116.233.0.0/16\n区域号码：AS4812\n区域名称：CHINANET-SH-AP\n描述信息：China Telecom (Group) Shanghai Telecom Company Shanghai China\n中国电信（集团） 上海电信公司 上海，中国\n\nIP地址段：116.224.0.0 - 116.239.255.255\nIP段名称：CHINANET-SH\nIP段描述：CHINANET Shanghai province network China Telecom No.31,jingrong street Beijing 100032\n\n参考数据：116.232.205.0-116.233.89.255 上海市徐汇区 电信\nIP数据：116.224.0.0-116.239.255.255 中国 上海 上海\n```\n\n### MAC的直连范围\n\nhttps://juejin.cn/post/6917139283463634951   \n\nMAC 地址的通信范围比较小，局限在一个子网里面。  \n例如，从 192.168.0.2/24 访问192.168.0.3/24 是可以用 MAC 地址的。   \n一旦跨子网，即从 192.168.0.2/24 到 192.168.1.2/24，MAC地址就不行了，需要 IP 地址起作用了   \n\n### 几个概念\n\nhttps://juejin.cn/post/6905319321321504775\n```text\n\n包:  相当于发送请求的网络包\n\n消息:     应用协议中数据的单位\n段:      TCP数据流中的信息\n片:      IP中数据单位\n帧:      数据链路层中包的单位\n```\n","slug":"IP的一些资料","published":1,"updated":"2021-02-22T03:13:36.511Z","_id":"ckkneg4s1000094o8176tev7b","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"中国的IPv4数量\"><a href=\"#中国的IPv4数量\" class=\"headerlink\" title=\"中国的IPv4数量\"></a>中国的IPv4数量</h3><p><a href=\"http://www.cac.gov.cn/wxb_pdf/0228043.pdf\">http://www.cac.gov.cn/wxb_pdf/0228043.pdf</a> 的第5页，”截至 2018 年 12 月，我国 IPv4 地址数量为 33892 万个。”</p>\n<h3 id=\"一些聚合网站\"><a href=\"#一些聚合网站\" class=\"headerlink\" title=\"一些聚合网站\"></a>一些聚合网站</h3><p><a href=\"http://ip.bczs.net/\">http://ip.bczs.net/</a><br><a href=\"http://ip.yqie.com/\">http://ip.yqie.com/</a></p>\n<p>可以查询各国ip数量分布，其中有研究价值的是各省市，比如<br><a href=\"http://ip.yqie.com/cn/shanghai/\">上海IP地址列表</a><br><a href=\"http://ip.yqie.com/cn/shanghai/wangba.htm\">上海市网吧IP地址列表</a><br>可以看见各机构申请IP的数量</p>\n<p>当前公网IP地址是 116.233.76.62</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">您的本机 IP：116.233.76.62</span><br><span class=\"line\">所属国家/地区：中国(CN)</span><br><span class=\"line\">路由信息：116.233.0.0/16</span><br><span class=\"line\">区域号码：AS4812</span><br><span class=\"line\">区域名称：CHINANET-SH-AP</span><br><span class=\"line\">描述信息：China Telecom (Group) Shanghai Telecom Company Shanghai China</span><br><span class=\"line\">中国电信（集团） 上海电信公司 上海，中国</span><br><span class=\"line\"></span><br><span class=\"line\">IP地址段：116.224.0.0 - 116.239.255.255</span><br><span class=\"line\">IP段名称：CHINANET-SH</span><br><span class=\"line\">IP段描述：CHINANET Shanghai province network China Telecom No.31,jingrong street Beijing 100032</span><br><span class=\"line\"></span><br><span class=\"line\">参考数据：116.232.205.0-116.233.89.255 上海市徐汇区 电信</span><br><span class=\"line\">IP数据：116.224.0.0-116.239.255.255 中国 上海 上海</span><br></pre></td></tr></table></figure>\n<h3 id=\"MAC的直连范围\"><a href=\"#MAC的直连范围\" class=\"headerlink\" title=\"MAC的直连范围\"></a>MAC的直连范围</h3><p><a href=\"https://juejin.cn/post/6917139283463634951\">https://juejin.cn/post/6917139283463634951</a>   </p>\n<p>MAC 地址的通信范围比较小，局限在一个子网里面。<br>例如，从 192.168.0.2/24 访问192.168.0.3/24 是可以用 MAC 地址的。<br>一旦跨子网，即从 192.168.0.2/24 到 192.168.1.2/24，MAC地址就不行了，需要 IP 地址起作用了   </p>\n<h3 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h3><p><a href=\"https://juejin.cn/post/6905319321321504775\">https://juejin.cn/post/6905319321321504775</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">包:  相当于发送请求的网络包</span><br><span class=\"line\"></span><br><span class=\"line\">消息:     应用协议中数据的单位</span><br><span class=\"line\">段:      TCP数据流中的信息</span><br><span class=\"line\">片:      IP中数据单位</span><br><span class=\"line\">帧:      数据链路层中包的单位</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"中国的IPv4数量\"><a href=\"#中国的IPv4数量\" class=\"headerlink\" title=\"中国的IPv4数量\"></a>中国的IPv4数量</h3><p><a href=\"http://www.cac.gov.cn/wxb_pdf/0228043.pdf\">http://www.cac.gov.cn/wxb_pdf/0228043.pdf</a> 的第5页，”截至 2018 年 12 月，我国 IPv4 地址数量为 33892 万个。”</p>\n<h3 id=\"一些聚合网站\"><a href=\"#一些聚合网站\" class=\"headerlink\" title=\"一些聚合网站\"></a>一些聚合网站</h3><p><a href=\"http://ip.bczs.net/\">http://ip.bczs.net/</a><br><a href=\"http://ip.yqie.com/\">http://ip.yqie.com/</a></p>\n<p>可以查询各国ip数量分布，其中有研究价值的是各省市，比如<br><a href=\"http://ip.yqie.com/cn/shanghai/\">上海IP地址列表</a><br><a href=\"http://ip.yqie.com/cn/shanghai/wangba.htm\">上海市网吧IP地址列表</a><br>可以看见各机构申请IP的数量</p>\n<p>当前公网IP地址是 116.233.76.62</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">您的本机 IP：116.233.76.62</span><br><span class=\"line\">所属国家/地区：中国(CN)</span><br><span class=\"line\">路由信息：116.233.0.0/16</span><br><span class=\"line\">区域号码：AS4812</span><br><span class=\"line\">区域名称：CHINANET-SH-AP</span><br><span class=\"line\">描述信息：China Telecom (Group) Shanghai Telecom Company Shanghai China</span><br><span class=\"line\">中国电信（集团） 上海电信公司 上海，中国</span><br><span class=\"line\"></span><br><span class=\"line\">IP地址段：116.224.0.0 - 116.239.255.255</span><br><span class=\"line\">IP段名称：CHINANET-SH</span><br><span class=\"line\">IP段描述：CHINANET Shanghai province network China Telecom No.31,jingrong street Beijing 100032</span><br><span class=\"line\"></span><br><span class=\"line\">参考数据：116.232.205.0-116.233.89.255 上海市徐汇区 电信</span><br><span class=\"line\">IP数据：116.224.0.0-116.239.255.255 中国 上海 上海</span><br></pre></td></tr></table></figure>\n<h3 id=\"MAC的直连范围\"><a href=\"#MAC的直连范围\" class=\"headerlink\" title=\"MAC的直连范围\"></a>MAC的直连范围</h3><p><a href=\"https://juejin.cn/post/6917139283463634951\">https://juejin.cn/post/6917139283463634951</a>   </p>\n<p>MAC 地址的通信范围比较小，局限在一个子网里面。<br>例如，从 192.168.0.2/24 访问192.168.0.3/24 是可以用 MAC 地址的。<br>一旦跨子网，即从 192.168.0.2/24 到 192.168.1.2/24，MAC地址就不行了，需要 IP 地址起作用了   </p>\n<h3 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h3><p><a href=\"https://juejin.cn/post/6905319321321504775\">https://juejin.cn/post/6905319321321504775</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">包:  相当于发送请求的网络包</span><br><span class=\"line\"></span><br><span class=\"line\">消息:     应用协议中数据的单位</span><br><span class=\"line\">段:      TCP数据流中的信息</span><br><span class=\"line\">片:      IP中数据单位</span><br><span class=\"line\">帧:      数据链路层中包的单位</span><br></pre></td></tr></table></figure>"},{"title":"bash的极简生存手册","date":"2021-01-14T03:56:04.000Z","_content":"\n## 无处不在的\"文件\"\nunix中一切皆文件。\n```shell\npwd   #查看当前目录\nls    #查看当前目录下的文件\ncd    #进入指定目录\n\n/     #根目录\n.     #当前目录简写\n..    #上级目录简写\n\nmkdir #创建目录\ntouch #创建文件\nln    #创建文件链接,\"-s\"可以创建目录链接\nrm    #删除目录或文件\nmv    #移动目录或文件\ncp    #复制目录或文件\n\ntree  #查看目录内的结构,\"-L 2\"控制查看深度\ndu    #查看目录下的各文件目录磁盘占用,\"-d1\"控制查看深度\n\nfind  #搜索目录或文件\ngrep  #搜索文件内容\nwhich #查看命令的位置,命令是执行文件,本质也是文件\nchmod #修改文件权限,\"+x\"变成可执行文件,\"-x\"变成普通文件\n\nvim   #编辑文件内容\ned    #行编辑器\nsed   #流编辑器,它的装机率极高\n```\n文本处理的骚操作\n```shell\nless    #分页输出文件内容\nwc      #统计文件的文本数据\n\nsort    #排序,\"-n\"数字排序\nuniq    #去重\ndiff    #比较\n\ntac     #各行从下到上展示\nrev     #行内从后到前展示\n\necho    {1..5}  #生成水平序列\nseq     1 5     #生成垂直序列\n\ncat     t1 t2   #水平拼接\npaste   t1 t2   #垂直拼接\njoin    t1 t2   #交集拼接\n\nhead    -n 5    #水平截取头部\ntail    -n 5    #水平截取尾部\ncut     -b 3,5  #垂直截取\n```\n## \"输入\"、\"输出\"和\"管道\"\n在shell命令行中首先输入的单词全部被当成\"命令\"来处理,后面的单词被该\"命令\"内的\"$*\"获取。  \n如果该\"命令\"有交互逻辑,\"命令\"内的\"read\"会获取输入的数据。  \n\"命令\"会将产生的数据传给shell,shell通过\"标准输出\"展示到屏幕上。  \n如果\"命令B\"想接着处理\"命令A\"输出的数据,可以用管道来实现 \"A|B\"。  \n\"命令B\"能成功接收数据的前提是因为有交互逻辑，除此以外也可以借助xargs命令来实现。  \n```text\nshell会识别命令后的 \"<\"  字符(通常之后还有一个文件名),将文本中的内容当做和命令交互的\"标准输入\",只需要命令支持交互。\nshell会识别命令后的 \"<<\" 字符(通常之后还有HereDoc),将HereDoc的内容当做和命令交互的\"标准输入\",只需要命令支持交互。\nshell会识别命令后的 \">\"  字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(覆盖文本)。\nshell会识别命令后的 \">>\" 字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(追加文本)。\n```\n大致原型:\n```shell\n\"cmdA\"\n\"cmdA\" < \"fileA\"\n\"cmdA\" > \"fileC\"\n\"cmdA\" < \"fileA\" > \"fileC\"\n\"cmdA\" | \"cmdC\"\n\"cmdA\" | \"cmdC\" > \"fileC\"\n\"cmdA\" < \"fileA\" | \"cmdB\" | \"tee\" \"fileB\" | \"cmdC\" > \"fileC\"\n```\n注意: 不存在 \"cmdA\" < \"fileA\" > \"cmdC\",因为cmd必须在第一位。即 \"fileA\" > \"cmdA\" 是非法格式\n\n测试shell\n```shell\n#!/usr/bin/env bash\n\n# shell脚本 a.sh\necho \"args: \",$*\nwhile read str;do\n  echo \"stdin: \",$str\ndone\n```\n输出结果\n```shell\n./a.sh 111 <<EOF\nheredoc> 222\nheredoc> 333\nheredoc> EOF\nargs: ,111\nstdin: ,222\nstdin: ,333\n\ncat test.txt\nOne\ntwO\nthree\n\n./a.sh 111 < test.txt\nargs: ,111\nstdin: ,One\nstdin: ,twO\nstdin: ,three\n```\n\n## Shell语法\n### 多重宇宙\n```shell\nset     #是独享的\nenv     #是可以遗传给子shell\nexport  #将某个set变量提升为export\n\n. ./a.sh    #本shell执行脚本,\".\"与\"source\"同义,用本shell的环境变量\n$(ls)       #子shell执行一组命令,用子shell的环境变量\n./a.sh      #子shell执行shell脚本,用子shell的环境变量\n```\n### 字符\n`#` 是去掉 左边（键盘上`#`在`$` 的左边）  \n`%` 是去掉 右边（键盘上`%`在`$` 的右边）   \n单一符号是最小匹配; 两个符号是最大匹配\n\n```shell\n% var=000111222\n% echo ${var#*1}\n11222\n% echo ${var##*1}\n222\n% echo ${var%1*}\n00011\n% echo ${var%%1*}\n000\n```\n```shell\n${var:N:N }   #提取变量字符串的一段：\n\n% var=000111222\n% ${var:0:3}  #提取最左边的 3 个字节：000\n${file:3:3}   #提取第 3 个字节右边的连续3个字节：111\n```\n```shell\n${var/a/b}    \n${var//a/b}\n#对变量值里的字符串作替换\n\n${var/1/3}  #将第一个1 替换为3 : 000311222\n${var//1/3} #将全部1 替换为3 : 000333222\n```\n### 数组和循环\n```shell\nfor i in a b c d;do echo $i;done\n\nwhile true;do echo $i;done\n```\n```shell\narr=(1 2)   #创建新数组\narr2=({1..2}) #自动生成数组\narr1=$(ls)  #利用其他命令生成数组\narr+=(3)    #追加元素\narr[0]=666\nunset ${arr[1]} #删除元素\n${arr[@]}   #展开数组给for用\n${!arr[@]}  #只展开它的索引\n${#arr[@]}  #获取长度\n${arr_name[@]:1:2} #切片\nmerge_array=( ${a[@] ${b[@]} ... ) #合并数组\n```\n```shell\n% arr=(1 2 3)\n% for i in ${arr[@]};do echo $i;done\n1\n2\n3\n% arr+=4\n% for i in ${arr[@]};do echo $i;done\n14\n2\n3\n```\n### 判断\n$? 命令正常退出返回0,其他情况返回整数\n\nbash中如何实现条件判断？\n条件测试类型：\n```text\n整数测试\n字符测试\n文件测试\n```\n一、条件测试的表达式：\n```shell\n[ expression ]  #括号两端必须要有空格\n[[ expression ]] #括号两端必须要有空格\ntest expression\n\n#组合测试条件\n-a: #and\n-o: #or\n!:  #非\n```\n二、整数比较：\n```shell\n-eq #测试两个整数是否相等\n-ne #测试两个整数是否不等\n-gt #测试一个数是否大于另一个数\n-lt #测试一个数是否小于另一个数\n-ge #大于或等于\n-le #小于或等于\n```\n```shell\n#命令间的逻辑关系\n&&  #逻辑与\n||  #逻辑或\n```\n三、字符串比较\n字符串比较：\n```shell\n==   #等于  两边要有空格\n!=   #不等\n>    #大于\n<    #小于\n```\n四、文件测试\n```shell\n-z string #测试指定字符是否为空，空着真，非空为假\n-n string #测试指定字符串是否为不空，空为假 非空为真\n-e FILE   #测试文件是否存在\n-f file   #测试文件是否为普通文件\n-d file   #测试指定路径是否为目录\n-r file   #测试文件对当前用户是否可读\n-w file   #测试文件对当前用户是否可写\n-x file   #测试文件对当前用户是都可执行\n-z        #是否为空  为空则为真\n-a        #是否不空\n```\n五、if语法   \nif 判断条件 0为真 其他都为假\n```shell\nif 判断条件;then statement1;else statement2;fi\n```\nNote:\n```shell\n#if语句进行判断是否为空\n[ \"$name” = \"\" ]\n\n#等同于\n[ ! \"$name\" ]\n[ -z \"$name\" ]\n```\nNote:\n```text\n使用if语句的时候进行判断如果是进行数值类的 ，建议使用 let(())进行判断\n对于字符串等使用test[ ] or [[ ]] 进行判断\n(()) 中变量是可以不使用$来引用的\n```\n\n写脚本的时候很多时候需要用到回传命令，$?如果上一个命令执行成功，回传值为0，否则为1~255之间的任何一个\n```text\n0为真\n非0为假\n```\n条件测试的写法：\n```shell\n#  执行一个命令的结果\nif grep -q \"rm\" fs.sh;then\n\n#传回一个命令执行结果的相反值\nif !grep -q \"rm\" fs.sh;then\n\n#使用复合命令（（算式））\nif ((a>b));then\n\n#使用bash关键字 [[判断式]]\nif [[ str > xyz ]];then\n\n#使用内置命令：test 判断式\nif test \"str\" \\> \"xyz\";then\n\n#使用内置命令：[判断式]  类似test\nif [ \"str\" \\> \"xyz\" ];then\n\n#使用-a -o进行逻辑组合\n[ -r filename -a -x filename ]\n\n#命令&&命令\nif grep -q \"rm\" fn.sh && [ $a -lt 100 ];then\n\n#命令||命令\nif grep -q \"rm\" fn.sh || [ $a -lt 100 ];then\n```\n## 文字处理工具\n### grep 全文查找  \n```shell\n-e #更强的扩展\n-i #忽略大小写\n-v #取反\n```\n### sed 流编辑，行处理 \nlinux系统默认都是`GUN sed`,但MacOS自带的是UNIX原版的`sed`,这两个会有差异,最大不同在于`-i`选项   \nMacOS下直接下载`gsed`使用。`brew install gnu-sed`\n```shell\n-i #更新源文件\n-n #参数后只显示处理过的行\n\nsed -i 's/1/2/g' a.txt\n\ns #替换指定字符\na #在当前行下面插入文本。\ni #在当前行上面插入文本。\nc #把选定的行改为新的文本。\nd #删除，删除选择的行。\nr #将一个独立文件的数据插入到当前数据流的指定位置。 sed '3r from.txt' to.txt\nw #命令用来将文本中指定行的内容写入文件中。 sed '1,2w to.txt' from.txt\n```\n### awk 处理字段,全面的文本处理  \n```shell\nawk 'BEGIN{ FS = \",\" }{print $2,$1,$3}' a.txt\n```\n```awk\nFS  #字段分隔符\nOFS #字段输出分隔符\nRS  #行分隔符\nORS #行输出分隔符\n```\n### 其他工具\n```shell\ncut #字符切片\ntr  #字符替换\n```\n","source":"_posts/bash的极简生存手册.md","raw":"---\ntitle: 'bash的极简生存手册'\ndate: 2021-01-14 11:56:04\ntags: [bash,linux]\n---\n\n## 无处不在的\"文件\"\nunix中一切皆文件。\n```shell\npwd   #查看当前目录\nls    #查看当前目录下的文件\ncd    #进入指定目录\n\n/     #根目录\n.     #当前目录简写\n..    #上级目录简写\n\nmkdir #创建目录\ntouch #创建文件\nln    #创建文件链接,\"-s\"可以创建目录链接\nrm    #删除目录或文件\nmv    #移动目录或文件\ncp    #复制目录或文件\n\ntree  #查看目录内的结构,\"-L 2\"控制查看深度\ndu    #查看目录下的各文件目录磁盘占用,\"-d1\"控制查看深度\n\nfind  #搜索目录或文件\ngrep  #搜索文件内容\nwhich #查看命令的位置,命令是执行文件,本质也是文件\nchmod #修改文件权限,\"+x\"变成可执行文件,\"-x\"变成普通文件\n\nvim   #编辑文件内容\ned    #行编辑器\nsed   #流编辑器,它的装机率极高\n```\n文本处理的骚操作\n```shell\nless    #分页输出文件内容\nwc      #统计文件的文本数据\n\nsort    #排序,\"-n\"数字排序\nuniq    #去重\ndiff    #比较\n\ntac     #各行从下到上展示\nrev     #行内从后到前展示\n\necho    {1..5}  #生成水平序列\nseq     1 5     #生成垂直序列\n\ncat     t1 t2   #水平拼接\npaste   t1 t2   #垂直拼接\njoin    t1 t2   #交集拼接\n\nhead    -n 5    #水平截取头部\ntail    -n 5    #水平截取尾部\ncut     -b 3,5  #垂直截取\n```\n## \"输入\"、\"输出\"和\"管道\"\n在shell命令行中首先输入的单词全部被当成\"命令\"来处理,后面的单词被该\"命令\"内的\"$*\"获取。  \n如果该\"命令\"有交互逻辑,\"命令\"内的\"read\"会获取输入的数据。  \n\"命令\"会将产生的数据传给shell,shell通过\"标准输出\"展示到屏幕上。  \n如果\"命令B\"想接着处理\"命令A\"输出的数据,可以用管道来实现 \"A|B\"。  \n\"命令B\"能成功接收数据的前提是因为有交互逻辑，除此以外也可以借助xargs命令来实现。  \n```text\nshell会识别命令后的 \"<\"  字符(通常之后还有一个文件名),将文本中的内容当做和命令交互的\"标准输入\",只需要命令支持交互。\nshell会识别命令后的 \"<<\" 字符(通常之后还有HereDoc),将HereDoc的内容当做和命令交互的\"标准输入\",只需要命令支持交互。\nshell会识别命令后的 \">\"  字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(覆盖文本)。\nshell会识别命令后的 \">>\" 字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(追加文本)。\n```\n大致原型:\n```shell\n\"cmdA\"\n\"cmdA\" < \"fileA\"\n\"cmdA\" > \"fileC\"\n\"cmdA\" < \"fileA\" > \"fileC\"\n\"cmdA\" | \"cmdC\"\n\"cmdA\" | \"cmdC\" > \"fileC\"\n\"cmdA\" < \"fileA\" | \"cmdB\" | \"tee\" \"fileB\" | \"cmdC\" > \"fileC\"\n```\n注意: 不存在 \"cmdA\" < \"fileA\" > \"cmdC\",因为cmd必须在第一位。即 \"fileA\" > \"cmdA\" 是非法格式\n\n测试shell\n```shell\n#!/usr/bin/env bash\n\n# shell脚本 a.sh\necho \"args: \",$*\nwhile read str;do\n  echo \"stdin: \",$str\ndone\n```\n输出结果\n```shell\n./a.sh 111 <<EOF\nheredoc> 222\nheredoc> 333\nheredoc> EOF\nargs: ,111\nstdin: ,222\nstdin: ,333\n\ncat test.txt\nOne\ntwO\nthree\n\n./a.sh 111 < test.txt\nargs: ,111\nstdin: ,One\nstdin: ,twO\nstdin: ,three\n```\n\n## Shell语法\n### 多重宇宙\n```shell\nset     #是独享的\nenv     #是可以遗传给子shell\nexport  #将某个set变量提升为export\n\n. ./a.sh    #本shell执行脚本,\".\"与\"source\"同义,用本shell的环境变量\n$(ls)       #子shell执行一组命令,用子shell的环境变量\n./a.sh      #子shell执行shell脚本,用子shell的环境变量\n```\n### 字符\n`#` 是去掉 左边（键盘上`#`在`$` 的左边）  \n`%` 是去掉 右边（键盘上`%`在`$` 的右边）   \n单一符号是最小匹配; 两个符号是最大匹配\n\n```shell\n% var=000111222\n% echo ${var#*1}\n11222\n% echo ${var##*1}\n222\n% echo ${var%1*}\n00011\n% echo ${var%%1*}\n000\n```\n```shell\n${var:N:N }   #提取变量字符串的一段：\n\n% var=000111222\n% ${var:0:3}  #提取最左边的 3 个字节：000\n${file:3:3}   #提取第 3 个字节右边的连续3个字节：111\n```\n```shell\n${var/a/b}    \n${var//a/b}\n#对变量值里的字符串作替换\n\n${var/1/3}  #将第一个1 替换为3 : 000311222\n${var//1/3} #将全部1 替换为3 : 000333222\n```\n### 数组和循环\n```shell\nfor i in a b c d;do echo $i;done\n\nwhile true;do echo $i;done\n```\n```shell\narr=(1 2)   #创建新数组\narr2=({1..2}) #自动生成数组\narr1=$(ls)  #利用其他命令生成数组\narr+=(3)    #追加元素\narr[0]=666\nunset ${arr[1]} #删除元素\n${arr[@]}   #展开数组给for用\n${!arr[@]}  #只展开它的索引\n${#arr[@]}  #获取长度\n${arr_name[@]:1:2} #切片\nmerge_array=( ${a[@] ${b[@]} ... ) #合并数组\n```\n```shell\n% arr=(1 2 3)\n% for i in ${arr[@]};do echo $i;done\n1\n2\n3\n% arr+=4\n% for i in ${arr[@]};do echo $i;done\n14\n2\n3\n```\n### 判断\n$? 命令正常退出返回0,其他情况返回整数\n\nbash中如何实现条件判断？\n条件测试类型：\n```text\n整数测试\n字符测试\n文件测试\n```\n一、条件测试的表达式：\n```shell\n[ expression ]  #括号两端必须要有空格\n[[ expression ]] #括号两端必须要有空格\ntest expression\n\n#组合测试条件\n-a: #and\n-o: #or\n!:  #非\n```\n二、整数比较：\n```shell\n-eq #测试两个整数是否相等\n-ne #测试两个整数是否不等\n-gt #测试一个数是否大于另一个数\n-lt #测试一个数是否小于另一个数\n-ge #大于或等于\n-le #小于或等于\n```\n```shell\n#命令间的逻辑关系\n&&  #逻辑与\n||  #逻辑或\n```\n三、字符串比较\n字符串比较：\n```shell\n==   #等于  两边要有空格\n!=   #不等\n>    #大于\n<    #小于\n```\n四、文件测试\n```shell\n-z string #测试指定字符是否为空，空着真，非空为假\n-n string #测试指定字符串是否为不空，空为假 非空为真\n-e FILE   #测试文件是否存在\n-f file   #测试文件是否为普通文件\n-d file   #测试指定路径是否为目录\n-r file   #测试文件对当前用户是否可读\n-w file   #测试文件对当前用户是否可写\n-x file   #测试文件对当前用户是都可执行\n-z        #是否为空  为空则为真\n-a        #是否不空\n```\n五、if语法   \nif 判断条件 0为真 其他都为假\n```shell\nif 判断条件;then statement1;else statement2;fi\n```\nNote:\n```shell\n#if语句进行判断是否为空\n[ \"$name” = \"\" ]\n\n#等同于\n[ ! \"$name\" ]\n[ -z \"$name\" ]\n```\nNote:\n```text\n使用if语句的时候进行判断如果是进行数值类的 ，建议使用 let(())进行判断\n对于字符串等使用test[ ] or [[ ]] 进行判断\n(()) 中变量是可以不使用$来引用的\n```\n\n写脚本的时候很多时候需要用到回传命令，$?如果上一个命令执行成功，回传值为0，否则为1~255之间的任何一个\n```text\n0为真\n非0为假\n```\n条件测试的写法：\n```shell\n#  执行一个命令的结果\nif grep -q \"rm\" fs.sh;then\n\n#传回一个命令执行结果的相反值\nif !grep -q \"rm\" fs.sh;then\n\n#使用复合命令（（算式））\nif ((a>b));then\n\n#使用bash关键字 [[判断式]]\nif [[ str > xyz ]];then\n\n#使用内置命令：test 判断式\nif test \"str\" \\> \"xyz\";then\n\n#使用内置命令：[判断式]  类似test\nif [ \"str\" \\> \"xyz\" ];then\n\n#使用-a -o进行逻辑组合\n[ -r filename -a -x filename ]\n\n#命令&&命令\nif grep -q \"rm\" fn.sh && [ $a -lt 100 ];then\n\n#命令||命令\nif grep -q \"rm\" fn.sh || [ $a -lt 100 ];then\n```\n## 文字处理工具\n### grep 全文查找  \n```shell\n-e #更强的扩展\n-i #忽略大小写\n-v #取反\n```\n### sed 流编辑，行处理 \nlinux系统默认都是`GUN sed`,但MacOS自带的是UNIX原版的`sed`,这两个会有差异,最大不同在于`-i`选项   \nMacOS下直接下载`gsed`使用。`brew install gnu-sed`\n```shell\n-i #更新源文件\n-n #参数后只显示处理过的行\n\nsed -i 's/1/2/g' a.txt\n\ns #替换指定字符\na #在当前行下面插入文本。\ni #在当前行上面插入文本。\nc #把选定的行改为新的文本。\nd #删除，删除选择的行。\nr #将一个独立文件的数据插入到当前数据流的指定位置。 sed '3r from.txt' to.txt\nw #命令用来将文本中指定行的内容写入文件中。 sed '1,2w to.txt' from.txt\n```\n### awk 处理字段,全面的文本处理  \n```shell\nawk 'BEGIN{ FS = \",\" }{print $2,$1,$3}' a.txt\n```\n```awk\nFS  #字段分隔符\nOFS #字段输出分隔符\nRS  #行分隔符\nORS #行输出分隔符\n```\n### 其他工具\n```shell\ncut #字符切片\ntr  #字符替换\n```\n","slug":"bash的极简生存手册","published":1,"updated":"2021-02-20T03:22:14.964Z","_id":"ckkngs2an0000kso88im34grg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"无处不在的”文件”\"><a href=\"#无处不在的”文件”\" class=\"headerlink\" title=\"无处不在的”文件”\"></a>无处不在的”文件”</h2><p>unix中一切皆文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd   #查看当前目录</span><br><span class=\"line\">ls    #查看当前目录下的文件</span><br><span class=\"line\">cd    #进入指定目录</span><br><span class=\"line\"></span><br><span class=\"line\">/     #根目录</span><br><span class=\"line\">.     #当前目录简写</span><br><span class=\"line\">..    #上级目录简写</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir #创建目录</span><br><span class=\"line\">touch #创建文件</span><br><span class=\"line\">ln    #创建文件链接,&quot;-s&quot;可以创建目录链接</span><br><span class=\"line\">rm    #删除目录或文件</span><br><span class=\"line\">mv    #移动目录或文件</span><br><span class=\"line\">cp    #复制目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">tree  #查看目录内的结构,&quot;-L 2&quot;控制查看深度</span><br><span class=\"line\">du    #查看目录下的各文件目录磁盘占用,&quot;-d1&quot;控制查看深度</span><br><span class=\"line\"></span><br><span class=\"line\">find  #搜索目录或文件</span><br><span class=\"line\">grep  #搜索文件内容</span><br><span class=\"line\">which #查看命令的位置,命令是执行文件,本质也是文件</span><br><span class=\"line\">chmod #修改文件权限,&quot;+x&quot;变成可执行文件,&quot;-x&quot;变成普通文件</span><br><span class=\"line\"></span><br><span class=\"line\">vim   #编辑文件内容</span><br><span class=\"line\">ed    #行编辑器</span><br><span class=\"line\">sed   #流编辑器,它的装机率极高</span><br></pre></td></tr></table></figure>\n<p>文本处理的骚操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less    #分页输出文件内容</span><br><span class=\"line\">wc      #统计文件的文本数据</span><br><span class=\"line\"></span><br><span class=\"line\">sort    #排序,&quot;-n&quot;数字排序</span><br><span class=\"line\">uniq    #去重</span><br><span class=\"line\">diff    #比较</span><br><span class=\"line\"></span><br><span class=\"line\">tac     #各行从下到上展示</span><br><span class=\"line\">rev     #行内从后到前展示</span><br><span class=\"line\"></span><br><span class=\"line\">echo    &#123;1..5&#125;  #生成水平序列</span><br><span class=\"line\">seq     1 5     #生成垂直序列</span><br><span class=\"line\"></span><br><span class=\"line\">cat     t1 t2   #水平拼接</span><br><span class=\"line\">paste   t1 t2   #垂直拼接</span><br><span class=\"line\">join    t1 t2   #交集拼接</span><br><span class=\"line\"></span><br><span class=\"line\">head    -n 5    #水平截取头部</span><br><span class=\"line\">tail    -n 5    #水平截取尾部</span><br><span class=\"line\">cut     -b 3,5  #垂直截取</span><br></pre></td></tr></table></figure>\n<h2 id=\"“输入”、”输出”和”管道”\"><a href=\"#“输入”、”输出”和”管道”\" class=\"headerlink\" title=\"“输入”、”输出”和”管道”\"></a>“输入”、”输出”和”管道”</h2><p>在shell命令行中首先输入的单词全部被当成”命令”来处理,后面的单词被该”命令”内的”$*”获取。<br>如果该”命令”有交互逻辑,”命令”内的”read”会获取输入的数据。<br>“命令”会将产生的数据传给shell,shell通过”标准输出”展示到屏幕上。<br>如果”命令B”想接着处理”命令A”输出的数据,可以用管道来实现 “A|B”。<br>“命令B”能成功接收数据的前提是因为有交互逻辑，除此以外也可以借助xargs命令来实现。  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell会识别命令后的 &quot;&lt;&quot;  字符(通常之后还有一个文件名),将文本中的内容当做和命令交互的&quot;标准输入&quot;,只需要命令支持交互。</span><br><span class=\"line\">shell会识别命令后的 &quot;&lt;&lt;&quot; 字符(通常之后还有HereDoc),将HereDoc的内容当做和命令交互的&quot;标准输入&quot;,只需要命令支持交互。</span><br><span class=\"line\">shell会识别命令后的 &quot;&gt;&quot;  字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(覆盖文本)。</span><br><span class=\"line\">shell会识别命令后的 &quot;&gt;&gt;&quot; 字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(追加文本)。</span><br></pre></td></tr></table></figure>\n<p>大致原型:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;cmdA&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; | &quot;cmdC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; | &quot;cmdC&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot; | &quot;cmdB&quot; | &quot;tee&quot; &quot;fileB&quot; | &quot;cmdC&quot; &gt; &quot;fileC&quot;</span><br></pre></td></tr></table></figure>\n<p>注意: 不存在 “cmdA” &lt; “fileA” &gt; “cmdC”,因为cmd必须在第一位。即 “fileA” &gt; “cmdA” 是非法格式</p>\n<p>测试shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> shell脚本 a.sh</span></span><br><span class=\"line\">echo &quot;args: &quot;,$*</span><br><span class=\"line\">while read str;do</span><br><span class=\"line\">  echo &quot;stdin: &quot;,$str</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./a.sh 111 &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> 222</span></span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> 333</span></span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> EOF</span></span><br><span class=\"line\">args: ,111</span><br><span class=\"line\">stdin: ,222</span><br><span class=\"line\">stdin: ,333</span><br><span class=\"line\"></span><br><span class=\"line\">cat test.txt</span><br><span class=\"line\">One</span><br><span class=\"line\">twO</span><br><span class=\"line\">three</span><br><span class=\"line\"></span><br><span class=\"line\">./a.sh 111 &lt; test.txt</span><br><span class=\"line\">args: ,111</span><br><span class=\"line\">stdin: ,One</span><br><span class=\"line\">stdin: ,twO</span><br><span class=\"line\">stdin: ,three</span><br></pre></td></tr></table></figure>\n<h2 id=\"Shell语法\"><a href=\"#Shell语法\" class=\"headerlink\" title=\"Shell语法\"></a>Shell语法</h2><h3 id=\"多重宇宙\"><a href=\"#多重宇宙\" class=\"headerlink\" title=\"多重宇宙\"></a>多重宇宙</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set     #是独享的</span><br><span class=\"line\">env     #是可以遗传给子shell</span><br><span class=\"line\">export  #将某个set变量提升为export</span><br><span class=\"line\"></span><br><span class=\"line\">. ./a.sh    #本shell执行脚本,&quot;.&quot;与&quot;source&quot;同义,用本shell的环境变量</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">(ls)       <span class=\"comment\">#子shell执行一组命令,用子shell的环境变量</span></span></span><br><span class=\"line\">./a.sh      #子shell执行shell脚本,用子shell的环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h3><p><code>#</code> 是去掉 左边（键盘上<code>#</code>在<code>$</code> 的左边）<br><code>%</code> 是去掉 右边（键盘上<code>%</code>在<code>$</code> 的右边）<br>单一符号是最小匹配; 两个符号是最大匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> var=000111222</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var#*1&#125;</span></span></span><br><span class=\"line\">11222</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var##*1&#125;</span></span></span><br><span class=\"line\">222</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var%1*&#125;</span></span></span><br><span class=\"line\">00011</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var%%1*&#125;</span></span></span><br><span class=\"line\">000</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var:N:N &#125;   <span class=\"comment\">#提取变量字符串的一段：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> var=000111222</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"variable\">$&#123;var:0:3&#125;</span>  <span class=\"comment\">#提取最左边的 3 个字节：000</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file:3:3&#125;   <span class=\"comment\">#提取第 3 个字节右边的连续3个字节：111</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var/a/b&#125;</span>    </span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var//a/b&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对变量值里的字符串作替换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var/1/3&#125;  <span class=\"comment\">#将第一个1 替换为3 : 000311222</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var//1/3&#125; <span class=\"comment\">#将全部1 替换为3 : 000333222</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组和循环\"><a href=\"#数组和循环\" class=\"headerlink\" title=\"数组和循环\"></a>数组和循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in a b c d;do echo $i;done</span><br><span class=\"line\"></span><br><span class=\"line\">while true;do echo $i;done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2)   #创建新数组</span><br><span class=\"line\">arr2=(&#123;1..2&#125;) #自动生成数组</span><br><span class=\"line\">arr1=$(ls)  #利用其他命令生成数组</span><br><span class=\"line\">arr+=(3)    #追加元素</span><br><span class=\"line\">arr[0]=666</span><br><span class=\"line\">unset $&#123;arr[1]&#125; #删除元素</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;arr[@]&#125;   <span class=\"comment\">#展开数组给for用</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;!arr[@]&#125;  <span class=\"comment\">#只展开它的索引</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;<span class=\"comment\">#arr[@]&#125;  #获取长度</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;arr_name[@]:1:2&#125; <span class=\"comment\">#切片</span></span></span><br><span class=\"line\">merge_array=( $&#123;a[@] $&#123;b[@]&#125; ... ) #合并数组</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> arr=(1 2 3)</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[@]&#125;</span>;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>;<span class=\"keyword\">done</span></span></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> arr+=4</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[@]&#125;</span>;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>;<span class=\"keyword\">done</span></span></span><br><span class=\"line\">14</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h3><p>$? 命令正常退出返回0,其他情况返回整数</p>\n<p>bash中如何实现条件判断？<br>条件测试类型：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数测试</span><br><span class=\"line\">字符测试</span><br><span class=\"line\">文件测试</span><br></pre></td></tr></table></figure>\n<p>一、条件测试的表达式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression ]  #括号两端必须要有空格</span><br><span class=\"line\">[[ expression ]] #括号两端必须要有空格</span><br><span class=\"line\">test expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">组合测试条件</span></span><br><span class=\"line\">-a: #and</span><br><span class=\"line\">-o: #or</span><br><span class=\"line\">!:  #非</span><br></pre></td></tr></table></figure>\n<p>二、整数比较：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq #测试两个整数是否相等</span><br><span class=\"line\">-ne #测试两个整数是否不等</span><br><span class=\"line\">-gt #测试一个数是否大于另一个数</span><br><span class=\"line\">-lt #测试一个数是否小于另一个数</span><br><span class=\"line\">-ge #大于或等于</span><br><span class=\"line\">-le #小于或等于</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令间的逻辑关系</span></span><br><span class=\"line\">&amp;&amp;  #逻辑与</span><br><span class=\"line\">||  #逻辑或</span><br></pre></td></tr></table></figure>\n<p>三、字符串比较<br>字符串比较：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==   #等于  两边要有空格</span><br><span class=\"line\">!=   #不等</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">    <span class=\"comment\">#大于</span></span></span><br><span class=\"line\">&lt;    #小于</span><br></pre></td></tr></table></figure>\n<p>四、文件测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-z string #测试指定字符是否为空，空着真，非空为假</span><br><span class=\"line\">-n string #测试指定字符串是否为不空，空为假 非空为真</span><br><span class=\"line\">-e FILE   #测试文件是否存在</span><br><span class=\"line\">-f file   #测试文件是否为普通文件</span><br><span class=\"line\">-d file   #测试指定路径是否为目录</span><br><span class=\"line\">-r file   #测试文件对当前用户是否可读</span><br><span class=\"line\">-w file   #测试文件对当前用户是否可写</span><br><span class=\"line\">-x file   #测试文件对当前用户是都可执行</span><br><span class=\"line\">-z        #是否为空  为空则为真</span><br><span class=\"line\">-a        #是否不空</span><br></pre></td></tr></table></figure>\n<p>五、if语法<br>if 判断条件 0为真 其他都为假</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件;then statement1;else statement2;fi</span><br></pre></td></tr></table></figure>\n<p>Note:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span>语句进行判断是否为空</span></span><br><span class=\"line\">[ &quot;$name” = &quot;&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">等同于</span></span><br><span class=\"line\">[ ! &quot;$name&quot; ]</span><br><span class=\"line\">[ -z &quot;$name&quot; ]</span><br></pre></td></tr></table></figure>\n<p>Note:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用if语句的时候进行判断如果是进行数值类的 ，建议使用 let(())进行判断</span><br><span class=\"line\">对于字符串等使用test[ ] or [[ ]] 进行判断</span><br><span class=\"line\">(()) 中变量是可以不使用$来引用的</span><br></pre></td></tr></table></figure>\n<p>写脚本的时候很多时候需要用到回传命令，$?如果上一个命令执行成功，回传值为0，否则为1~255之间的任何一个</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0为真</span><br><span class=\"line\">非0为假</span><br></pre></td></tr></table></figure>\n<p>条件测试的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  执行一个命令的结果</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fs.sh;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">传回一个命令执行结果的相反值</span></span><br><span class=\"line\">if !grep -q &quot;rm&quot; fs.sh;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用复合命令（（算式））</span></span><br><span class=\"line\">if ((a&gt;b));then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用bash关键字 [[判断式]]</span></span><br><span class=\"line\">if [[ str &gt; xyz ]];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用内置命令：<span class=\"built_in\">test</span> 判断式</span></span><br><span class=\"line\">if test &quot;str&quot; \\&gt; &quot;xyz&quot;;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用内置命令：[判断式]  类似<span class=\"built_in\">test</span></span></span><br><span class=\"line\">if [ &quot;str&quot; \\&gt; &quot;xyz&quot; ];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-a -o进行逻辑组合</span></span><br><span class=\"line\">[ -r filename -a -x filename ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令&amp;&amp;命令</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fn.sh &amp;&amp; [ $a -lt 100 ];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令||命令</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fn.sh || [ $a -lt 100 ];then</span><br></pre></td></tr></table></figure>\n<h2 id=\"文字处理工具\"><a href=\"#文字处理工具\" class=\"headerlink\" title=\"文字处理工具\"></a>文字处理工具</h2><h3 id=\"grep-全文查找\"><a href=\"#grep-全文查找\" class=\"headerlink\" title=\"grep 全文查找\"></a>grep 全文查找</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e #更强的扩展</span><br><span class=\"line\">-i #忽略大小写</span><br><span class=\"line\">-v #取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"sed-流编辑，行处理\"><a href=\"#sed-流编辑，行处理\" class=\"headerlink\" title=\"sed 流编辑，行处理\"></a>sed 流编辑，行处理</h3><p>linux系统默认都是<code>GUN sed</code>,但MacOS自带的是UNIX原版的<code>sed</code>,这两个会有差异,最大不同在于<code>-i</code>选项<br>MacOS下直接下载<code>gsed</code>使用。<code>brew install gnu-sed</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-i #更新源文件</span><br><span class=\"line\">-n #参数后只显示处理过的行</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/1/2/g&#x27; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">s #替换指定字符</span><br><span class=\"line\">a #在当前行下面插入文本。</span><br><span class=\"line\">i #在当前行上面插入文本。</span><br><span class=\"line\">c #把选定的行改为新的文本。</span><br><span class=\"line\">d #删除，删除选择的行。</span><br><span class=\"line\">r #将一个独立文件的数据插入到当前数据流的指定位置。 sed &#x27;3r from.txt&#x27; to.txt</span><br><span class=\"line\">w #命令用来将文本中指定行的内容写入文件中。 sed &#x27;1,2w to.txt&#x27; from.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"awk-处理字段-全面的文本处理\"><a href=\"#awk-处理字段-全面的文本处理\" class=\"headerlink\" title=\"awk 处理字段,全面的文本处理\"></a>awk 处理字段,全面的文本处理</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;BEGIN&#123; FS = &quot;,&quot; &#125;&#123;print $2,$1,$3&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FS  <span class=\"comment\">#字段分隔符</span></span><br><span class=\"line\">OFS <span class=\"comment\">#字段输出分隔符</span></span><br><span class=\"line\">RS  <span class=\"comment\">#行分隔符</span></span><br><span class=\"line\">ORS <span class=\"comment\">#行输出分隔符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut #字符切片</span><br><span class=\"line\">tr  #字符替换</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"无处不在的”文件”\"><a href=\"#无处不在的”文件”\" class=\"headerlink\" title=\"无处不在的”文件”\"></a>无处不在的”文件”</h2><p>unix中一切皆文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd   #查看当前目录</span><br><span class=\"line\">ls    #查看当前目录下的文件</span><br><span class=\"line\">cd    #进入指定目录</span><br><span class=\"line\"></span><br><span class=\"line\">/     #根目录</span><br><span class=\"line\">.     #当前目录简写</span><br><span class=\"line\">..    #上级目录简写</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir #创建目录</span><br><span class=\"line\">touch #创建文件</span><br><span class=\"line\">ln    #创建文件链接,&quot;-s&quot;可以创建目录链接</span><br><span class=\"line\">rm    #删除目录或文件</span><br><span class=\"line\">mv    #移动目录或文件</span><br><span class=\"line\">cp    #复制目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">tree  #查看目录内的结构,&quot;-L 2&quot;控制查看深度</span><br><span class=\"line\">du    #查看目录下的各文件目录磁盘占用,&quot;-d1&quot;控制查看深度</span><br><span class=\"line\"></span><br><span class=\"line\">find  #搜索目录或文件</span><br><span class=\"line\">grep  #搜索文件内容</span><br><span class=\"line\">which #查看命令的位置,命令是执行文件,本质也是文件</span><br><span class=\"line\">chmod #修改文件权限,&quot;+x&quot;变成可执行文件,&quot;-x&quot;变成普通文件</span><br><span class=\"line\"></span><br><span class=\"line\">vim   #编辑文件内容</span><br><span class=\"line\">ed    #行编辑器</span><br><span class=\"line\">sed   #流编辑器,它的装机率极高</span><br></pre></td></tr></table></figure>\n<p>文本处理的骚操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">less    #分页输出文件内容</span><br><span class=\"line\">wc      #统计文件的文本数据</span><br><span class=\"line\"></span><br><span class=\"line\">sort    #排序,&quot;-n&quot;数字排序</span><br><span class=\"line\">uniq    #去重</span><br><span class=\"line\">diff    #比较</span><br><span class=\"line\"></span><br><span class=\"line\">tac     #各行从下到上展示</span><br><span class=\"line\">rev     #行内从后到前展示</span><br><span class=\"line\"></span><br><span class=\"line\">echo    &#123;1..5&#125;  #生成水平序列</span><br><span class=\"line\">seq     1 5     #生成垂直序列</span><br><span class=\"line\"></span><br><span class=\"line\">cat     t1 t2   #水平拼接</span><br><span class=\"line\">paste   t1 t2   #垂直拼接</span><br><span class=\"line\">join    t1 t2   #交集拼接</span><br><span class=\"line\"></span><br><span class=\"line\">head    -n 5    #水平截取头部</span><br><span class=\"line\">tail    -n 5    #水平截取尾部</span><br><span class=\"line\">cut     -b 3,5  #垂直截取</span><br></pre></td></tr></table></figure>\n<h2 id=\"“输入”、”输出”和”管道”\"><a href=\"#“输入”、”输出”和”管道”\" class=\"headerlink\" title=\"“输入”、”输出”和”管道”\"></a>“输入”、”输出”和”管道”</h2><p>在shell命令行中首先输入的单词全部被当成”命令”来处理,后面的单词被该”命令”内的”$*”获取。<br>如果该”命令”有交互逻辑,”命令”内的”read”会获取输入的数据。<br>“命令”会将产生的数据传给shell,shell通过”标准输出”展示到屏幕上。<br>如果”命令B”想接着处理”命令A”输出的数据,可以用管道来实现 “A|B”。<br>“命令B”能成功接收数据的前提是因为有交互逻辑，除此以外也可以借助xargs命令来实现。  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell会识别命令后的 &quot;&lt;&quot;  字符(通常之后还有一个文件名),将文本中的内容当做和命令交互的&quot;标准输入&quot;,只需要命令支持交互。</span><br><span class=\"line\">shell会识别命令后的 &quot;&lt;&lt;&quot; 字符(通常之后还有HereDoc),将HereDoc的内容当做和命令交互的&quot;标准输入&quot;,只需要命令支持交互。</span><br><span class=\"line\">shell会识别命令后的 &quot;&gt;&quot;  字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(覆盖文本)。</span><br><span class=\"line\">shell会识别命令后的 &quot;&gt;&gt;&quot; 字符(通常之后还有一个文件名),将原本输出到屏幕上的数据重定向到文本中(追加文本)。</span><br></pre></td></tr></table></figure>\n<p>大致原型:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;cmdA&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; | &quot;cmdC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; | &quot;cmdC&quot; &gt; &quot;fileC&quot;</span><br><span class=\"line\">&quot;cmdA&quot; &lt; &quot;fileA&quot; | &quot;cmdB&quot; | &quot;tee&quot; &quot;fileB&quot; | &quot;cmdC&quot; &gt; &quot;fileC&quot;</span><br></pre></td></tr></table></figure>\n<p>注意: 不存在 “cmdA” &lt; “fileA” &gt; “cmdC”,因为cmd必须在第一位。即 “fileA” &gt; “cmdA” 是非法格式</p>\n<p>测试shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> shell脚本 a.sh</span></span><br><span class=\"line\">echo &quot;args: &quot;,$*</span><br><span class=\"line\">while read str;do</span><br><span class=\"line\">  echo &quot;stdin: &quot;,$str</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./a.sh 111 &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> 222</span></span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> 333</span></span><br><span class=\"line\"><span class=\"meta\">heredoc&gt;</span><span class=\"bash\"> EOF</span></span><br><span class=\"line\">args: ,111</span><br><span class=\"line\">stdin: ,222</span><br><span class=\"line\">stdin: ,333</span><br><span class=\"line\"></span><br><span class=\"line\">cat test.txt</span><br><span class=\"line\">One</span><br><span class=\"line\">twO</span><br><span class=\"line\">three</span><br><span class=\"line\"></span><br><span class=\"line\">./a.sh 111 &lt; test.txt</span><br><span class=\"line\">args: ,111</span><br><span class=\"line\">stdin: ,One</span><br><span class=\"line\">stdin: ,twO</span><br><span class=\"line\">stdin: ,three</span><br></pre></td></tr></table></figure>\n<h2 id=\"Shell语法\"><a href=\"#Shell语法\" class=\"headerlink\" title=\"Shell语法\"></a>Shell语法</h2><h3 id=\"多重宇宙\"><a href=\"#多重宇宙\" class=\"headerlink\" title=\"多重宇宙\"></a>多重宇宙</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set     #是独享的</span><br><span class=\"line\">env     #是可以遗传给子shell</span><br><span class=\"line\">export  #将某个set变量提升为export</span><br><span class=\"line\"></span><br><span class=\"line\">. ./a.sh    #本shell执行脚本,&quot;.&quot;与&quot;source&quot;同义,用本shell的环境变量</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">(ls)       <span class=\"comment\">#子shell执行一组命令,用子shell的环境变量</span></span></span><br><span class=\"line\">./a.sh      #子shell执行shell脚本,用子shell的环境变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h3><p><code>#</code> 是去掉 左边（键盘上<code>#</code>在<code>$</code> 的左边）<br><code>%</code> 是去掉 右边（键盘上<code>%</code>在<code>$</code> 的右边）<br>单一符号是最小匹配; 两个符号是最大匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> var=000111222</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var#*1&#125;</span></span></span><br><span class=\"line\">11222</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var##*1&#125;</span></span></span><br><span class=\"line\">222</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var%1*&#125;</span></span></span><br><span class=\"line\">00011</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;var%%1*&#125;</span></span></span><br><span class=\"line\">000</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var:N:N &#125;   <span class=\"comment\">#提取变量字符串的一段：</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> var=000111222</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"variable\">$&#123;var:0:3&#125;</span>  <span class=\"comment\">#提取最左边的 3 个字节：000</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file:3:3&#125;   <span class=\"comment\">#提取第 3 个字节右边的连续3个字节：111</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var/a/b&#125;</span>    </span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var//a/b&#125;</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">对变量值里的字符串作替换</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var/1/3&#125;  <span class=\"comment\">#将第一个1 替换为3 : 000311222</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;var//1/3&#125; <span class=\"comment\">#将全部1 替换为3 : 000333222</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组和循环\"><a href=\"#数组和循环\" class=\"headerlink\" title=\"数组和循环\"></a>数组和循环</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in a b c d;do echo $i;done</span><br><span class=\"line\"></span><br><span class=\"line\">while true;do echo $i;done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2)   #创建新数组</span><br><span class=\"line\">arr2=(&#123;1..2&#125;) #自动生成数组</span><br><span class=\"line\">arr1=$(ls)  #利用其他命令生成数组</span><br><span class=\"line\">arr+=(3)    #追加元素</span><br><span class=\"line\">arr[0]=666</span><br><span class=\"line\">unset $&#123;arr[1]&#125; #删除元素</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;arr[@]&#125;   <span class=\"comment\">#展开数组给for用</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;!arr[@]&#125;  <span class=\"comment\">#只展开它的索引</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;<span class=\"comment\">#arr[@]&#125;  #获取长度</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;arr_name[@]:1:2&#125; <span class=\"comment\">#切片</span></span></span><br><span class=\"line\">merge_array=( $&#123;a[@] $&#123;b[@]&#125; ... ) #合并数组</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> arr=(1 2 3)</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[@]&#125;</span>;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>;<span class=\"keyword\">done</span></span></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> arr+=4</span></span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[@]&#125;</span>;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>;<span class=\"keyword\">done</span></span></span><br><span class=\"line\">14</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h3><p>$? 命令正常退出返回0,其他情况返回整数</p>\n<p>bash中如何实现条件判断？<br>条件测试类型：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数测试</span><br><span class=\"line\">字符测试</span><br><span class=\"line\">文件测试</span><br></pre></td></tr></table></figure>\n<p>一、条件测试的表达式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression ]  #括号两端必须要有空格</span><br><span class=\"line\">[[ expression ]] #括号两端必须要有空格</span><br><span class=\"line\">test expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">组合测试条件</span></span><br><span class=\"line\">-a: #and</span><br><span class=\"line\">-o: #or</span><br><span class=\"line\">!:  #非</span><br></pre></td></tr></table></figure>\n<p>二、整数比较：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq #测试两个整数是否相等</span><br><span class=\"line\">-ne #测试两个整数是否不等</span><br><span class=\"line\">-gt #测试一个数是否大于另一个数</span><br><span class=\"line\">-lt #测试一个数是否小于另一个数</span><br><span class=\"line\">-ge #大于或等于</span><br><span class=\"line\">-le #小于或等于</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令间的逻辑关系</span></span><br><span class=\"line\">&amp;&amp;  #逻辑与</span><br><span class=\"line\">||  #逻辑或</span><br></pre></td></tr></table></figure>\n<p>三、字符串比较<br>字符串比较：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==   #等于  两边要有空格</span><br><span class=\"line\">!=   #不等</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">    <span class=\"comment\">#大于</span></span></span><br><span class=\"line\">&lt;    #小于</span><br></pre></td></tr></table></figure>\n<p>四、文件测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-z string #测试指定字符是否为空，空着真，非空为假</span><br><span class=\"line\">-n string #测试指定字符串是否为不空，空为假 非空为真</span><br><span class=\"line\">-e FILE   #测试文件是否存在</span><br><span class=\"line\">-f file   #测试文件是否为普通文件</span><br><span class=\"line\">-d file   #测试指定路径是否为目录</span><br><span class=\"line\">-r file   #测试文件对当前用户是否可读</span><br><span class=\"line\">-w file   #测试文件对当前用户是否可写</span><br><span class=\"line\">-x file   #测试文件对当前用户是都可执行</span><br><span class=\"line\">-z        #是否为空  为空则为真</span><br><span class=\"line\">-a        #是否不空</span><br></pre></td></tr></table></figure>\n<p>五、if语法<br>if 判断条件 0为真 其他都为假</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件;then statement1;else statement2;fi</span><br></pre></td></tr></table></figure>\n<p>Note:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">if</span>语句进行判断是否为空</span></span><br><span class=\"line\">[ &quot;$name” = &quot;&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">等同于</span></span><br><span class=\"line\">[ ! &quot;$name&quot; ]</span><br><span class=\"line\">[ -z &quot;$name&quot; ]</span><br></pre></td></tr></table></figure>\n<p>Note:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用if语句的时候进行判断如果是进行数值类的 ，建议使用 let(())进行判断</span><br><span class=\"line\">对于字符串等使用test[ ] or [[ ]] 进行判断</span><br><span class=\"line\">(()) 中变量是可以不使用$来引用的</span><br></pre></td></tr></table></figure>\n<p>写脚本的时候很多时候需要用到回传命令，$?如果上一个命令执行成功，回传值为0，否则为1~255之间的任何一个</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0为真</span><br><span class=\"line\">非0为假</span><br></pre></td></tr></table></figure>\n<p>条件测试的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  执行一个命令的结果</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fs.sh;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">传回一个命令执行结果的相反值</span></span><br><span class=\"line\">if !grep -q &quot;rm&quot; fs.sh;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用复合命令（（算式））</span></span><br><span class=\"line\">if ((a&gt;b));then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用bash关键字 [[判断式]]</span></span><br><span class=\"line\">if [[ str &gt; xyz ]];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用内置命令：<span class=\"built_in\">test</span> 判断式</span></span><br><span class=\"line\">if test &quot;str&quot; \\&gt; &quot;xyz&quot;;then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用内置命令：[判断式]  类似<span class=\"built_in\">test</span></span></span><br><span class=\"line\">if [ &quot;str&quot; \\&gt; &quot;xyz&quot; ];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-a -o进行逻辑组合</span></span><br><span class=\"line\">[ -r filename -a -x filename ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令&amp;&amp;命令</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fn.sh &amp;&amp; [ $a -lt 100 ];then</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">命令||命令</span></span><br><span class=\"line\">if grep -q &quot;rm&quot; fn.sh || [ $a -lt 100 ];then</span><br></pre></td></tr></table></figure>\n<h2 id=\"文字处理工具\"><a href=\"#文字处理工具\" class=\"headerlink\" title=\"文字处理工具\"></a>文字处理工具</h2><h3 id=\"grep-全文查找\"><a href=\"#grep-全文查找\" class=\"headerlink\" title=\"grep 全文查找\"></a>grep 全文查找</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e #更强的扩展</span><br><span class=\"line\">-i #忽略大小写</span><br><span class=\"line\">-v #取反</span><br></pre></td></tr></table></figure>\n<h3 id=\"sed-流编辑，行处理\"><a href=\"#sed-流编辑，行处理\" class=\"headerlink\" title=\"sed 流编辑，行处理\"></a>sed 流编辑，行处理</h3><p>linux系统默认都是<code>GUN sed</code>,但MacOS自带的是UNIX原版的<code>sed</code>,这两个会有差异,最大不同在于<code>-i</code>选项<br>MacOS下直接下载<code>gsed</code>使用。<code>brew install gnu-sed</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-i #更新源文件</span><br><span class=\"line\">-n #参数后只显示处理过的行</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/1/2/g&#x27; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">s #替换指定字符</span><br><span class=\"line\">a #在当前行下面插入文本。</span><br><span class=\"line\">i #在当前行上面插入文本。</span><br><span class=\"line\">c #把选定的行改为新的文本。</span><br><span class=\"line\">d #删除，删除选择的行。</span><br><span class=\"line\">r #将一个独立文件的数据插入到当前数据流的指定位置。 sed &#x27;3r from.txt&#x27; to.txt</span><br><span class=\"line\">w #命令用来将文本中指定行的内容写入文件中。 sed &#x27;1,2w to.txt&#x27; from.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"awk-处理字段-全面的文本处理\"><a href=\"#awk-处理字段-全面的文本处理\" class=\"headerlink\" title=\"awk 处理字段,全面的文本处理\"></a>awk 处理字段,全面的文本处理</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &#x27;BEGIN&#123; FS = &quot;,&quot; &#125;&#123;print $2,$1,$3&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FS  <span class=\"comment\">#字段分隔符</span></span><br><span class=\"line\">OFS <span class=\"comment\">#字段输出分隔符</span></span><br><span class=\"line\">RS  <span class=\"comment\">#行分隔符</span></span><br><span class=\"line\">ORS <span class=\"comment\">#行输出分隔符</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut #字符切片</span><br><span class=\"line\">tr  #字符替换</span><br></pre></td></tr></table></figure>"},{"title":"幻想中的2021年读书计划","date":"2021-02-05T06:55:58.000Z","_content":"\n## 新读\n\n#### SQL\n!!! [SQL查询：从入门到实践（第４版）](https://www.ituring.com.cn/book/2628)\n\n[SQL必知必会（第4版）](https://www.ituring.com.cn/book/1102)\n\n#### Python\n!!! [Python编程：从入门到实践](https://www.ituring.com.cn/book/1861)\n\n!!! [流畅的Python](https://www.ituring.com.cn/book/1564)\n\n[写给程序员的Python教程](https://www.epubit.com/bookDetails?id=UB7209b099f1c00)\n\n#### 操作系统\n!!! 现代操作系统：原理与实现\n\n!!! [UNIX操作系统设计](https://www.epubit.com/bookDetails?id=N11908)\n\n!!! 深入理解计算机系统\n\n[操作系统真象还原](https://www.epubit.com/bookDetails?id=N12685)\n\n#### Perl\n!!! Perl语言入门 第7版\n\n!!! Perl语言编程思想\n\n#### 其他\n!!! [精通Rust 第2版](https://www.epubit.com/bookDetails?id=UB72639731c8b8e)\n\n!!! [重构 第二版](https://www.epubit.com/bookDetails?id=N42830)\n\n!!! [算法 第四版](https://www.ituring.com.cn/book/875)\n\n[自制编译器](https://www.ituring.com.cn/book/1308)\n\n[代码精进之路 从码农到工匠](https://www.epubit.com/bookDetails?id=UB6c9665253b5f4)\n\n[Ruby程序员修炼之道（第2版）](https://www.epubit.com/bookDetails?id=N10718)\n\n[C++语言的设计和演化](https://www.epubit.com/bookDetails?id=UB7227cc46b5b87)\n\n深入浅出Excel VBA\n\n## 复习\n\n#### JAVA\n!!! 深入理解JAVA虚拟机\n\n深入理解JVM字节码\n\n[垃圾回收的算法与实现](https://www.ituring.com.cn/book/1460)\n\n#### Ruby\n!!! Ruby元编程\n\n!!! Ruby原理剖析\n\n[Ruby基础教程（第5版）](https://www.ituring.com.cn/book/1843)\n\n#### JS\n!!! [JS高级程序设计 第四版](https://www.ituring.com.cn/book/2472)\n\n!!! JS语言精粹\n\n!!! [你不知道的JavaScript](https://www.ituring.com.cn/book/1488)\n\n[深入浅出Node.js](https://www.ituring.com.cn/book/1290)\n\n#### 操作系统\n!!! [计算的本质：深入剖析程序和计算机](https://www.ituring.com.cn/book/1098)\n\n!!! UNIX/Linux/OS X中的Shell编程（第4版）\n\n[Unix内核源码剖析](https://www.ituring.com.cn/book/1165)\n\n编码: 隐匿在计算机软硬件背后的语言\n\nUnix & Linux大学教程\n\n#### 网络\n!!! [图解HTTP](https://www.ituring.com.cn/book/1229)\n\nTCP/IP网络编程\n\n#### 编译器\n!!! antlr4权威指南\n\n精通正则表达式\n\n编程语言实现模式\n\n自己动手实现Lua\n\n#### 其他\n!!! [七周七并发模型](https://www.ituring.com.cn/book/1649)\n\n!!! [SQL 经典实例](https://www.ituring.com.cn/book/1691)\n","source":"_posts/幻想中的2021年读书计划.md","raw":"---\ntitle: 幻想中的2021年读书计划\ndate: 2021-02-05 14:55:58\ntags: [乱语,读书]\n---\n\n## 新读\n\n#### SQL\n!!! [SQL查询：从入门到实践（第４版）](https://www.ituring.com.cn/book/2628)\n\n[SQL必知必会（第4版）](https://www.ituring.com.cn/book/1102)\n\n#### Python\n!!! [Python编程：从入门到实践](https://www.ituring.com.cn/book/1861)\n\n!!! [流畅的Python](https://www.ituring.com.cn/book/1564)\n\n[写给程序员的Python教程](https://www.epubit.com/bookDetails?id=UB7209b099f1c00)\n\n#### 操作系统\n!!! 现代操作系统：原理与实现\n\n!!! [UNIX操作系统设计](https://www.epubit.com/bookDetails?id=N11908)\n\n!!! 深入理解计算机系统\n\n[操作系统真象还原](https://www.epubit.com/bookDetails?id=N12685)\n\n#### Perl\n!!! Perl语言入门 第7版\n\n!!! Perl语言编程思想\n\n#### 其他\n!!! [精通Rust 第2版](https://www.epubit.com/bookDetails?id=UB72639731c8b8e)\n\n!!! [重构 第二版](https://www.epubit.com/bookDetails?id=N42830)\n\n!!! [算法 第四版](https://www.ituring.com.cn/book/875)\n\n[自制编译器](https://www.ituring.com.cn/book/1308)\n\n[代码精进之路 从码农到工匠](https://www.epubit.com/bookDetails?id=UB6c9665253b5f4)\n\n[Ruby程序员修炼之道（第2版）](https://www.epubit.com/bookDetails?id=N10718)\n\n[C++语言的设计和演化](https://www.epubit.com/bookDetails?id=UB7227cc46b5b87)\n\n深入浅出Excel VBA\n\n## 复习\n\n#### JAVA\n!!! 深入理解JAVA虚拟机\n\n深入理解JVM字节码\n\n[垃圾回收的算法与实现](https://www.ituring.com.cn/book/1460)\n\n#### Ruby\n!!! Ruby元编程\n\n!!! Ruby原理剖析\n\n[Ruby基础教程（第5版）](https://www.ituring.com.cn/book/1843)\n\n#### JS\n!!! [JS高级程序设计 第四版](https://www.ituring.com.cn/book/2472)\n\n!!! JS语言精粹\n\n!!! [你不知道的JavaScript](https://www.ituring.com.cn/book/1488)\n\n[深入浅出Node.js](https://www.ituring.com.cn/book/1290)\n\n#### 操作系统\n!!! [计算的本质：深入剖析程序和计算机](https://www.ituring.com.cn/book/1098)\n\n!!! UNIX/Linux/OS X中的Shell编程（第4版）\n\n[Unix内核源码剖析](https://www.ituring.com.cn/book/1165)\n\n编码: 隐匿在计算机软硬件背后的语言\n\nUnix & Linux大学教程\n\n#### 网络\n!!! [图解HTTP](https://www.ituring.com.cn/book/1229)\n\nTCP/IP网络编程\n\n#### 编译器\n!!! antlr4权威指南\n\n精通正则表达式\n\n编程语言实现模式\n\n自己动手实现Lua\n\n#### 其他\n!!! [七周七并发模型](https://www.ituring.com.cn/book/1649)\n\n!!! [SQL 经典实例](https://www.ituring.com.cn/book/1691)\n","slug":"幻想中的2021年读书计划","published":1,"updated":"2021-02-22T03:13:36.494Z","_id":"ckks0ln3m0000h6o87vj62ike","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"新读\"><a href=\"#新读\" class=\"headerlink\" title=\"新读\"></a>新读</h2><h4 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/2628\">SQL查询：从入门到实践（第４版）</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1102\">SQL必知必会（第4版）</a></p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1861\">Python编程：从入门到实践</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1564\">流畅的Python</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB7209b099f1c00\">写给程序员的Python教程</a></p>\n<h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>!!! 现代操作系统：原理与实现</p>\n<p>!!! <a href=\"https://www.epubit.com/bookDetails?id=N11908\">UNIX操作系统设计</a></p>\n<p>!!! 深入理解计算机系统</p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=N12685\">操作系统真象还原</a></p>\n<h4 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h4><p>!!! Perl语言入门 第7版</p>\n<p>!!! Perl语言编程思想</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>!!! <a href=\"https://www.epubit.com/bookDetails?id=UB72639731c8b8e\">精通Rust 第2版</a></p>\n<p>!!! <a href=\"https://www.epubit.com/bookDetails?id=N42830\">重构 第二版</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/875\">算法 第四版</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1308\">自制编译器</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB6c9665253b5f4\">代码精进之路 从码农到工匠</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=N10718\">Ruby程序员修炼之道（第2版）</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB7227cc46b5b87\">C++语言的设计和演化</a></p>\n<p>深入浅出Excel VBA</p>\n<h2 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h2><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><p>!!! 深入理解JAVA虚拟机</p>\n<p>深入理解JVM字节码</p>\n<p><a href=\"https://www.ituring.com.cn/book/1460\">垃圾回收的算法与实现</a></p>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>!!! Ruby元编程</p>\n<p>!!! Ruby原理剖析</p>\n<p><a href=\"https://www.ituring.com.cn/book/1843\">Ruby基础教程（第5版）</a></p>\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/2472\">JS高级程序设计 第四版</a></p>\n<p>!!! JS语言精粹</p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1488\">你不知道的JavaScript</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1290\">深入浅出Node.js</a></p>\n<h4 id=\"操作系统-1\"><a href=\"#操作系统-1\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1098\">计算的本质：深入剖析程序和计算机</a></p>\n<p>!!! UNIX/Linux/OS X中的Shell编程（第4版）</p>\n<p><a href=\"https://www.ituring.com.cn/book/1165\">Unix内核源码剖析</a></p>\n<p>编码: 隐匿在计算机软硬件背后的语言</p>\n<p>Unix &amp; Linux大学教程</p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1229\">图解HTTP</a></p>\n<p>TCP/IP网络编程</p>\n<h4 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h4><p>!!! antlr4权威指南</p>\n<p>精通正则表达式</p>\n<p>编程语言实现模式</p>\n<p>自己动手实现Lua</p>\n<h4 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1649\">七周七并发模型</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1691\">SQL 经典实例</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新读\"><a href=\"#新读\" class=\"headerlink\" title=\"新读\"></a>新读</h2><h4 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/2628\">SQL查询：从入门到实践（第４版）</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1102\">SQL必知必会（第4版）</a></p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1861\">Python编程：从入门到实践</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1564\">流畅的Python</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB7209b099f1c00\">写给程序员的Python教程</a></p>\n<h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>!!! 现代操作系统：原理与实现</p>\n<p>!!! <a href=\"https://www.epubit.com/bookDetails?id=N11908\">UNIX操作系统设计</a></p>\n<p>!!! 深入理解计算机系统</p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=N12685\">操作系统真象还原</a></p>\n<h4 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h4><p>!!! Perl语言入门 第7版</p>\n<p>!!! Perl语言编程思想</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>!!! <a href=\"https://www.epubit.com/bookDetails?id=UB72639731c8b8e\">精通Rust 第2版</a></p>\n<p>!!! <a href=\"https://www.epubit.com/bookDetails?id=N42830\">重构 第二版</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/875\">算法 第四版</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1308\">自制编译器</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB6c9665253b5f4\">代码精进之路 从码农到工匠</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=N10718\">Ruby程序员修炼之道（第2版）</a></p>\n<p><a href=\"https://www.epubit.com/bookDetails?id=UB7227cc46b5b87\">C++语言的设计和演化</a></p>\n<p>深入浅出Excel VBA</p>\n<h2 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h2><h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><p>!!! 深入理解JAVA虚拟机</p>\n<p>深入理解JVM字节码</p>\n<p><a href=\"https://www.ituring.com.cn/book/1460\">垃圾回收的算法与实现</a></p>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>!!! Ruby元编程</p>\n<p>!!! Ruby原理剖析</p>\n<p><a href=\"https://www.ituring.com.cn/book/1843\">Ruby基础教程（第5版）</a></p>\n<h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/2472\">JS高级程序设计 第四版</a></p>\n<p>!!! JS语言精粹</p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1488\">你不知道的JavaScript</a></p>\n<p><a href=\"https://www.ituring.com.cn/book/1290\">深入浅出Node.js</a></p>\n<h4 id=\"操作系统-1\"><a href=\"#操作系统-1\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1098\">计算的本质：深入剖析程序和计算机</a></p>\n<p>!!! UNIX/Linux/OS X中的Shell编程（第4版）</p>\n<p><a href=\"https://www.ituring.com.cn/book/1165\">Unix内核源码剖析</a></p>\n<p>编码: 隐匿在计算机软硬件背后的语言</p>\n<p>Unix &amp; Linux大学教程</p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1229\">图解HTTP</a></p>\n<p>TCP/IP网络编程</p>\n<h4 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h4><p>!!! antlr4权威指南</p>\n<p>精通正则表达式</p>\n<p>编程语言实现模式</p>\n<p>自己动手实现Lua</p>\n<h4 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>!!! <a href=\"https://www.ituring.com.cn/book/1649\">七周七并发模型</a></p>\n<p>!!! <a href=\"https://www.ituring.com.cn/book/1691\">SQL 经典实例</a></p>\n"},{"title":"perl的语境和默认值","date":"2021-02-08T03:02:38.000Z","_content":"\n#### [Modern Perl](https://www.jianshu.com/p/98173e7af633)\n\n## 语境\n\n### 空语境，标量语境，列表语境\n\n当你调用一个函数，并且不使用它的返回值时，你就使用了空语境。例如调用一个叫`find_chores()` 的函数：\n```perl\nfind_chores()；\n```\n如果将返回值赋值给一个标量，这就指定了标量语境，函数将表现为标量语境下的行为：\n```perl\nmy $single_result = find_chores();\n```\n如果将函数的返回值赋值给一个数组、列表，或者在列表中使用，那么函数就处在列表语境中：\n```perl\nmy @all_results = find_chores();\nmy ($single_element, @rest) = find_chores();\n```\n单一元素的列表，还是列表，所以也是列表语境：\n```perl\nmy ($single_element) = find_chores();\n```\n函数在不同的语境下可能产生不同的行为，如果语境不对，结果可能与预期的不一致：\n```perl\nmy %results =(\n     cheap_operation => $cheap_results,\n     expensive_operation => find_chores(),  # 列表语境下的行为，可能不是你所期望的\n);\n```\n这时可以使用关键词明确指定为标量语境：\n```perl\nmy %results =\n(\n     cheap_operation => $cheap_results,\n     expensive_operation => scalar find_chores(),\n);\n```\n\n### 操作符语境: 数值语境，字符串语境，布尔语境\n在前面的例子中我们看到，使用“+”号时，Perl会变量解析为数值，其实就是加号操作符提供了数值语境。\n\n使用字符串操作符时，就会提供字符串语境。如操作符“eq”：\n```perl\nsay \"Catastrophic crypto fail!\" if $alice eq $bob;\n```\n注意和下面这个的区别，数值操作“==”提供的是数值语境：\n```perl\nsay \"Catastrophic crypto fail!\" if $alice == 'Bob';\n```\n布尔语境，出现在条件语句里面。比如上面的 if语句后面的表达式就是布尔语境。\n\n在某些罕见的情况下，可能需要更为明确的指明语境：\n```perl\nmy $numeric_x = 0 + $x;     # 加 0   强制用数值语境 \nmy $stringy_x = '' . $x;    # 加 空串 强制用字符串语境\nmy $boolean_x = !!$x;       # 加 双反 强制用布尔语境\n```\n\n## 默认值\n\n### 默认标量标量： \n#### `$_` \n打印类 print，say;\n标量操作类 chr,ord,lc,length,reverse, 正则等等。\n\n### 默认的数组变量: \n#### 函数内`@_`\n在调用函数时，传递的参数就存在默认数组变量 `@_` 里面。在函数内部，数组操作符默认就是操作这个数组变量\n下面2段代码是等价的：\n```perl\nsub foo\n{\n    my $arg = shift;\n    ...\n}\n\nsub foo_explicit_args\n{\n    my $arg = shift @_;\n    ...\n}\n```\n如果`$_`对应的意思是“那个”，那么`@_`对应的意思就是“那些”。\n数组变量`@_`是每个函数内部私有的，不同函数之间互不影响。\n\n#### 函数外`@ARGV`\n如果在所有函数的外面，默认的数组变量就是`@ARGV`，里面包含了该程序的命令行参数。\n\n`@ARGV`有自己的个性。如果你是使用钻石操作符`<>`读取空的文件句柄，Perl就会自动以`@ARGV`里面的元素为名字，读取对应的文件。\n如果`@ARGV`为空，Perl就从标准输入STDIN里读取。我们可以利用这个特性写个短小精悍的程序，如将输入的字符串逆序输出：\n```perl\nwhile (<>)\n{\n    chomp;\n    say scalar reverse;\n}\n```\n为什么要加上scalar呢？如果在列表语境下，reverse并不默认操作`$_` 。\n","source":"_posts/perl的语境和默认值.md","raw":"---\ntitle: perl的语境和默认值\ndate: 2021-02-08 11:02:38\ntags: [perl]\n---\n\n#### [Modern Perl](https://www.jianshu.com/p/98173e7af633)\n\n## 语境\n\n### 空语境，标量语境，列表语境\n\n当你调用一个函数，并且不使用它的返回值时，你就使用了空语境。例如调用一个叫`find_chores()` 的函数：\n```perl\nfind_chores()；\n```\n如果将返回值赋值给一个标量，这就指定了标量语境，函数将表现为标量语境下的行为：\n```perl\nmy $single_result = find_chores();\n```\n如果将函数的返回值赋值给一个数组、列表，或者在列表中使用，那么函数就处在列表语境中：\n```perl\nmy @all_results = find_chores();\nmy ($single_element, @rest) = find_chores();\n```\n单一元素的列表，还是列表，所以也是列表语境：\n```perl\nmy ($single_element) = find_chores();\n```\n函数在不同的语境下可能产生不同的行为，如果语境不对，结果可能与预期的不一致：\n```perl\nmy %results =(\n     cheap_operation => $cheap_results,\n     expensive_operation => find_chores(),  # 列表语境下的行为，可能不是你所期望的\n);\n```\n这时可以使用关键词明确指定为标量语境：\n```perl\nmy %results =\n(\n     cheap_operation => $cheap_results,\n     expensive_operation => scalar find_chores(),\n);\n```\n\n### 操作符语境: 数值语境，字符串语境，布尔语境\n在前面的例子中我们看到，使用“+”号时，Perl会变量解析为数值，其实就是加号操作符提供了数值语境。\n\n使用字符串操作符时，就会提供字符串语境。如操作符“eq”：\n```perl\nsay \"Catastrophic crypto fail!\" if $alice eq $bob;\n```\n注意和下面这个的区别，数值操作“==”提供的是数值语境：\n```perl\nsay \"Catastrophic crypto fail!\" if $alice == 'Bob';\n```\n布尔语境，出现在条件语句里面。比如上面的 if语句后面的表达式就是布尔语境。\n\n在某些罕见的情况下，可能需要更为明确的指明语境：\n```perl\nmy $numeric_x = 0 + $x;     # 加 0   强制用数值语境 \nmy $stringy_x = '' . $x;    # 加 空串 强制用字符串语境\nmy $boolean_x = !!$x;       # 加 双反 强制用布尔语境\n```\n\n## 默认值\n\n### 默认标量标量： \n#### `$_` \n打印类 print，say;\n标量操作类 chr,ord,lc,length,reverse, 正则等等。\n\n### 默认的数组变量: \n#### 函数内`@_`\n在调用函数时，传递的参数就存在默认数组变量 `@_` 里面。在函数内部，数组操作符默认就是操作这个数组变量\n下面2段代码是等价的：\n```perl\nsub foo\n{\n    my $arg = shift;\n    ...\n}\n\nsub foo_explicit_args\n{\n    my $arg = shift @_;\n    ...\n}\n```\n如果`$_`对应的意思是“那个”，那么`@_`对应的意思就是“那些”。\n数组变量`@_`是每个函数内部私有的，不同函数之间互不影响。\n\n#### 函数外`@ARGV`\n如果在所有函数的外面，默认的数组变量就是`@ARGV`，里面包含了该程序的命令行参数。\n\n`@ARGV`有自己的个性。如果你是使用钻石操作符`<>`读取空的文件句柄，Perl就会自动以`@ARGV`里面的元素为名字，读取对应的文件。\n如果`@ARGV`为空，Perl就从标准输入STDIN里读取。我们可以利用这个特性写个短小精悍的程序，如将输入的字符串逆序输出：\n```perl\nwhile (<>)\n{\n    chomp;\n    say scalar reverse;\n}\n```\n为什么要加上scalar呢？如果在列表语境下，reverse并不默认操作`$_` 。\n","slug":"perl的语境和默认值","published":1,"updated":"2021-02-22T03:13:36.505Z","_id":"ckkw0b0zp00003do844qbbbnh","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Modern-Perl\"><a href=\"#Modern-Perl\" class=\"headerlink\" title=\"Modern Perl\"></a><a href=\"https://www.jianshu.com/p/98173e7af633\">Modern Perl</a></h4><h2 id=\"语境\"><a href=\"#语境\" class=\"headerlink\" title=\"语境\"></a>语境</h2><h3 id=\"空语境，标量语境，列表语境\"><a href=\"#空语境，标量语境，列表语境\" class=\"headerlink\" title=\"空语境，标量语境，列表语境\"></a>空语境，标量语境，列表语境</h3><p>当你调用一个函数，并且不使用它的返回值时，你就使用了空语境。例如调用一个叫<code>find_chores()</code> 的函数：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_chores()；</span><br></pre></td></tr></table></figure>\n<p>如果将返回值赋值给一个标量，这就指定了标量语境，函数将表现为标量语境下的行为：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> $single_result = find_chores();</span><br></pre></td></tr></table></figure>\n<p>如果将函数的返回值赋值给一个数组、列表，或者在列表中使用，那么函数就处在列表语境中：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> @all_results = find_chores();</span><br><span class=\"line\"><span class=\"keyword\">my</span> ($single_element, @rest) = find_chores();</span><br></pre></td></tr></table></figure>\n<p>单一元素的列表，还是列表，所以也是列表语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> ($single_element) = find_chores();</span><br></pre></td></tr></table></figure>\n<p>函数在不同的语境下可能产生不同的行为，如果语境不对，结果可能与预期的不一致：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> %results =(</span><br><span class=\"line\">     <span class=\"string\">cheap_operation =&gt;</span> $cheap_results,</span><br><span class=\"line\">     <span class=\"string\">expensive_operation =&gt;</span> find_chores(),  <span class=\"comment\"># 列表语境下的行为，可能不是你所期望的</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这时可以使用关键词明确指定为标量语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> %results =</span><br><span class=\"line\">(</span><br><span class=\"line\">     <span class=\"string\">cheap_operation =&gt;</span> $cheap_results,</span><br><span class=\"line\">     <span class=\"string\">expensive_operation =&gt;</span> <span class=\"keyword\">scalar</span> find_chores(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作符语境-数值语境，字符串语境，布尔语境\"><a href=\"#操作符语境-数值语境，字符串语境，布尔语境\" class=\"headerlink\" title=\"操作符语境: 数值语境，字符串语境，布尔语境\"></a>操作符语境: 数值语境，字符串语境，布尔语境</h3><p>在前面的例子中我们看到，使用“+”号时，Perl会变量解析为数值，其实就是加号操作符提供了数值语境。</p>\n<p>使用字符串操作符时，就会提供字符串语境。如操作符“eq”：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">say</span> <span class=\"string\">&quot;Catastrophic crypto fail!&quot;</span> <span class=\"keyword\">if</span> $alice eq $bob;</span><br></pre></td></tr></table></figure>\n<p>注意和下面这个的区别，数值操作“==”提供的是数值语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">say</span> <span class=\"string\">&quot;Catastrophic crypto fail!&quot;</span> <span class=\"keyword\">if</span> $alice == <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>布尔语境，出现在条件语句里面。比如上面的 if语句后面的表达式就是布尔语境。</p>\n<p>在某些罕见的情况下，可能需要更为明确的指明语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> $numeric_x = <span class=\"number\">0</span> + $x;     <span class=\"comment\"># 加 0   强制用数值语境 </span></span><br><span class=\"line\"><span class=\"keyword\">my</span> $stringy_x = <span class=\"string\">&#x27;&#x27;</span> . $x;    <span class=\"comment\"># 加 空串 强制用字符串语境</span></span><br><span class=\"line\"><span class=\"keyword\">my</span> $boolean_x = !!$x;       <span class=\"comment\"># 加 双反 强制用布尔语境</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><h3 id=\"默认标量标量：\"><a href=\"#默认标量标量：\" class=\"headerlink\" title=\"默认标量标量：\"></a>默认标量标量：</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a><code>$_</code></h4><p>打印类 print，say;<br>标量操作类 chr,ord,lc,length,reverse, 正则等等。</p>\n<h3 id=\"默认的数组变量\"><a href=\"#默认的数组变量\" class=\"headerlink\" title=\"默认的数组变量:\"></a>默认的数组变量:</h3><h4 id=\"函数内\"><a href=\"#函数内\" class=\"headerlink\" title=\"函数内@_\"></a>函数内<code>@_</code></h4><p>在调用函数时，传递的参数就存在默认数组变量 <code>@_</code> 里面。在函数内部，数组操作符默认就是操作这个数组变量<br>下面2段代码是等价的：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">foo</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">my</span> $arg = <span class=\"keyword\">shift</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">foo_explicit_args</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">my</span> $arg = <span class=\"keyword\">shift</span> @_;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果<code>$_</code>对应的意思是“那个”，那么<code>@_</code>对应的意思就是“那些”。<br>数组变量<code>@_</code>是每个函数内部私有的，不同函数之间互不影响。</p>\n<h4 id=\"函数外-ARGV\"><a href=\"#函数外-ARGV\" class=\"headerlink\" title=\"函数外@ARGV\"></a>函数外<code>@ARGV</code></h4><p>如果在所有函数的外面，默认的数组变量就是<code>@ARGV</code>，里面包含了该程序的命令行参数。</p>\n<p><code>@ARGV</code>有自己的个性。如果你是使用钻石操作符<code>&lt;&gt;</code>读取空的文件句柄，Perl就会自动以<code>@ARGV</code>里面的元素为名字，读取对应的文件。<br>如果<code>@ARGV</code>为空，Perl就从标准输入STDIN里读取。我们可以利用这个特性写个短小精悍的程序，如将输入的字符串逆序输出：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;&gt;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">chomp</span>;</span><br><span class=\"line\">    <span class=\"keyword\">say</span> <span class=\"keyword\">scalar</span> <span class=\"keyword\">reverse</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要加上scalar呢？如果在列表语境下，reverse并不默认操作<code>$_</code> 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Modern-Perl\"><a href=\"#Modern-Perl\" class=\"headerlink\" title=\"Modern Perl\"></a><a href=\"https://www.jianshu.com/p/98173e7af633\">Modern Perl</a></h4><h2 id=\"语境\"><a href=\"#语境\" class=\"headerlink\" title=\"语境\"></a>语境</h2><h3 id=\"空语境，标量语境，列表语境\"><a href=\"#空语境，标量语境，列表语境\" class=\"headerlink\" title=\"空语境，标量语境，列表语境\"></a>空语境，标量语境，列表语境</h3><p>当你调用一个函数，并且不使用它的返回值时，你就使用了空语境。例如调用一个叫<code>find_chores()</code> 的函数：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_chores()；</span><br></pre></td></tr></table></figure>\n<p>如果将返回值赋值给一个标量，这就指定了标量语境，函数将表现为标量语境下的行为：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> $single_result = find_chores();</span><br></pre></td></tr></table></figure>\n<p>如果将函数的返回值赋值给一个数组、列表，或者在列表中使用，那么函数就处在列表语境中：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> @all_results = find_chores();</span><br><span class=\"line\"><span class=\"keyword\">my</span> ($single_element, @rest) = find_chores();</span><br></pre></td></tr></table></figure>\n<p>单一元素的列表，还是列表，所以也是列表语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> ($single_element) = find_chores();</span><br></pre></td></tr></table></figure>\n<p>函数在不同的语境下可能产生不同的行为，如果语境不对，结果可能与预期的不一致：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> %results =(</span><br><span class=\"line\">     <span class=\"string\">cheap_operation =&gt;</span> $cheap_results,</span><br><span class=\"line\">     <span class=\"string\">expensive_operation =&gt;</span> find_chores(),  <span class=\"comment\"># 列表语境下的行为，可能不是你所期望的</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这时可以使用关键词明确指定为标量语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> %results =</span><br><span class=\"line\">(</span><br><span class=\"line\">     <span class=\"string\">cheap_operation =&gt;</span> $cheap_results,</span><br><span class=\"line\">     <span class=\"string\">expensive_operation =&gt;</span> <span class=\"keyword\">scalar</span> find_chores(),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作符语境-数值语境，字符串语境，布尔语境\"><a href=\"#操作符语境-数值语境，字符串语境，布尔语境\" class=\"headerlink\" title=\"操作符语境: 数值语境，字符串语境，布尔语境\"></a>操作符语境: 数值语境，字符串语境，布尔语境</h3><p>在前面的例子中我们看到，使用“+”号时，Perl会变量解析为数值，其实就是加号操作符提供了数值语境。</p>\n<p>使用字符串操作符时，就会提供字符串语境。如操作符“eq”：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">say</span> <span class=\"string\">&quot;Catastrophic crypto fail!&quot;</span> <span class=\"keyword\">if</span> $alice eq $bob;</span><br></pre></td></tr></table></figure>\n<p>注意和下面这个的区别，数值操作“==”提供的是数值语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">say</span> <span class=\"string\">&quot;Catastrophic crypto fail!&quot;</span> <span class=\"keyword\">if</span> $alice == <span class=\"string\">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>布尔语境，出现在条件语句里面。比如上面的 if语句后面的表达式就是布尔语境。</p>\n<p>在某些罕见的情况下，可能需要更为明确的指明语境：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> $numeric_x = <span class=\"number\">0</span> + $x;     <span class=\"comment\"># 加 0   强制用数值语境 </span></span><br><span class=\"line\"><span class=\"keyword\">my</span> $stringy_x = <span class=\"string\">&#x27;&#x27;</span> . $x;    <span class=\"comment\"># 加 空串 强制用字符串语境</span></span><br><span class=\"line\"><span class=\"keyword\">my</span> $boolean_x = !!$x;       <span class=\"comment\"># 加 双反 强制用布尔语境</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><h3 id=\"默认标量标量：\"><a href=\"#默认标量标量：\" class=\"headerlink\" title=\"默认标量标量：\"></a>默认标量标量：</h3><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a><code>$_</code></h4><p>打印类 print，say;<br>标量操作类 chr,ord,lc,length,reverse, 正则等等。</p>\n<h3 id=\"默认的数组变量\"><a href=\"#默认的数组变量\" class=\"headerlink\" title=\"默认的数组变量:\"></a>默认的数组变量:</h3><h4 id=\"函数内\"><a href=\"#函数内\" class=\"headerlink\" title=\"函数内@_\"></a>函数内<code>@_</code></h4><p>在调用函数时，传递的参数就存在默认数组变量 <code>@_</code> 里面。在函数内部，数组操作符默认就是操作这个数组变量<br>下面2段代码是等价的：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">foo</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">my</span> $arg = <span class=\"keyword\">shift</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">foo_explicit_args</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">my</span> $arg = <span class=\"keyword\">shift</span> @_;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果<code>$_</code>对应的意思是“那个”，那么<code>@_</code>对应的意思就是“那些”。<br>数组变量<code>@_</code>是每个函数内部私有的，不同函数之间互不影响。</p>\n<h4 id=\"函数外-ARGV\"><a href=\"#函数外-ARGV\" class=\"headerlink\" title=\"函数外@ARGV\"></a>函数外<code>@ARGV</code></h4><p>如果在所有函数的外面，默认的数组变量就是<code>@ARGV</code>，里面包含了该程序的命令行参数。</p>\n<p><code>@ARGV</code>有自己的个性。如果你是使用钻石操作符<code>&lt;&gt;</code>读取空的文件句柄，Perl就会自动以<code>@ARGV</code>里面的元素为名字，读取对应的文件。<br>如果<code>@ARGV</code>为空，Perl就从标准输入STDIN里读取。我们可以利用这个特性写个短小精悍的程序，如将输入的字符串逆序输出：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (&lt;&gt;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">chomp</span>;</span><br><span class=\"line\">    <span class=\"keyword\">say</span> <span class=\"keyword\">scalar</span> <span class=\"keyword\">reverse</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么要加上scalar呢？如果在列表语境下，reverse并不默认操作<code>$_</code> 。</p>\n"},{"title":"闭包的思考","date":"2021-02-18T07:35:09.000Z","_content":"\n闭包虽然一直会写，但我并不知道用在什么地方。   \n在 阮一峰 [介绍闭包的博客](https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html) 下面，有一个评论点醒了我。\n```text\n迷途小书童 说：\n\n类是有行为的数据，闭包是有数据的行为。\n\n2009年8月31日 10:26 | # | 引用\n```\n`生成闭包的函数`可以理解成`类`，返回的`闭包变量`其实是函数式编程中的`对象`。   \n一般的`函数`其实是`无状态`的，每次调用完函数，内部的状态都会被丢弃。  \n虽然也可以依靠`外部变量`保存某些状态，但`外部变量`并不安全。   \n`对象`中的`方法`和`属性`就可以`安全的合作`。  \n那么除了`对象`还有其他方法可以`安全的合作`吗？  \n`闭包`就可以，在纯函数式的语言中，只有`闭包`能用。\n\n那么，我们可以在不方便使用`对象`的地方，改用`闭包`来使用。\n\nPS:   \n知乎上也找到了[相同的观点](https://www.zhihu.com/question/19554716)  \n```text\nkuby 行者 \n7 人赞同了该回答\n    闭包是穷人的对象,对象是穷人的闭包.\n    http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent\n发布于 2011-04-22\n```\n这里有中文版的更深入的探讨：  \n《JavaScript 轻量级函数式编程》 [第7章: 闭包 vs 对象](https://wizardforcel.gitbooks.io/functional-light-js/content/ch7.html)\n","source":"_posts/闭包的思考.md","raw":"---\ntitle: 闭包的思考\ndate: 2021-02-18 15:35:09\ntags: [函数式]\n---\n\n闭包虽然一直会写，但我并不知道用在什么地方。   \n在 阮一峰 [介绍闭包的博客](https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html) 下面，有一个评论点醒了我。\n```text\n迷途小书童 说：\n\n类是有行为的数据，闭包是有数据的行为。\n\n2009年8月31日 10:26 | # | 引用\n```\n`生成闭包的函数`可以理解成`类`，返回的`闭包变量`其实是函数式编程中的`对象`。   \n一般的`函数`其实是`无状态`的，每次调用完函数，内部的状态都会被丢弃。  \n虽然也可以依靠`外部变量`保存某些状态，但`外部变量`并不安全。   \n`对象`中的`方法`和`属性`就可以`安全的合作`。  \n那么除了`对象`还有其他方法可以`安全的合作`吗？  \n`闭包`就可以，在纯函数式的语言中，只有`闭包`能用。\n\n那么，我们可以在不方便使用`对象`的地方，改用`闭包`来使用。\n\nPS:   \n知乎上也找到了[相同的观点](https://www.zhihu.com/question/19554716)  \n```text\nkuby 行者 \n7 人赞同了该回答\n    闭包是穷人的对象,对象是穷人的闭包.\n    http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent\n发布于 2011-04-22\n```\n这里有中文版的更深入的探讨：  \n《JavaScript 轻量级函数式编程》 [第7章: 闭包 vs 对象](https://wizardforcel.gitbooks.io/functional-light-js/content/ch7.html)\n","slug":"闭包的思考","published":1,"updated":"2021-02-22T03:14:57.270Z","_id":"cklakgsfr00002yo8hlu51pel","comments":1,"layout":"post","photos":[],"link":"","content":"<p>闭包虽然一直会写，但我并不知道用在什么地方。<br>在 阮一峰 <a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">介绍闭包的博客</a> 下面，有一个评论点醒了我。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">迷途小书童 说：</span><br><span class=\"line\"></span><br><span class=\"line\">类是有行为的数据，闭包是有数据的行为。</span><br><span class=\"line\"></span><br><span class=\"line\">2009年8月31日 10:26 | # | 引用</span><br></pre></td></tr></table></figure>\n<p><code>生成闭包的函数</code>可以理解成<code>类</code>，返回的<code>闭包变量</code>其实是函数式编程中的<code>对象</code>。<br>一般的<code>函数</code>其实是<code>无状态</code>的，每次调用完函数，内部的状态都会被丢弃。<br>虽然也可以依靠<code>外部变量</code>保存某些状态，但<code>外部变量</code>并不安全。<br><code>对象</code>中的<code>方法</code>和<code>属性</code>就可以<code>安全的合作</code>。<br>那么除了<code>对象</code>还有其他方法可以<code>安全的合作</code>吗？<br><code>闭包</code>就可以，在纯函数式的语言中，只有<code>闭包</code>能用。</p>\n<p>那么，我们可以在不方便使用<code>对象</code>的地方，改用<code>闭包</code>来使用。</p>\n<p>PS:<br>知乎上也找到了<a href=\"https://www.zhihu.com/question/19554716\">相同的观点</a>  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kuby 行者 </span><br><span class=\"line\">7 人赞同了该回答</span><br><span class=\"line\">    闭包是穷人的对象,对象是穷人的闭包.</span><br><span class=\"line\">    http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent</span><br><span class=\"line\">发布于 2011-04-22</span><br></pre></td></tr></table></figure>\n<p>这里有中文版的更深入的探讨：<br>《JavaScript 轻量级函数式编程》 <a href=\"https://wizardforcel.gitbooks.io/functional-light-js/content/ch7.html\">第7章: 闭包 vs 对象</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>闭包虽然一直会写，但我并不知道用在什么地方。<br>在 阮一峰 <a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">介绍闭包的博客</a> 下面，有一个评论点醒了我。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">迷途小书童 说：</span><br><span class=\"line\"></span><br><span class=\"line\">类是有行为的数据，闭包是有数据的行为。</span><br><span class=\"line\"></span><br><span class=\"line\">2009年8月31日 10:26 | # | 引用</span><br></pre></td></tr></table></figure>\n<p><code>生成闭包的函数</code>可以理解成<code>类</code>，返回的<code>闭包变量</code>其实是函数式编程中的<code>对象</code>。<br>一般的<code>函数</code>其实是<code>无状态</code>的，每次调用完函数，内部的状态都会被丢弃。<br>虽然也可以依靠<code>外部变量</code>保存某些状态，但<code>外部变量</code>并不安全。<br><code>对象</code>中的<code>方法</code>和<code>属性</code>就可以<code>安全的合作</code>。<br>那么除了<code>对象</code>还有其他方法可以<code>安全的合作</code>吗？<br><code>闭包</code>就可以，在纯函数式的语言中，只有<code>闭包</code>能用。</p>\n<p>那么，我们可以在不方便使用<code>对象</code>的地方，改用<code>闭包</code>来使用。</p>\n<p>PS:<br>知乎上也找到了<a href=\"https://www.zhihu.com/question/19554716\">相同的观点</a>  </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kuby 行者 </span><br><span class=\"line\">7 人赞同了该回答</span><br><span class=\"line\">    闭包是穷人的对象,对象是穷人的闭包.</span><br><span class=\"line\">    http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent</span><br><span class=\"line\">发布于 2011-04-22</span><br></pre></td></tr></table></figure>\n<p>这里有中文版的更深入的探讨：<br>《JavaScript 轻量级函数式编程》 <a href=\"https://wizardforcel.gitbooks.io/functional-light-js/content/ch7.html\">第7章: 闭包 vs 对象</a></p>\n"},{"title":"最大公约数的人话描述","date":"2021-02-19T09:29:38.000Z","_content":"终于看明白这玩意到底是什么意思了，赶紧写下来。\n\nL0 和 L1 都是非负整数，  \nL0 为较大数，L1 为较小数，  \n两者的 `最大公约数` 。\n\n```text\nL0  除以  L1  的余数   L2\nL1  除以  L2  的余数   L3\n直到 Ln 等于 0，则 L(n-1) 为最大公约数。\n```\n\n5 和 4 的最大公约数   \n```text\n5 除以 4 的余数 1  \n4 除以 1 的余数 0  \n由此可知 1 是最大公约数。\n```\n\n4 和 2 的最大公约数   \n```text\n4 除以 2 的余数 0   \n由此可知 2 是最大公约数\n```\n","source":"_posts/最大公约数的人话描述.md","raw":"---\ntitle: 最大公约数的人话描述\ndate: 2021-02-19 17:29:38\ntags: [算法,乱语]\n---\n终于看明白这玩意到底是什么意思了，赶紧写下来。\n\nL0 和 L1 都是非负整数，  \nL0 为较大数，L1 为较小数，  \n两者的 `最大公约数` 。\n\n```text\nL0  除以  L1  的余数   L2\nL1  除以  L2  的余数   L3\n直到 Ln 等于 0，则 L(n-1) 为最大公约数。\n```\n\n5 和 4 的最大公约数   \n```text\n5 除以 4 的余数 1  \n4 除以 1 的余数 0  \n由此可知 1 是最大公约数。\n```\n\n4 和 2 的最大公约数   \n```text\n4 除以 2 的余数 0   \n由此可知 2 是最大公约数\n```\n","slug":"最大公约数的人话描述","published":1,"updated":"2021-02-20T03:28:23.347Z","_id":"cklc4583a0000gio80eptayag","comments":1,"layout":"post","photos":[],"link":"","content":"<p>终于看明白这玩意到底是什么意思了，赶紧写下来。</p>\n<p>L0 和 L1 都是非负整数，<br>L0 为较大数，L1 为较小数，<br>两者的 <code>最大公约数</code> 。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L0  除以  L1  的余数   L2</span><br><span class=\"line\">L1  除以  L2  的余数   L3</span><br><span class=\"line\">直到 Ln 等于 0，则 L(n-1) 为最大公约数。</span><br></pre></td></tr></table></figure>\n<p>5 和 4 的最大公约数   </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 除以 4 的余数 1  </span><br><span class=\"line\">4 除以 1 的余数 0  </span><br><span class=\"line\">由此可知 1 是最大公约数。</span><br></pre></td></tr></table></figure>\n<p>4 和 2 的最大公约数   </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 除以 2 的余数 0   </span><br><span class=\"line\">由此可知 2 是最大公约数</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>终于看明白这玩意到底是什么意思了，赶紧写下来。</p>\n<p>L0 和 L1 都是非负整数，<br>L0 为较大数，L1 为较小数，<br>两者的 <code>最大公约数</code> 。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L0  除以  L1  的余数   L2</span><br><span class=\"line\">L1  除以  L2  的余数   L3</span><br><span class=\"line\">直到 Ln 等于 0，则 L(n-1) 为最大公约数。</span><br></pre></td></tr></table></figure>\n<p>5 和 4 的最大公约数   </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 除以 4 的余数 1  </span><br><span class=\"line\">4 除以 1 的余数 0  </span><br><span class=\"line\">由此可知 1 是最大公约数。</span><br></pre></td></tr></table></figure>\n<p>4 和 2 的最大公约数   </p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 除以 2 的余数 0   </span><br><span class=\"line\">由此可知 2 是最大公约数</span><br></pre></td></tr></table></figure>"},{"title":"数据结构之偶感","date":"2021-02-22T07:35:47.000Z","_content":"### 数据结构名称辨析\n\n真实`组织`方式  有 `数组`，`链表`  \n\n基本`操作`方式  有 `队列`，`栈`，等等    \n复合`操作`方式  有 `二叉树`，`堆`，`图`，等等  \n","source":"_posts/数据结构之偶感.md","raw":"---\ntitle: 数据结构之偶感\ndate: 2021-02-22 15:35:47\ntags:\n---\n### 数据结构名称辨析\n\n真实`组织`方式  有 `数组`，`链表`  \n\n基本`操作`方式  有 `队列`，`栈`，等等    \n复合`操作`方式  有 `二叉树`，`堆`，`图`，等等  \n","slug":"数据结构之偶感","published":1,"updated":"2021-02-23T02:18:18.337Z","_id":"cklg9phod0000o6o8hf2taeh7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"数据结构名称辨析\"><a href=\"#数据结构名称辨析\" class=\"headerlink\" title=\"数据结构名称辨析\"></a>数据结构名称辨析</h3><p>真实<code>组织</code>方式  有 <code>数组</code>，<code>链表</code>  </p>\n<p>基本<code>操作</code>方式  有 <code>队列</code>，<code>栈</code>，等等<br>复合<code>操作</code>方式  有 <code>二叉树</code>，<code>堆</code>，<code>图</code>，等等  </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据结构名称辨析\"><a href=\"#数据结构名称辨析\" class=\"headerlink\" title=\"数据结构名称辨析\"></a>数据结构名称辨析</h3><p>真实<code>组织</code>方式  有 <code>数组</code>，<code>链表</code>  </p>\n<p>基本<code>操作</code>方式  有 <code>队列</code>，<code>栈</code>，等等<br>复合<code>操作</code>方式  有 <code>二叉树</code>，<code>堆</code>，<code>图</code>，等等  </p>\n"},{"title":"质数之想破头","date":"2021-02-22T09:20:25.000Z","_content":"\n质数m 仅有 `m * 1` 这一种的组合方法，可以认为没有正常组合法。   \n而 `称法 *` 可以理解为 `加法 +` 的快捷记号。  \n例如：`2 * 3` 为 `2 + 2 + 2` 的 快捷记号。  \n`6`有 `2 * 3` 和 `6 * 1` 两种 组合法，可以认为有一种正常的组合法。\n\n一个`正整数`如果有了正常的组合法，就有了分解成`并行`处理`更小的正整数`的方法。  \n没有的话，只能单线程处理，或者说是最原始的暴力解法。   \n即使都有`并行`处理，`4 * 4` 的`并行`处理应该比`2 * 7`这种更优。（完全瞎猜    \n\n我猜想质数类似于`两点之间的最短距离`之类的解。  \n思考如何组合质数不太靠谱，  \n转而思考如何分解正整数，然后发现质数，才是正道。  \n","source":"_posts/质数之想破头.md","raw":"---\ntitle: 质数之想破头\ndate: 2021-02-22 17:20:25\ntags:\n---\n\n质数m 仅有 `m * 1` 这一种的组合方法，可以认为没有正常组合法。   \n而 `称法 *` 可以理解为 `加法 +` 的快捷记号。  \n例如：`2 * 3` 为 `2 + 2 + 2` 的 快捷记号。  \n`6`有 `2 * 3` 和 `6 * 1` 两种 组合法，可以认为有一种正常的组合法。\n\n一个`正整数`如果有了正常的组合法，就有了分解成`并行`处理`更小的正整数`的方法。  \n没有的话，只能单线程处理，或者说是最原始的暴力解法。   \n即使都有`并行`处理，`4 * 4` 的`并行`处理应该比`2 * 7`这种更优。（完全瞎猜    \n\n我猜想质数类似于`两点之间的最短距离`之类的解。  \n思考如何组合质数不太靠谱，  \n转而思考如何分解正整数，然后发现质数，才是正道。  \n","slug":"质数之想破头","published":1,"updated":"2021-02-23T02:47:35.262Z","_id":"cklgdthvo00008qo85jpj5t77","comments":1,"layout":"post","photos":[],"link":"","content":"<p>质数m 仅有 <code>m * 1</code> 这一种的组合方法，可以认为没有正常组合法。<br>而 <code>称法 *</code> 可以理解为 <code>加法 +</code> 的快捷记号。<br>例如：<code>2 * 3</code> 为 <code>2 + 2 + 2</code> 的 快捷记号。<br><code>6</code>有 <code>2 * 3</code> 和 <code>6 * 1</code> 两种 组合法，可以认为有一种正常的组合法。</p>\n<p>一个<code>正整数</code>如果有了正常的组合法，就有了分解成<code>并行</code>处理<code>更小的正整数</code>的方法。<br>没有的话，只能单线程处理，或者说是最原始的暴力解法。<br>即使都有<code>并行</code>处理，<code>4 * 4</code> 的<code>并行</code>处理应该比<code>2 * 7</code>这种更优。（完全瞎猜    </p>\n<p>我猜想质数类似于<code>两点之间的最短距离</code>之类的解。<br>思考如何组合质数不太靠谱，<br>转而思考如何分解正整数，然后发现质数，才是正道。  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>质数m 仅有 <code>m * 1</code> 这一种的组合方法，可以认为没有正常组合法。<br>而 <code>称法 *</code> 可以理解为 <code>加法 +</code> 的快捷记号。<br>例如：<code>2 * 3</code> 为 <code>2 + 2 + 2</code> 的 快捷记号。<br><code>6</code>有 <code>2 * 3</code> 和 <code>6 * 1</code> 两种 组合法，可以认为有一种正常的组合法。</p>\n<p>一个<code>正整数</code>如果有了正常的组合法，就有了分解成<code>并行</code>处理<code>更小的正整数</code>的方法。<br>没有的话，只能单线程处理，或者说是最原始的暴力解法。<br>即使都有<code>并行</code>处理，<code>4 * 4</code> 的<code>并行</code>处理应该比<code>2 * 7</code>这种更优。（完全瞎猜    </p>\n<p>我猜想质数类似于<code>两点之间的最短距离</code>之类的解。<br>思考如何组合质数不太靠谱，<br>转而思考如何分解正整数，然后发现质数，才是正道。  </p>\n"},{"title":"推粪球","date":"2021-02-23T02:06:27.000Z","_content":"\n`插入排序`可以理解成屎壳郎`推粪球`。\n\n一个从小到大排序的 有序数据集Arr ，当成`小山坡`。  \n待插入的 数据n ，当成`粪球`。   \n比较 n 和 Arr 里面元素的大小如同`推粪球`。   \n遇到 Arr 里面`比较小`的数据就继续往上推。   \n遇到 Arr 里面`大于等于`的数据就停在前面。   \n\n但这里有个问题，无论 Arr 的实现是`数组`还是`单向链表`，`插入`的动作都太难实现。\n\n为了方便插入，通常都是反向操作：从后向前比较，遇到第一个`小于等于`的元素就停在他后面。   \n如果Arr是`数组`实现的，从后向前比较时，大的元素已经后移了。   \n如果Arr是`单向链表`实现的，从后向前比较时，可以直接拿到后面的指针。   \n","source":"_posts/推粪球.md","raw":"---\ntitle: 推粪球\ndate: 2021-02-23 10:06:27\ntags:\n---\n\n`插入排序`可以理解成屎壳郎`推粪球`。\n\n一个从小到大排序的 有序数据集Arr ，当成`小山坡`。  \n待插入的 数据n ，当成`粪球`。   \n比较 n 和 Arr 里面元素的大小如同`推粪球`。   \n遇到 Arr 里面`比较小`的数据就继续往上推。   \n遇到 Arr 里面`大于等于`的数据就停在前面。   \n\n但这里有个问题，无论 Arr 的实现是`数组`还是`单向链表`，`插入`的动作都太难实现。\n\n为了方便插入，通常都是反向操作：从后向前比较，遇到第一个`小于等于`的元素就停在他后面。   \n如果Arr是`数组`实现的，从后向前比较时，大的元素已经后移了。   \n如果Arr是`单向链表`实现的，从后向前比较时，可以直接拿到后面的指针。   \n","slug":"推粪球","published":1,"updated":"2021-02-23T08:10:39.317Z","_id":"cklhdqmzn00000to8fj412zpp","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>插入排序</code>可以理解成屎壳郎<code>推粪球</code>。</p>\n<p>一个从小到大排序的 有序数据集Arr ，当成<code>小山坡</code>。<br>待插入的 数据n ，当成<code>粪球</code>。<br>比较 n 和 Arr 里面元素的大小如同<code>推粪球</code>。<br>遇到 Arr 里面<code>比较小</code>的数据就继续往上推。<br>遇到 Arr 里面<code>大于等于</code>的数据就停在前面。   </p>\n<p>但这里有个问题，无论 Arr 的实现是<code>数组</code>还是<code>单向链表</code>，<code>插入</code>的动作都太难实现。</p>\n<p>为了方便插入，通常都是反向操作：从后向前比较，遇到第一个<code>小于等于</code>的元素就停在他后面。<br>如果Arr是<code>数组</code>实现的，从后向前比较时，大的元素已经后移了。<br>如果Arr是<code>单向链表</code>实现的，从后向前比较时，可以直接拿到后面的指针。   </p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>插入排序</code>可以理解成屎壳郎<code>推粪球</code>。</p>\n<p>一个从小到大排序的 有序数据集Arr ，当成<code>小山坡</code>。<br>待插入的 数据n ，当成<code>粪球</code>。<br>比较 n 和 Arr 里面元素的大小如同<code>推粪球</code>。<br>遇到 Arr 里面<code>比较小</code>的数据就继续往上推。<br>遇到 Arr 里面<code>大于等于</code>的数据就停在前面。   </p>\n<p>但这里有个问题，无论 Arr 的实现是<code>数组</code>还是<code>单向链表</code>，<code>插入</code>的动作都太难实现。</p>\n<p>为了方便插入，通常都是反向操作：从后向前比较，遇到第一个<code>小于等于</code>的元素就停在他后面。<br>如果Arr是<code>数组</code>实现的，从后向前比较时，大的元素已经后移了。<br>如果Arr是<code>单向链表</code>实现的，从后向前比较时，可以直接拿到后面的指针。   </p>\n"},{"title":"小型排序和大型排序","date":"2021-02-23T03:41:25.000Z","_content":"`小型排序`就三种`选择`，`冒泡`，`插入`。   \n排序过程中分为 UnSortArr 和 SortedArr 两部分。  \n其中：  \n`选择` 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)。   \n`冒泡` 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)，但在 UnSortArr 做了排序交换。  \n`插入` 在操作 SortedArr 的时间是 O(n) ，在操作 UnSortArr 的时间是 O(1)。  \n\n`大型排序`都是先将大数据分解成小数据，再用`小型排序`来处理小数据，多数是用`插入`。  \n因为：  \n`大型排序`可以控制 SortedArr 为最终排序顺序，即时间为 O(1)。   \n`小型排序`用`插入`来控制 UnSortArr 的时间为 O(1)。  \n\n","source":"_posts/小型排序和大型排序.md","raw":"---\ntitle: 小型排序和大型排序\ndate: 2021-02-23 11:41:25\ntags:\n---\n`小型排序`就三种`选择`，`冒泡`，`插入`。   \n排序过程中分为 UnSortArr 和 SortedArr 两部分。  \n其中：  \n`选择` 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)。   \n`冒泡` 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)，但在 UnSortArr 做了排序交换。  \n`插入` 在操作 SortedArr 的时间是 O(n) ，在操作 UnSortArr 的时间是 O(1)。  \n\n`大型排序`都是先将大数据分解成小数据，再用`小型排序`来处理小数据，多数是用`插入`。  \n因为：  \n`大型排序`可以控制 SortedArr 为最终排序顺序，即时间为 O(1)。   \n`小型排序`用`插入`来控制 UnSortArr 的时间为 O(1)。  \n\n","slug":"小型排序和大型排序","published":1,"updated":"2021-02-23T07:52:58.042Z","_id":"cklhhgyaz00006xo810xle58f","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>小型排序</code>就三种<code>选择</code>，<code>冒泡</code>，<code>插入</code>。<br>排序过程中分为 UnSortArr 和 SortedArr 两部分。<br>其中：<br><code>选择</code> 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)。<br><code>冒泡</code> 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)，但在 UnSortArr 做了排序交换。<br><code>插入</code> 在操作 SortedArr 的时间是 O(n) ，在操作 UnSortArr 的时间是 O(1)。  </p>\n<p><code>大型排序</code>都是先将大数据分解成小数据，再用<code>小型排序</code>来处理小数据，多数是用<code>插入</code>。<br>因为：<br><code>大型排序</code>可以控制 SortedArr 为最终排序顺序，即时间为 O(1)。<br><code>小型排序</code>用<code>插入</code>来控制 UnSortArr 的时间为 O(1)。  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>小型排序</code>就三种<code>选择</code>，<code>冒泡</code>，<code>插入</code>。<br>排序过程中分为 UnSortArr 和 SortedArr 两部分。<br>其中：<br><code>选择</code> 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)。<br><code>冒泡</code> 在操作 SortedArr 的时间是 O(1) ，在操作 UnSortArr 的时间是 O(n)，但在 UnSortArr 做了排序交换。<br><code>插入</code> 在操作 SortedArr 的时间是 O(n) ，在操作 UnSortArr 的时间是 O(1)。  </p>\n<p><code>大型排序</code>都是先将大数据分解成小数据，再用<code>小型排序</code>来处理小数据，多数是用<code>插入</code>。<br>因为：<br><code>大型排序</code>可以控制 SortedArr 为最终排序顺序，即时间为 O(1)。<br><code>小型排序</code>用<code>插入</code>来控制 UnSortArr 的时间为 O(1)。  </p>\n"},{"title":"只做表面工作的堆","date":"2021-02-23T09:09:09.000Z","_content":"\n看了堆的资料，这个介绍的不错：\n[最大堆（创建、删除、插入和堆排序）](https://www.jianshu.com/p/21bef3fc3030)\n\n`完全二叉树`是每层`排满`才往下一层排数据。[相关判断题](https://www.nowcoder.com/questionTerminal/2d073c6f03f246878df159a1217ead07?toCommentId=3151655)  \n`最大堆`选择`完全二叉树`结构的好处是，在每次 插入/删除 新元素时，防止二叉树退化成`链表`，充分用到二叉树`快速查找`的优点。\n\n其他的排序不但将最大元素放到头部，其他小元素也都严格排序站好了队。\n\n`最大堆`在排序时，每次把一个元素排进`完全二叉树`最后一位，并立即做比较，使当前分支中的最大元素`上浮`到了节点，根节点总是最大元素。  \n\n删除`最大堆`的根节点后，把最后一位元素放到根节点，然后重新排序。   \n虽然多了重新排序的动作，但他可以`快速查找`，使得成本也降到最小。    \n\n总结一点就是：排序做到了刚刚好，不多浪费一步（选择`完全二叉树`结构是关键）。  \n","source":"_posts/只做表面工作的堆.md","raw":"---\ntitle: 只做表面工作的堆\ndate: 2021-02-23 17:09:09\ntags:\n---\n\n看了堆的资料，这个介绍的不错：\n[最大堆（创建、删除、插入和堆排序）](https://www.jianshu.com/p/21bef3fc3030)\n\n`完全二叉树`是每层`排满`才往下一层排数据。[相关判断题](https://www.nowcoder.com/questionTerminal/2d073c6f03f246878df159a1217ead07?toCommentId=3151655)  \n`最大堆`选择`完全二叉树`结构的好处是，在每次 插入/删除 新元素时，防止二叉树退化成`链表`，充分用到二叉树`快速查找`的优点。\n\n其他的排序不但将最大元素放到头部，其他小元素也都严格排序站好了队。\n\n`最大堆`在排序时，每次把一个元素排进`完全二叉树`最后一位，并立即做比较，使当前分支中的最大元素`上浮`到了节点，根节点总是最大元素。  \n\n删除`最大堆`的根节点后，把最后一位元素放到根节点，然后重新排序。   \n虽然多了重新排序的动作，但他可以`快速查找`，使得成本也降到最小。    \n\n总结一点就是：排序做到了刚刚好，不多浪费一步（选择`完全二叉树`结构是关键）。  \n","slug":"只做表面工作的堆","published":1,"updated":"2021-02-23T09:51:46.057Z","_id":"cklhtkze000006ro88eqth0z2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看了堆的资料，这个介绍的不错：<br><a href=\"https://www.jianshu.com/p/21bef3fc3030\">最大堆（创建、删除、插入和堆排序）</a></p>\n<p><code>完全二叉树</code>是每层<code>排满</code>才往下一层排数据。<a href=\"https://www.nowcoder.com/questionTerminal/2d073c6f03f246878df159a1217ead07?toCommentId=3151655\">相关判断题</a><br><code>最大堆</code>选择<code>完全二叉树</code>结构的好处是，在每次 插入/删除 新元素时，防止二叉树退化成<code>链表</code>，充分用到二叉树<code>快速查找</code>的优点。</p>\n<p>其他的排序不但将最大元素放到头部，其他小元素也都严格排序站好了队。</p>\n<p><code>最大堆</code>在排序时，每次把一个元素排进<code>完全二叉树</code>最后一位，并立即做比较，使当前分支中的最大元素<code>上浮</code>到了节点，根节点总是最大元素。  </p>\n<p>删除<code>最大堆</code>的根节点后，把最后一位元素放到根节点，然后重新排序。<br>虽然多了重新排序的动作，但他可以<code>快速查找</code>，使得成本也降到最小。    </p>\n<p>总结一点就是：排序做到了刚刚好，不多浪费一步（选择<code>完全二叉树</code>结构是关键）。  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>看了堆的资料，这个介绍的不错：<br><a href=\"https://www.jianshu.com/p/21bef3fc3030\">最大堆（创建、删除、插入和堆排序）</a></p>\n<p><code>完全二叉树</code>是每层<code>排满</code>才往下一层排数据。<a href=\"https://www.nowcoder.com/questionTerminal/2d073c6f03f246878df159a1217ead07?toCommentId=3151655\">相关判断题</a><br><code>最大堆</code>选择<code>完全二叉树</code>结构的好处是，在每次 插入/删除 新元素时，防止二叉树退化成<code>链表</code>，充分用到二叉树<code>快速查找</code>的优点。</p>\n<p>其他的排序不但将最大元素放到头部，其他小元素也都严格排序站好了队。</p>\n<p><code>最大堆</code>在排序时，每次把一个元素排进<code>完全二叉树</code>最后一位，并立即做比较，使当前分支中的最大元素<code>上浮</code>到了节点，根节点总是最大元素。  </p>\n<p>删除<code>最大堆</code>的根节点后，把最后一位元素放到根节点，然后重新排序。<br>虽然多了重新排序的动作，但他可以<code>快速查找</code>，使得成本也降到最小。    </p>\n<p>总结一点就是：排序做到了刚刚好，不多浪费一步（选择<code>完全二叉树</code>结构是关键）。  </p>\n"},{"title":"高数苦海的救命稻草","date":"2021-02-25T03:28:50.000Z","_content":"[积分入门](https://www.shuxuele.com/calculus/integration-introduction.html)    \n函数 f(x) 求 `瞬时的变化`，把f(x)当`原函数`，求`导函数`f'(x) ，用 [导数法则](https://www.shuxuele.com/calculus/derivatives-rules.html)    \n函数 f(x) 求 `变化的累积`，把f(x)当`导函数`，求`原函数`，用 [积分法则](https://www.shuxuele.com/calculus/integration-rules.html)  \n\n`原函数`和`导函数` 的转化关系，就是`微积分`。\n","source":"_posts/高数苦海的救命稻草.md","raw":"---\ntitle: 高数苦海的救命稻草\ndate: 2021-02-25 11:28:50\ntags:\n---\n[积分入门](https://www.shuxuele.com/calculus/integration-introduction.html)    \n函数 f(x) 求 `瞬时的变化`，把f(x)当`原函数`，求`导函数`f'(x) ，用 [导数法则](https://www.shuxuele.com/calculus/derivatives-rules.html)    \n函数 f(x) 求 `变化的累积`，把f(x)当`导函数`，求`原函数`，用 [积分法则](https://www.shuxuele.com/calculus/integration-rules.html)  \n\n`原函数`和`导函数` 的转化关系，就是`微积分`。\n","slug":"高数苦海的救命稻草","published":1,"updated":"2021-02-25T03:35:19.389Z","_id":"cklkb8i2s0000gno81iq547ub","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.shuxuele.com/calculus/integration-introduction.html\">积分入门</a><br>函数 f(x) 求 <code>瞬时的变化</code>，把f(x)当<code>原函数</code>，求<code>导函数</code>f’(x) ，用 <a href=\"https://www.shuxuele.com/calculus/derivatives-rules.html\">导数法则</a><br>函数 f(x) 求 <code>变化的累积</code>，把f(x)当<code>导函数</code>，求<code>原函数</code>，用 <a href=\"https://www.shuxuele.com/calculus/integration-rules.html\">积分法则</a>  </p>\n<p><code>原函数</code>和<code>导函数</code> 的转化关系，就是<code>微积分</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.shuxuele.com/calculus/integration-introduction.html\">积分入门</a><br>函数 f(x) 求 <code>瞬时的变化</code>，把f(x)当<code>原函数</code>，求<code>导函数</code>f’(x) ，用 <a href=\"https://www.shuxuele.com/calculus/derivatives-rules.html\">导数法则</a><br>函数 f(x) 求 <code>变化的累积</code>，把f(x)当<code>导函数</code>，求<code>原函数</code>，用 <a href=\"https://www.shuxuele.com/calculus/integration-rules.html\">积分法则</a>  </p>\n<p><code>原函数</code>和<code>导函数</code> 的转化关系，就是<code>微积分</code>。</p>\n"},{"title":"为了封装变化","date":"2021-03-01T09:50:03.000Z","_content":"### 初级抽象\n\n当我们开始用`面向对象`的方式去`重构`一段`面向过程`的代码时\n\n最开始：   \n`重构`成`一个类`，`公共变量`成为`私有属性`，`公共方法`控制`主逻辑`（`主方法`），`私有方法`封装`变化`（`助手方法`）。   \n\n执行的时候，用`这个类`实例化一个`对象`，然后执行这个对象的`主方法`。  \n\n当`助手方法`越来越独立：   \n比如，它在调用自己的`助手方法`，这一套方法有自己的`公共属性`时，就需要把这一套方法和属性分出来成为`新类`。   \n最开始的类是`客户类`，新分出来的是`服务类`。  \n当`客户类`需要多个服务时，就会有多个`服务类`。  \n\n执行的时候，用`客户类`实例化一个`客户对象`，传入它需要的`服务类`的对象，然后执行这个`客户对象`的`主方法`。\n\n`服务类`应对变化：   \n如果`需求`变化了，最好是仅修改`服务类`对象。   \n\n执行的时候，用客户类实例化一个`客户对象`，传入`新服务类`对象，而`新服务类`包含了绝大部分的变化。  \n\n`客户类`应对变化：  \n`客户类`应该提前把需要的`服务类`抽象成通用的父类，比如`抽象类`、`接口interface`，这样在接收`新对象`时就不用修改`类型限制`。  \n这些`类型限制`的目的是想保证新对象的`方法`不变，其实`类型限制`最好改成`接口interface`。  \n\n执行的时候，用客户类实例化一个客户对象，传入实现了同样`接口interface`的`新服务类`对象，然后执行这个`客户对象`的`主方法`。  \n\n\n总结：  \n只需要一个类 ---> 客户类 需要 服务类 ---> 客户类 需要 实现同样接口的服务类\n\n### 结构型模式\n\n1.代理模式：（用旧方法名复用旧方法，外部）\n`客户类`原先调用的`实现了某interface的服务类`对象的方法，需要在该方法前后增加一些处理工作。   \n(这些新增的工作也可以在`客户类`内部做的，但这不符合`最小修改`，应该只修改是服务类)   \n新写一个`实现了同样interface的服务类`做了这些新增的处理工作，而方法名不变，就把它当`第一服务类`。\n\n2.装饰模式：（用旧方法名复用旧方法，内部）\n和`代理模式`类似，是`客户类`内部 主动实例化`装饰对象`（实例化时传入`旧对象`），让它成为增强版的`旧对象`，后续调用`装饰对象`的`旧方法名`。\n在`客户类`内部实例化是为了`按需选择`不同的装饰对象\n\n3.适配器模式：（用新方法名复用旧方法）    \n`客户类`需要`实现适配器interface的服务类`，这个类的方法适配了其他`已有的服务类`的方法，两者方法名不同。   \n与`外观模式`比，`客户类`调用的方法不变。\n \n4.外观模式：（用新方法名复用一堆旧方法逻辑）    \n`一套复杂的子服务类`被`第一服务类`管理，`客户类`只需知道第一服务类可能解决这个需求就行了。   \n通常是已经存在了`一套复杂的子服务类`，如何理清它们的关系太困难。就写一个`第一服务类`来简化`客户类`的调用。   \n与`适配器模式`比，`客户类`调用新方法。\n\n5.桥接模式：（一个多变的新对象）  \n`组合优于继承`的经典例子\n`实现了某interface的第二服务类`的各方法独立且多变，每种变化都写单独一个类的话，类的数量会爆炸，\n写一套`包含单独方法的interface`，`第二服务类`的方法去引用这些单独实现的方法。\n`第一服务类`生成了`实现了某interface的第二服务类`的对象，并返回给`客户类`，`客户类`直接操作`第二服务类`。  \n\n6.组合模式：（一群同类对象，嵌套）\n`实现了某interface的服务类`，可能有多个。   \n有一个是`大哥A`，`大哥A`通过容器管理弟弟妹妹，弟弟妹妹里也可能有一个`大哥AA`，`大哥AA`通过容器也管理一批弟弟妹妹，可以如此循环。   \n客户类需要`大哥A`。   \n\n7.享元模式：（一群同类对象，少内存占用） \n由于系统中存在太多类似的`第一服务类`对象，就通过`内存共享`减少`第一服务类`对象的内存占用，   \n这些`第一服务类`把内部通用的属性和方法移到某一个专门的单例`享元类`，有一个单例工厂，专门生产这些单例。\n`客户类`只需知道调用`第一服务类`就行了。\n`组合模式`就有很多类似的`服务类`，可用`享元模式`来减少内存占用。\n\n### 行为型模式\nB干的事如下： 自己状态的管理，管理A的状态，传递A的消息，传给A的消息，辅助A处理C，\n\n1.模板方法模式：（特殊的继承套路）\n在普通的继承中，父类留出要重写的方法，保留 如何调用这些方法 的`主方法`，final。\n子类接着重写这些方法，`客户类`调用子类对象的`主方法`。\n\n2.状态模式：（A控制B，C是B的状态，A不知道）\n`上下文类`保存了`Status interface`的多个对象，并设置其中一个对象为内部的 当前 `Status类`对象变量，\n这些`对象`可以通过`上下文类`对象的`change方法`，来改变`上下文类`对象内部的 当前 `Status类`对象变量。   \n是的，这些 `Status类`对象 彼此都知道对方的存在。\n`客户类`通过`上下文类`间接调用其中的当前`Status类`对象变量，  \n`Status类`会通知`上下文类`要切换别的`Status类`，而`客户类`并不知道。\n\n3.策略模式：（A控制B，也控制B的状态C）\n和`状态模式`不同的是`客户类`会通过`上下文类`主动切换 当前`策略类对象`，\n这些 `策略类`对象 并不知道彼此。\n\n4.备忘录模式：（A控制B操作`A生成的C`，B是C的容器）\n`客户类`调用`第一服务类`。\n`第一服务类`会在每次属性发生变化时，把`要发生变化的属性`保存到新的`备忘类`对象，\n并把该`备忘类`对象，传给`备忘容器类`对象保存（备忘类和备忘容器类 的关系 是`组合模式`里的哥哥管理弟弟妹妹）。\n`备忘容器类`对象内部是按`栈`的方式保存传来的`对象`，方便`第一服务类`对象随时取回。\n\n5.观察者模式：（A控制B操作C，B是单向传递消息，C是多个对象）\n`客户类`调用`发布者类`对象。\n`发布者类`内部有`消息通知interface`容器，会按`主题`分成几个容器。\n实现了`消息通知interface`类的对象，会向`发布者类`对象注册想订阅的`主题`，\n`发布者类`对象将这些`订阅者`保存到不同`主题`的容器内。\n`发布者类`对象会把`客户类`对象传来的消息按不同的主题依次通知到各个`订阅者`。\n当某个`订阅者`通过`客户类`对象传递同一`主题`的消息时，会有死循环风险。\n\n6.中介者模式：（A控制B操作C，B是双向中介，C是多个对象）\n`组件interface`和`中介interface`会双向调用。\n有一个`中介实现类`，管理多个`组件实现类`。\n`中介类`和`主件类`之间有耦合，`组件类`之间没有耦合。\n`中介类`和`客户类`的沟通是双向的，和`组件类`沟通也是双向的。\n\n7.迭代器模式：（A控制B操作C，B是迭代器，C是容器）\n`客户类`会调用`实现了某interface`的`容器服务类B`，并迭代该容器内的元素。\n通常`容器服务器B`会自带可以迭代自身的`迭代服务类A`，这样的话`客户类`调用`B类对象`的迭代方法就够了。\n`客户类`也可以指定`实现了某interface`的`迭代服务器A`给`容器服务类B`。\n\n8.责任链模式：（A控制B操作C，B是`操作对象容器`） \n和`组合模式`类似，但没有嵌套，且`大哥A`会把包含弟弟妹妹的容器交给`客户类`，让`客户类`自主控制执行，不一定全部都执行。  \n\n9.命令模式：（A控制B操作C，B是流程控制，C是在干活）\n`组合优于继承`的另一个经典例子。\n`客户类`往`实现了命令interface的第一服务类`B对象传入`实现了接收interface的第二服务类`C对象（可能多个`C对象`），\n`B对象`会调用`C对象`的方法（控制调用过程，可能调用多个方法，`C对象`是真正干活的服务对象）。\n\n10.访问者模式：（A控制B操作C，C是数据表，B是`一群操作对象`）\n`实现了访问者interface`的类作为`访问者`，被`客户类`传入`数据表对象`的`欢迎访问方法`。\n`继承某抽象类`的 `子类` 作为数据表，有`欢迎访问方法`接收`访问者`，并主动调用`访问者`的`操作数据方法`，来操作该`数据表`的数据。\n（数据表对象 被动等待 访问者 ，再把 本对象 传给 访问者）\n`客户类`让每个`访问者`都去`数据表容器类`中遍历操作`数据表`的数据。\n`数据表类`不应该频繁变动`属性`，因为每次变动，`访问者`也要跟着修改`操作方法`。\n\n\n\n\n\n\n\n","source":"_posts/为了封装变化.md","raw":"---\ntitle: 为了封装变化\ndate: 2021-03-01 17:50:03\ntags:\n---\n### 初级抽象\n\n当我们开始用`面向对象`的方式去`重构`一段`面向过程`的代码时\n\n最开始：   \n`重构`成`一个类`，`公共变量`成为`私有属性`，`公共方法`控制`主逻辑`（`主方法`），`私有方法`封装`变化`（`助手方法`）。   \n\n执行的时候，用`这个类`实例化一个`对象`，然后执行这个对象的`主方法`。  \n\n当`助手方法`越来越独立：   \n比如，它在调用自己的`助手方法`，这一套方法有自己的`公共属性`时，就需要把这一套方法和属性分出来成为`新类`。   \n最开始的类是`客户类`，新分出来的是`服务类`。  \n当`客户类`需要多个服务时，就会有多个`服务类`。  \n\n执行的时候，用`客户类`实例化一个`客户对象`，传入它需要的`服务类`的对象，然后执行这个`客户对象`的`主方法`。\n\n`服务类`应对变化：   \n如果`需求`变化了，最好是仅修改`服务类`对象。   \n\n执行的时候，用客户类实例化一个`客户对象`，传入`新服务类`对象，而`新服务类`包含了绝大部分的变化。  \n\n`客户类`应对变化：  \n`客户类`应该提前把需要的`服务类`抽象成通用的父类，比如`抽象类`、`接口interface`，这样在接收`新对象`时就不用修改`类型限制`。  \n这些`类型限制`的目的是想保证新对象的`方法`不变，其实`类型限制`最好改成`接口interface`。  \n\n执行的时候，用客户类实例化一个客户对象，传入实现了同样`接口interface`的`新服务类`对象，然后执行这个`客户对象`的`主方法`。  \n\n\n总结：  \n只需要一个类 ---> 客户类 需要 服务类 ---> 客户类 需要 实现同样接口的服务类\n\n### 结构型模式\n\n1.代理模式：（用旧方法名复用旧方法，外部）\n`客户类`原先调用的`实现了某interface的服务类`对象的方法，需要在该方法前后增加一些处理工作。   \n(这些新增的工作也可以在`客户类`内部做的，但这不符合`最小修改`，应该只修改是服务类)   \n新写一个`实现了同样interface的服务类`做了这些新增的处理工作，而方法名不变，就把它当`第一服务类`。\n\n2.装饰模式：（用旧方法名复用旧方法，内部）\n和`代理模式`类似，是`客户类`内部 主动实例化`装饰对象`（实例化时传入`旧对象`），让它成为增强版的`旧对象`，后续调用`装饰对象`的`旧方法名`。\n在`客户类`内部实例化是为了`按需选择`不同的装饰对象\n\n3.适配器模式：（用新方法名复用旧方法）    \n`客户类`需要`实现适配器interface的服务类`，这个类的方法适配了其他`已有的服务类`的方法，两者方法名不同。   \n与`外观模式`比，`客户类`调用的方法不变。\n \n4.外观模式：（用新方法名复用一堆旧方法逻辑）    \n`一套复杂的子服务类`被`第一服务类`管理，`客户类`只需知道第一服务类可能解决这个需求就行了。   \n通常是已经存在了`一套复杂的子服务类`，如何理清它们的关系太困难。就写一个`第一服务类`来简化`客户类`的调用。   \n与`适配器模式`比，`客户类`调用新方法。\n\n5.桥接模式：（一个多变的新对象）  \n`组合优于继承`的经典例子\n`实现了某interface的第二服务类`的各方法独立且多变，每种变化都写单独一个类的话，类的数量会爆炸，\n写一套`包含单独方法的interface`，`第二服务类`的方法去引用这些单独实现的方法。\n`第一服务类`生成了`实现了某interface的第二服务类`的对象，并返回给`客户类`，`客户类`直接操作`第二服务类`。  \n\n6.组合模式：（一群同类对象，嵌套）\n`实现了某interface的服务类`，可能有多个。   \n有一个是`大哥A`，`大哥A`通过容器管理弟弟妹妹，弟弟妹妹里也可能有一个`大哥AA`，`大哥AA`通过容器也管理一批弟弟妹妹，可以如此循环。   \n客户类需要`大哥A`。   \n\n7.享元模式：（一群同类对象，少内存占用） \n由于系统中存在太多类似的`第一服务类`对象，就通过`内存共享`减少`第一服务类`对象的内存占用，   \n这些`第一服务类`把内部通用的属性和方法移到某一个专门的单例`享元类`，有一个单例工厂，专门生产这些单例。\n`客户类`只需知道调用`第一服务类`就行了。\n`组合模式`就有很多类似的`服务类`，可用`享元模式`来减少内存占用。\n\n### 行为型模式\nB干的事如下： 自己状态的管理，管理A的状态，传递A的消息，传给A的消息，辅助A处理C，\n\n1.模板方法模式：（特殊的继承套路）\n在普通的继承中，父类留出要重写的方法，保留 如何调用这些方法 的`主方法`，final。\n子类接着重写这些方法，`客户类`调用子类对象的`主方法`。\n\n2.状态模式：（A控制B，C是B的状态，A不知道）\n`上下文类`保存了`Status interface`的多个对象，并设置其中一个对象为内部的 当前 `Status类`对象变量，\n这些`对象`可以通过`上下文类`对象的`change方法`，来改变`上下文类`对象内部的 当前 `Status类`对象变量。   \n是的，这些 `Status类`对象 彼此都知道对方的存在。\n`客户类`通过`上下文类`间接调用其中的当前`Status类`对象变量，  \n`Status类`会通知`上下文类`要切换别的`Status类`，而`客户类`并不知道。\n\n3.策略模式：（A控制B，也控制B的状态C）\n和`状态模式`不同的是`客户类`会通过`上下文类`主动切换 当前`策略类对象`，\n这些 `策略类`对象 并不知道彼此。\n\n4.备忘录模式：（A控制B操作`A生成的C`，B是C的容器）\n`客户类`调用`第一服务类`。\n`第一服务类`会在每次属性发生变化时，把`要发生变化的属性`保存到新的`备忘类`对象，\n并把该`备忘类`对象，传给`备忘容器类`对象保存（备忘类和备忘容器类 的关系 是`组合模式`里的哥哥管理弟弟妹妹）。\n`备忘容器类`对象内部是按`栈`的方式保存传来的`对象`，方便`第一服务类`对象随时取回。\n\n5.观察者模式：（A控制B操作C，B是单向传递消息，C是多个对象）\n`客户类`调用`发布者类`对象。\n`发布者类`内部有`消息通知interface`容器，会按`主题`分成几个容器。\n实现了`消息通知interface`类的对象，会向`发布者类`对象注册想订阅的`主题`，\n`发布者类`对象将这些`订阅者`保存到不同`主题`的容器内。\n`发布者类`对象会把`客户类`对象传来的消息按不同的主题依次通知到各个`订阅者`。\n当某个`订阅者`通过`客户类`对象传递同一`主题`的消息时，会有死循环风险。\n\n6.中介者模式：（A控制B操作C，B是双向中介，C是多个对象）\n`组件interface`和`中介interface`会双向调用。\n有一个`中介实现类`，管理多个`组件实现类`。\n`中介类`和`主件类`之间有耦合，`组件类`之间没有耦合。\n`中介类`和`客户类`的沟通是双向的，和`组件类`沟通也是双向的。\n\n7.迭代器模式：（A控制B操作C，B是迭代器，C是容器）\n`客户类`会调用`实现了某interface`的`容器服务类B`，并迭代该容器内的元素。\n通常`容器服务器B`会自带可以迭代自身的`迭代服务类A`，这样的话`客户类`调用`B类对象`的迭代方法就够了。\n`客户类`也可以指定`实现了某interface`的`迭代服务器A`给`容器服务类B`。\n\n8.责任链模式：（A控制B操作C，B是`操作对象容器`） \n和`组合模式`类似，但没有嵌套，且`大哥A`会把包含弟弟妹妹的容器交给`客户类`，让`客户类`自主控制执行，不一定全部都执行。  \n\n9.命令模式：（A控制B操作C，B是流程控制，C是在干活）\n`组合优于继承`的另一个经典例子。\n`客户类`往`实现了命令interface的第一服务类`B对象传入`实现了接收interface的第二服务类`C对象（可能多个`C对象`），\n`B对象`会调用`C对象`的方法（控制调用过程，可能调用多个方法，`C对象`是真正干活的服务对象）。\n\n10.访问者模式：（A控制B操作C，C是数据表，B是`一群操作对象`）\n`实现了访问者interface`的类作为`访问者`，被`客户类`传入`数据表对象`的`欢迎访问方法`。\n`继承某抽象类`的 `子类` 作为数据表，有`欢迎访问方法`接收`访问者`，并主动调用`访问者`的`操作数据方法`，来操作该`数据表`的数据。\n（数据表对象 被动等待 访问者 ，再把 本对象 传给 访问者）\n`客户类`让每个`访问者`都去`数据表容器类`中遍历操作`数据表`的数据。\n`数据表类`不应该频繁变动`属性`，因为每次变动，`访问者`也要跟着修改`操作方法`。\n\n\n\n\n\n\n\n","slug":"为了封装变化","published":1,"updated":"2021-03-03T07:20:36.899Z","_id":"cklrf8boz0000qwo8bnbn7h7t","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"初级抽象\"><a href=\"#初级抽象\" class=\"headerlink\" title=\"初级抽象\"></a>初级抽象</h3><p>当我们开始用<code>面向对象</code>的方式去<code>重构</code>一段<code>面向过程</code>的代码时</p>\n<p>最开始：<br><code>重构</code>成<code>一个类</code>，<code>公共变量</code>成为<code>私有属性</code>，<code>公共方法</code>控制<code>主逻辑</code>（<code>主方法</code>），<code>私有方法</code>封装<code>变化</code>（<code>助手方法</code>）。   </p>\n<p>执行的时候，用<code>这个类</code>实例化一个<code>对象</code>，然后执行这个对象的<code>主方法</code>。  </p>\n<p>当<code>助手方法</code>越来越独立：<br>比如，它在调用自己的<code>助手方法</code>，这一套方法有自己的<code>公共属性</code>时，就需要把这一套方法和属性分出来成为<code>新类</code>。<br>最开始的类是<code>客户类</code>，新分出来的是<code>服务类</code>。<br>当<code>客户类</code>需要多个服务时，就会有多个<code>服务类</code>。  </p>\n<p>执行的时候，用<code>客户类</code>实例化一个<code>客户对象</code>，传入它需要的<code>服务类</code>的对象，然后执行这个<code>客户对象</code>的<code>主方法</code>。</p>\n<p><code>服务类</code>应对变化：<br>如果<code>需求</code>变化了，最好是仅修改<code>服务类</code>对象。   </p>\n<p>执行的时候，用客户类实例化一个<code>客户对象</code>，传入<code>新服务类</code>对象，而<code>新服务类</code>包含了绝大部分的变化。  </p>\n<p><code>客户类</code>应对变化：<br><code>客户类</code>应该提前把需要的<code>服务类</code>抽象成通用的父类，比如<code>抽象类</code>、<code>接口interface</code>，这样在接收<code>新对象</code>时就不用修改<code>类型限制</code>。<br>这些<code>类型限制</code>的目的是想保证新对象的<code>方法</code>不变，其实<code>类型限制</code>最好改成<code>接口interface</code>。  </p>\n<p>执行的时候，用客户类实例化一个客户对象，传入实现了同样<code>接口interface</code>的<code>新服务类</code>对象，然后执行这个<code>客户对象</code>的<code>主方法</code>。  </p>\n<p>总结：<br>只需要一个类 —&gt; 客户类 需要 服务类 —&gt; 客户类 需要 实现同样接口的服务类</p>\n<h3 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h3><p>1.代理模式：（用旧方法名复用旧方法，外部）<br><code>客户类</code>原先调用的<code>实现了某interface的服务类</code>对象的方法，需要在该方法前后增加一些处理工作。<br>(这些新增的工作也可以在<code>客户类</code>内部做的，但这不符合<code>最小修改</code>，应该只修改是服务类)<br>新写一个<code>实现了同样interface的服务类</code>做了这些新增的处理工作，而方法名不变，就把它当<code>第一服务类</code>。</p>\n<p>2.装饰模式：（用旧方法名复用旧方法，内部）<br>和<code>代理模式</code>类似，是<code>客户类</code>内部 主动实例化<code>装饰对象</code>（实例化时传入<code>旧对象</code>），让它成为增强版的<code>旧对象</code>，后续调用<code>装饰对象</code>的<code>旧方法名</code>。<br>在<code>客户类</code>内部实例化是为了<code>按需选择</code>不同的装饰对象</p>\n<p>3.适配器模式：（用新方法名复用旧方法）<br><code>客户类</code>需要<code>实现适配器interface的服务类</code>，这个类的方法适配了其他<code>已有的服务类</code>的方法，两者方法名不同。<br>与<code>外观模式</code>比，<code>客户类</code>调用的方法不变。</p>\n<p>4.外观模式：（用新方法名复用一堆旧方法逻辑）<br><code>一套复杂的子服务类</code>被<code>第一服务类</code>管理，<code>客户类</code>只需知道第一服务类可能解决这个需求就行了。<br>通常是已经存在了<code>一套复杂的子服务类</code>，如何理清它们的关系太困难。就写一个<code>第一服务类</code>来简化<code>客户类</code>的调用。<br>与<code>适配器模式</code>比，<code>客户类</code>调用新方法。</p>\n<p>5.桥接模式：（一个多变的新对象）<br><code>组合优于继承</code>的经典例子<br><code>实现了某interface的第二服务类</code>的各方法独立且多变，每种变化都写单独一个类的话，类的数量会爆炸，<br>写一套<code>包含单独方法的interface</code>，<code>第二服务类</code>的方法去引用这些单独实现的方法。<br><code>第一服务类</code>生成了<code>实现了某interface的第二服务类</code>的对象，并返回给<code>客户类</code>，<code>客户类</code>直接操作<code>第二服务类</code>。  </p>\n<p>6.组合模式：（一群同类对象，嵌套）<br><code>实现了某interface的服务类</code>，可能有多个。<br>有一个是<code>大哥A</code>，<code>大哥A</code>通过容器管理弟弟妹妹，弟弟妹妹里也可能有一个<code>大哥AA</code>，<code>大哥AA</code>通过容器也管理一批弟弟妹妹，可以如此循环。<br>客户类需要<code>大哥A</code>。   </p>\n<p>7.享元模式：（一群同类对象，少内存占用）<br>由于系统中存在太多类似的<code>第一服务类</code>对象，就通过<code>内存共享</code>减少<code>第一服务类</code>对象的内存占用，<br>这些<code>第一服务类</code>把内部通用的属性和方法移到某一个专门的单例<code>享元类</code>，有一个单例工厂，专门生产这些单例。<br><code>客户类</code>只需知道调用<code>第一服务类</code>就行了。<br><code>组合模式</code>就有很多类似的<code>服务类</code>，可用<code>享元模式</code>来减少内存占用。</p>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><p>B干的事如下： 自己状态的管理，管理A的状态，传递A的消息，传给A的消息，辅助A处理C，</p>\n<p>1.模板方法模式：（特殊的继承套路）<br>在普通的继承中，父类留出要重写的方法，保留 如何调用这些方法 的<code>主方法</code>，final。<br>子类接着重写这些方法，<code>客户类</code>调用子类对象的<code>主方法</code>。</p>\n<p>2.状态模式：（A控制B，C是B的状态，A不知道）<br><code>上下文类</code>保存了<code>Status interface</code>的多个对象，并设置其中一个对象为内部的 当前 <code>Status类</code>对象变量，<br>这些<code>对象</code>可以通过<code>上下文类</code>对象的<code>change方法</code>，来改变<code>上下文类</code>对象内部的 当前 <code>Status类</code>对象变量。<br>是的，这些 <code>Status类</code>对象 彼此都知道对方的存在。<br><code>客户类</code>通过<code>上下文类</code>间接调用其中的当前<code>Status类</code>对象变量，<br><code>Status类</code>会通知<code>上下文类</code>要切换别的<code>Status类</code>，而<code>客户类</code>并不知道。</p>\n<p>3.策略模式：（A控制B，也控制B的状态C）<br>和<code>状态模式</code>不同的是<code>客户类</code>会通过<code>上下文类</code>主动切换 当前<code>策略类对象</code>，<br>这些 <code>策略类</code>对象 并不知道彼此。</p>\n<p>4.备忘录模式：（A控制B操作<code>A生成的C</code>，B是C的容器）<br><code>客户类</code>调用<code>第一服务类</code>。<br><code>第一服务类</code>会在每次属性发生变化时，把<code>要发生变化的属性</code>保存到新的<code>备忘类</code>对象，<br>并把该<code>备忘类</code>对象，传给<code>备忘容器类</code>对象保存（备忘类和备忘容器类 的关系 是<code>组合模式</code>里的哥哥管理弟弟妹妹）。<br><code>备忘容器类</code>对象内部是按<code>栈</code>的方式保存传来的<code>对象</code>，方便<code>第一服务类</code>对象随时取回。</p>\n<p>5.观察者模式：（A控制B操作C，B是单向传递消息，C是多个对象）<br><code>客户类</code>调用<code>发布者类</code>对象。<br><code>发布者类</code>内部有<code>消息通知interface</code>容器，会按<code>主题</code>分成几个容器。<br>实现了<code>消息通知interface</code>类的对象，会向<code>发布者类</code>对象注册想订阅的<code>主题</code>，<br><code>发布者类</code>对象将这些<code>订阅者</code>保存到不同<code>主题</code>的容器内。<br><code>发布者类</code>对象会把<code>客户类</code>对象传来的消息按不同的主题依次通知到各个<code>订阅者</code>。<br>当某个<code>订阅者</code>通过<code>客户类</code>对象传递同一<code>主题</code>的消息时，会有死循环风险。</p>\n<p>6.中介者模式：（A控制B操作C，B是双向中介，C是多个对象）<br><code>组件interface</code>和<code>中介interface</code>会双向调用。<br>有一个<code>中介实现类</code>，管理多个<code>组件实现类</code>。<br><code>中介类</code>和<code>主件类</code>之间有耦合，<code>组件类</code>之间没有耦合。<br><code>中介类</code>和<code>客户类</code>的沟通是双向的，和<code>组件类</code>沟通也是双向的。</p>\n<p>7.迭代器模式：（A控制B操作C，B是迭代器，C是容器）<br><code>客户类</code>会调用<code>实现了某interface</code>的<code>容器服务类B</code>，并迭代该容器内的元素。<br>通常<code>容器服务器B</code>会自带可以迭代自身的<code>迭代服务类A</code>，这样的话<code>客户类</code>调用<code>B类对象</code>的迭代方法就够了。<br><code>客户类</code>也可以指定<code>实现了某interface</code>的<code>迭代服务器A</code>给<code>容器服务类B</code>。</p>\n<p>8.责任链模式：（A控制B操作C，B是<code>操作对象容器</code>）<br>和<code>组合模式</code>类似，但没有嵌套，且<code>大哥A</code>会把包含弟弟妹妹的容器交给<code>客户类</code>，让<code>客户类</code>自主控制执行，不一定全部都执行。  </p>\n<p>9.命令模式：（A控制B操作C，B是流程控制，C是在干活）<br><code>组合优于继承</code>的另一个经典例子。<br><code>客户类</code>往<code>实现了命令interface的第一服务类</code>B对象传入<code>实现了接收interface的第二服务类</code>C对象（可能多个<code>C对象</code>），<br><code>B对象</code>会调用<code>C对象</code>的方法（控制调用过程，可能调用多个方法，<code>C对象</code>是真正干活的服务对象）。</p>\n<p>10.访问者模式：（A控制B操作C，C是数据表，B是<code>一群操作对象</code>）<br><code>实现了访问者interface</code>的类作为<code>访问者</code>，被<code>客户类</code>传入<code>数据表对象</code>的<code>欢迎访问方法</code>。<br><code>继承某抽象类</code>的 <code>子类</code> 作为数据表，有<code>欢迎访问方法</code>接收<code>访问者</code>，并主动调用<code>访问者</code>的<code>操作数据方法</code>，来操作该<code>数据表</code>的数据。<br>（数据表对象 被动等待 访问者 ，再把 本对象 传给 访问者）<br><code>客户类</code>让每个<code>访问者</code>都去<code>数据表容器类</code>中遍历操作<code>数据表</code>的数据。<br><code>数据表类</code>不应该频繁变动<code>属性</code>，因为每次变动，<code>访问者</code>也要跟着修改<code>操作方法</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"初级抽象\"><a href=\"#初级抽象\" class=\"headerlink\" title=\"初级抽象\"></a>初级抽象</h3><p>当我们开始用<code>面向对象</code>的方式去<code>重构</code>一段<code>面向过程</code>的代码时</p>\n<p>最开始：<br><code>重构</code>成<code>一个类</code>，<code>公共变量</code>成为<code>私有属性</code>，<code>公共方法</code>控制<code>主逻辑</code>（<code>主方法</code>），<code>私有方法</code>封装<code>变化</code>（<code>助手方法</code>）。   </p>\n<p>执行的时候，用<code>这个类</code>实例化一个<code>对象</code>，然后执行这个对象的<code>主方法</code>。  </p>\n<p>当<code>助手方法</code>越来越独立：<br>比如，它在调用自己的<code>助手方法</code>，这一套方法有自己的<code>公共属性</code>时，就需要把这一套方法和属性分出来成为<code>新类</code>。<br>最开始的类是<code>客户类</code>，新分出来的是<code>服务类</code>。<br>当<code>客户类</code>需要多个服务时，就会有多个<code>服务类</code>。  </p>\n<p>执行的时候，用<code>客户类</code>实例化一个<code>客户对象</code>，传入它需要的<code>服务类</code>的对象，然后执行这个<code>客户对象</code>的<code>主方法</code>。</p>\n<p><code>服务类</code>应对变化：<br>如果<code>需求</code>变化了，最好是仅修改<code>服务类</code>对象。   </p>\n<p>执行的时候，用客户类实例化一个<code>客户对象</code>，传入<code>新服务类</code>对象，而<code>新服务类</code>包含了绝大部分的变化。  </p>\n<p><code>客户类</code>应对变化：<br><code>客户类</code>应该提前把需要的<code>服务类</code>抽象成通用的父类，比如<code>抽象类</code>、<code>接口interface</code>，这样在接收<code>新对象</code>时就不用修改<code>类型限制</code>。<br>这些<code>类型限制</code>的目的是想保证新对象的<code>方法</code>不变，其实<code>类型限制</code>最好改成<code>接口interface</code>。  </p>\n<p>执行的时候，用客户类实例化一个客户对象，传入实现了同样<code>接口interface</code>的<code>新服务类</code>对象，然后执行这个<code>客户对象</code>的<code>主方法</code>。  </p>\n<p>总结：<br>只需要一个类 —&gt; 客户类 需要 服务类 —&gt; 客户类 需要 实现同样接口的服务类</p>\n<h3 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h3><p>1.代理模式：（用旧方法名复用旧方法，外部）<br><code>客户类</code>原先调用的<code>实现了某interface的服务类</code>对象的方法，需要在该方法前后增加一些处理工作。<br>(这些新增的工作也可以在<code>客户类</code>内部做的，但这不符合<code>最小修改</code>，应该只修改是服务类)<br>新写一个<code>实现了同样interface的服务类</code>做了这些新增的处理工作，而方法名不变，就把它当<code>第一服务类</code>。</p>\n<p>2.装饰模式：（用旧方法名复用旧方法，内部）<br>和<code>代理模式</code>类似，是<code>客户类</code>内部 主动实例化<code>装饰对象</code>（实例化时传入<code>旧对象</code>），让它成为增强版的<code>旧对象</code>，后续调用<code>装饰对象</code>的<code>旧方法名</code>。<br>在<code>客户类</code>内部实例化是为了<code>按需选择</code>不同的装饰对象</p>\n<p>3.适配器模式：（用新方法名复用旧方法）<br><code>客户类</code>需要<code>实现适配器interface的服务类</code>，这个类的方法适配了其他<code>已有的服务类</code>的方法，两者方法名不同。<br>与<code>外观模式</code>比，<code>客户类</code>调用的方法不变。</p>\n<p>4.外观模式：（用新方法名复用一堆旧方法逻辑）<br><code>一套复杂的子服务类</code>被<code>第一服务类</code>管理，<code>客户类</code>只需知道第一服务类可能解决这个需求就行了。<br>通常是已经存在了<code>一套复杂的子服务类</code>，如何理清它们的关系太困难。就写一个<code>第一服务类</code>来简化<code>客户类</code>的调用。<br>与<code>适配器模式</code>比，<code>客户类</code>调用新方法。</p>\n<p>5.桥接模式：（一个多变的新对象）<br><code>组合优于继承</code>的经典例子<br><code>实现了某interface的第二服务类</code>的各方法独立且多变，每种变化都写单独一个类的话，类的数量会爆炸，<br>写一套<code>包含单独方法的interface</code>，<code>第二服务类</code>的方法去引用这些单独实现的方法。<br><code>第一服务类</code>生成了<code>实现了某interface的第二服务类</code>的对象，并返回给<code>客户类</code>，<code>客户类</code>直接操作<code>第二服务类</code>。  </p>\n<p>6.组合模式：（一群同类对象，嵌套）<br><code>实现了某interface的服务类</code>，可能有多个。<br>有一个是<code>大哥A</code>，<code>大哥A</code>通过容器管理弟弟妹妹，弟弟妹妹里也可能有一个<code>大哥AA</code>，<code>大哥AA</code>通过容器也管理一批弟弟妹妹，可以如此循环。<br>客户类需要<code>大哥A</code>。   </p>\n<p>7.享元模式：（一群同类对象，少内存占用）<br>由于系统中存在太多类似的<code>第一服务类</code>对象，就通过<code>内存共享</code>减少<code>第一服务类</code>对象的内存占用，<br>这些<code>第一服务类</code>把内部通用的属性和方法移到某一个专门的单例<code>享元类</code>，有一个单例工厂，专门生产这些单例。<br><code>客户类</code>只需知道调用<code>第一服务类</code>就行了。<br><code>组合模式</code>就有很多类似的<code>服务类</code>，可用<code>享元模式</code>来减少内存占用。</p>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><p>B干的事如下： 自己状态的管理，管理A的状态，传递A的消息，传给A的消息，辅助A处理C，</p>\n<p>1.模板方法模式：（特殊的继承套路）<br>在普通的继承中，父类留出要重写的方法，保留 如何调用这些方法 的<code>主方法</code>，final。<br>子类接着重写这些方法，<code>客户类</code>调用子类对象的<code>主方法</code>。</p>\n<p>2.状态模式：（A控制B，C是B的状态，A不知道）<br><code>上下文类</code>保存了<code>Status interface</code>的多个对象，并设置其中一个对象为内部的 当前 <code>Status类</code>对象变量，<br>这些<code>对象</code>可以通过<code>上下文类</code>对象的<code>change方法</code>，来改变<code>上下文类</code>对象内部的 当前 <code>Status类</code>对象变量。<br>是的，这些 <code>Status类</code>对象 彼此都知道对方的存在。<br><code>客户类</code>通过<code>上下文类</code>间接调用其中的当前<code>Status类</code>对象变量，<br><code>Status类</code>会通知<code>上下文类</code>要切换别的<code>Status类</code>，而<code>客户类</code>并不知道。</p>\n<p>3.策略模式：（A控制B，也控制B的状态C）<br>和<code>状态模式</code>不同的是<code>客户类</code>会通过<code>上下文类</code>主动切换 当前<code>策略类对象</code>，<br>这些 <code>策略类</code>对象 并不知道彼此。</p>\n<p>4.备忘录模式：（A控制B操作<code>A生成的C</code>，B是C的容器）<br><code>客户类</code>调用<code>第一服务类</code>。<br><code>第一服务类</code>会在每次属性发生变化时，把<code>要发生变化的属性</code>保存到新的<code>备忘类</code>对象，<br>并把该<code>备忘类</code>对象，传给<code>备忘容器类</code>对象保存（备忘类和备忘容器类 的关系 是<code>组合模式</code>里的哥哥管理弟弟妹妹）。<br><code>备忘容器类</code>对象内部是按<code>栈</code>的方式保存传来的<code>对象</code>，方便<code>第一服务类</code>对象随时取回。</p>\n<p>5.观察者模式：（A控制B操作C，B是单向传递消息，C是多个对象）<br><code>客户类</code>调用<code>发布者类</code>对象。<br><code>发布者类</code>内部有<code>消息通知interface</code>容器，会按<code>主题</code>分成几个容器。<br>实现了<code>消息通知interface</code>类的对象，会向<code>发布者类</code>对象注册想订阅的<code>主题</code>，<br><code>发布者类</code>对象将这些<code>订阅者</code>保存到不同<code>主题</code>的容器内。<br><code>发布者类</code>对象会把<code>客户类</code>对象传来的消息按不同的主题依次通知到各个<code>订阅者</code>。<br>当某个<code>订阅者</code>通过<code>客户类</code>对象传递同一<code>主题</code>的消息时，会有死循环风险。</p>\n<p>6.中介者模式：（A控制B操作C，B是双向中介，C是多个对象）<br><code>组件interface</code>和<code>中介interface</code>会双向调用。<br>有一个<code>中介实现类</code>，管理多个<code>组件实现类</code>。<br><code>中介类</code>和<code>主件类</code>之间有耦合，<code>组件类</code>之间没有耦合。<br><code>中介类</code>和<code>客户类</code>的沟通是双向的，和<code>组件类</code>沟通也是双向的。</p>\n<p>7.迭代器模式：（A控制B操作C，B是迭代器，C是容器）<br><code>客户类</code>会调用<code>实现了某interface</code>的<code>容器服务类B</code>，并迭代该容器内的元素。<br>通常<code>容器服务器B</code>会自带可以迭代自身的<code>迭代服务类A</code>，这样的话<code>客户类</code>调用<code>B类对象</code>的迭代方法就够了。<br><code>客户类</code>也可以指定<code>实现了某interface</code>的<code>迭代服务器A</code>给<code>容器服务类B</code>。</p>\n<p>8.责任链模式：（A控制B操作C，B是<code>操作对象容器</code>）<br>和<code>组合模式</code>类似，但没有嵌套，且<code>大哥A</code>会把包含弟弟妹妹的容器交给<code>客户类</code>，让<code>客户类</code>自主控制执行，不一定全部都执行。  </p>\n<p>9.命令模式：（A控制B操作C，B是流程控制，C是在干活）<br><code>组合优于继承</code>的另一个经典例子。<br><code>客户类</code>往<code>实现了命令interface的第一服务类</code>B对象传入<code>实现了接收interface的第二服务类</code>C对象（可能多个<code>C对象</code>），<br><code>B对象</code>会调用<code>C对象</code>的方法（控制调用过程，可能调用多个方法，<code>C对象</code>是真正干活的服务对象）。</p>\n<p>10.访问者模式：（A控制B操作C，C是数据表，B是<code>一群操作对象</code>）<br><code>实现了访问者interface</code>的类作为<code>访问者</code>，被<code>客户类</code>传入<code>数据表对象</code>的<code>欢迎访问方法</code>。<br><code>继承某抽象类</code>的 <code>子类</code> 作为数据表，有<code>欢迎访问方法</code>接收<code>访问者</code>，并主动调用<code>访问者</code>的<code>操作数据方法</code>，来操作该<code>数据表</code>的数据。<br>（数据表对象 被动等待 访问者 ，再把 本对象 传给 访问者）<br><code>客户类</code>让每个<code>访问者</code>都去<code>数据表容器类</code>中遍历操作<code>数据表</code>的数据。<br><code>数据表类</code>不应该频繁变动<code>属性</code>，因为每次变动，<code>访问者</code>也要跟着修改<code>操作方法</code>。</p>\n"},{"title":"设计原则","date":"2021-03-05T06:53:18.000Z","_content":"### 介绍\n\n#### 1.依赖倒置原则   \n从一开始，`客户类`就要坚持`只调用`实现了`interface`的`服务类`。\n\n#### 2.接口隔离原则  \n`interface`要小要精。\n\n#### 3.单一职责原则   \n`服务类`实现的`interface`别超过一个。\n\n#### 4.开闭原则   \n修改时，要写新的`服务类`，新`服务类`也要实现该`interface`。\n \n#### 5.里氏替换原则   \n修改后，`客户类`调用同样实现该`interface`的新`服务类`。\n\n#### 6.迪米特法则   \n如果发现`客户类`在和一批`服务类`说同样的话时，新写一个`服务类`专门跑腿传话。\n\n### 注意\n\n所有原则的重点，是设计合适的`interface`。\n","source":"_posts/设计原则.md","raw":"---\ntitle: 设计原则\ndate: 2021-03-05 14:53:18\ntags:\n---\n### 介绍\n\n#### 1.依赖倒置原则   \n从一开始，`客户类`就要坚持`只调用`实现了`interface`的`服务类`。\n\n#### 2.接口隔离原则  \n`interface`要小要精。\n\n#### 3.单一职责原则   \n`服务类`实现的`interface`别超过一个。\n\n#### 4.开闭原则   \n修改时，要写新的`服务类`，新`服务类`也要实现该`interface`。\n \n#### 5.里氏替换原则   \n修改后，`客户类`调用同样实现该`interface`的新`服务类`。\n\n#### 6.迪米特法则   \n如果发现`客户类`在和一批`服务类`说同样的话时，新写一个`服务类`专门跑腿传话。\n\n### 注意\n\n所有原则的重点，是设计合适的`interface`。\n","slug":"设计原则","published":1,"updated":"2021-03-05T08:09:06.743Z","_id":"cklvyz53s000085o87g5f5k8r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><h4 id=\"1-依赖倒置原则\"><a href=\"#1-依赖倒置原则\" class=\"headerlink\" title=\"1.依赖倒置原则\"></a>1.依赖倒置原则</h4><p>从一开始，<code>客户类</code>就要坚持<code>只调用</code>实现了<code>interface</code>的<code>服务类</code>。</p>\n<h4 id=\"2-接口隔离原则\"><a href=\"#2-接口隔离原则\" class=\"headerlink\" title=\"2.接口隔离原则\"></a>2.接口隔离原则</h4><p><code>interface</code>要小要精。</p>\n<h4 id=\"3-单一职责原则\"><a href=\"#3-单一职责原则\" class=\"headerlink\" title=\"3.单一职责原则\"></a>3.单一职责原则</h4><p><code>服务类</code>实现的<code>interface</code>别超过一个。</p>\n<h4 id=\"4-开闭原则\"><a href=\"#4-开闭原则\" class=\"headerlink\" title=\"4.开闭原则\"></a>4.开闭原则</h4><p>修改时，要写新的<code>服务类</code>，新<code>服务类</code>也要实现该<code>interface</code>。</p>\n<h4 id=\"5-里氏替换原则\"><a href=\"#5-里氏替换原则\" class=\"headerlink\" title=\"5.里氏替换原则\"></a>5.里氏替换原则</h4><p>修改后，<code>客户类</code>调用同样实现该<code>interface</code>的新<code>服务类</code>。</p>\n<h4 id=\"6-迪米特法则\"><a href=\"#6-迪米特法则\" class=\"headerlink\" title=\"6.迪米特法则\"></a>6.迪米特法则</h4><p>如果发现<code>客户类</code>在和一批<code>服务类</code>说同样的话时，新写一个<code>服务类</code>专门跑腿传话。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>所有原则的重点，是设计合适的<code>interface</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><h4 id=\"1-依赖倒置原则\"><a href=\"#1-依赖倒置原则\" class=\"headerlink\" title=\"1.依赖倒置原则\"></a>1.依赖倒置原则</h4><p>从一开始，<code>客户类</code>就要坚持<code>只调用</code>实现了<code>interface</code>的<code>服务类</code>。</p>\n<h4 id=\"2-接口隔离原则\"><a href=\"#2-接口隔离原则\" class=\"headerlink\" title=\"2.接口隔离原则\"></a>2.接口隔离原则</h4><p><code>interface</code>要小要精。</p>\n<h4 id=\"3-单一职责原则\"><a href=\"#3-单一职责原则\" class=\"headerlink\" title=\"3.单一职责原则\"></a>3.单一职责原则</h4><p><code>服务类</code>实现的<code>interface</code>别超过一个。</p>\n<h4 id=\"4-开闭原则\"><a href=\"#4-开闭原则\" class=\"headerlink\" title=\"4.开闭原则\"></a>4.开闭原则</h4><p>修改时，要写新的<code>服务类</code>，新<code>服务类</code>也要实现该<code>interface</code>。</p>\n<h4 id=\"5-里氏替换原则\"><a href=\"#5-里氏替换原则\" class=\"headerlink\" title=\"5.里氏替换原则\"></a>5.里氏替换原则</h4><p>修改后，<code>客户类</code>调用同样实现该<code>interface</code>的新<code>服务类</code>。</p>\n<h4 id=\"6-迪米特法则\"><a href=\"#6-迪米特法则\" class=\"headerlink\" title=\"6.迪米特法则\"></a>6.迪米特法则</h4><p>如果发现<code>客户类</code>在和一批<code>服务类</code>说同样的话时，新写一个<code>服务类</code>专门跑腿传话。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>所有原则的重点，是设计合适的<code>interface</code>。</p>\n"},{"title":"电磁切割偶感","date":"2021-03-08T02:30:01.000Z","_content":"《三角函数超入门》\n\n磁感线的切割是垂直切割的，   \n如果直接垂直切割，可以是线圈垂直匀速切过去，这样电压稳定，   \n如果垂直震荡切割，中间的速度就不是匀速运动，这样电压忽高忽低，   \n现实中是转子切割，转子并不是垂直穿过磁感线，需要分解成垂直速度和水平速度。  \n这样转子的`切线速度`当斜边，和`水平角度`用正弦公式，可得出对边的`垂直速度`。\n","source":"_posts/电磁切割偶感.md","raw":"---\ntitle: 电磁切割偶感\ndate: 2021-03-08 10:30:01\ntags:\n---\n《三角函数超入门》\n\n磁感线的切割是垂直切割的，   \n如果直接垂直切割，可以是线圈垂直匀速切过去，这样电压稳定，   \n如果垂直震荡切割，中间的速度就不是匀速运动，这样电压忽高忽低，   \n现实中是转子切割，转子并不是垂直穿过磁感线，需要分解成垂直速度和水平速度。  \n这样转子的`切线速度`当斜边，和`水平角度`用正弦公式，可得出对边的`垂直速度`。\n","slug":"电磁切割偶感","published":1,"updated":"2021-03-08T02:44:00.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklzzdkya000035o88pbo3w1h","content":"<p>《三角函数超入门》</p>\n<p>磁感线的切割是垂直切割的，<br>如果直接垂直切割，可以是线圈垂直匀速切过去，这样电压稳定，<br>如果垂直震荡切割，中间的速度就不是匀速运动，这样电压忽高忽低，<br>现实中是转子切割，转子并不是垂直穿过磁感线，需要分解成垂直速度和水平速度。<br>这样转子的<code>切线速度</code>当斜边，和<code>水平角度</code>用正弦公式，可得出对边的<code>垂直速度</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《三角函数超入门》</p>\n<p>磁感线的切割是垂直切割的，<br>如果直接垂直切割，可以是线圈垂直匀速切过去，这样电压稳定，<br>如果垂直震荡切割，中间的速度就不是匀速运动，这样电压忽高忽低，<br>现实中是转子切割，转子并不是垂直穿过磁感线，需要分解成垂直速度和水平速度。<br>这样转子的<code>切线速度</code>当斜边，和<code>水平角度</code>用正弦公式，可得出对边的<code>垂直速度</code>。</p>\n"},{"title":"不一样的栈面试题","date":"2021-03-08T02:46:59.000Z","_content":"\n群里有人发过一页面试题，其中第二道面试题比较有意思。\n\n```text\n给定一个递增的整数数组，请编写一个函数，查找出该数组中不重复的元素，并给出复杂度。\n例如：[1,1,2,2,3,4,5,5,5]，输出为[3,4]，不限编程语言。\n```\n一般以为用栈只能消除偶数的重复元素，但真的是这样吗？   \n这道题是有序数组，还是可以用栈解决了这个问题。\n```js\nconst arr = [1,1,2,2,3,4,5,5,5];\n\nfunction fun(arr,i=0){\n\n  if( i < (arr.length - 1) ){\n    //没到末尾\n    const next = i + 1\n    const before = i - 1\n    const stak = fun(arr,next);\n\n    if(arr[i] === stak[0]){\n      //本元素和返回栈顶相同\n\n      /***\n       * 开始消除逻辑\n       * 我是递归到最末尾才开始往前判断的。\n       * 入栈 还是普通的判断，原数组当前元素和栈顶不同就入栈。\n       * \n       * 出栈 是原数组当前元素和栈顶元素相同时，\n       * 还要判断原数组前一位元素是否和当前元素相同：（这是精华）\n       *    相同就直接返回栈，当做已经消除本位的重复元素。\n       *    不同就当普通处理，消除栈顶元素。\n       */\n      if(i === 0){\n        stak.shift()\n        return stak;\n      }\n      if( arr[i] === arr[before] ){\n        return stak;\n      }else{\n        stak.shift()\n        return stak;\n      }\n      /**\n       * 结束消除逻辑\n       */\n      \n    }else{\n      //本元素和返回栈顶不同\n      stak.unshift(arr[i])\n      return stak\n    }\n\n  }else{\n    //到了末尾\n    return [ arr[i] ]\n  }\n}\nconsole.log(fun(arr))\n```\n","source":"_posts/不一样的栈面试题.md","raw":"---\ntitle: 不一样的栈面试题\ndate: 2021-03-08 10:46:59\ntags:\n---\n\n群里有人发过一页面试题，其中第二道面试题比较有意思。\n\n```text\n给定一个递增的整数数组，请编写一个函数，查找出该数组中不重复的元素，并给出复杂度。\n例如：[1,1,2,2,3,4,5,5,5]，输出为[3,4]，不限编程语言。\n```\n一般以为用栈只能消除偶数的重复元素，但真的是这样吗？   \n这道题是有序数组，还是可以用栈解决了这个问题。\n```js\nconst arr = [1,1,2,2,3,4,5,5,5];\n\nfunction fun(arr,i=0){\n\n  if( i < (arr.length - 1) ){\n    //没到末尾\n    const next = i + 1\n    const before = i - 1\n    const stak = fun(arr,next);\n\n    if(arr[i] === stak[0]){\n      //本元素和返回栈顶相同\n\n      /***\n       * 开始消除逻辑\n       * 我是递归到最末尾才开始往前判断的。\n       * 入栈 还是普通的判断，原数组当前元素和栈顶不同就入栈。\n       * \n       * 出栈 是原数组当前元素和栈顶元素相同时，\n       * 还要判断原数组前一位元素是否和当前元素相同：（这是精华）\n       *    相同就直接返回栈，当做已经消除本位的重复元素。\n       *    不同就当普通处理，消除栈顶元素。\n       */\n      if(i === 0){\n        stak.shift()\n        return stak;\n      }\n      if( arr[i] === arr[before] ){\n        return stak;\n      }else{\n        stak.shift()\n        return stak;\n      }\n      /**\n       * 结束消除逻辑\n       */\n      \n    }else{\n      //本元素和返回栈顶不同\n      stak.unshift(arr[i])\n      return stak\n    }\n\n  }else{\n    //到了末尾\n    return [ arr[i] ]\n  }\n}\nconsole.log(fun(arr))\n```\n","slug":"不一样的栈面试题","published":1,"updated":"2021-03-08T03:05:34.340Z","_id":"ckm003q410000ulo87cpng0ne","comments":1,"layout":"post","photos":[],"link":"","content":"<p>群里有人发过一页面试题，其中第二道面试题比较有意思。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个递增的整数数组，请编写一个函数，查找出该数组中不重复的元素，并给出复杂度。</span><br><span class=\"line\">例如：[1,1,2,2,3,4,5,5,5]，输出为[3,4]，不限编程语言。</span><br></pre></td></tr></table></figure>\n<p>一般以为用栈只能消除偶数的重复元素，但真的是这样吗？<br>这道题是有序数组，还是可以用栈解决了这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">arr,i=<span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( i &lt; (arr.length - <span class=\"number\">1</span>) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//没到末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> before = i - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stak = fun(arr,next);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] === stak[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">      <span class=\"comment\">//本元素和返回栈顶相同</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">       * 开始消除逻辑</span></span><br><span class=\"line\"><span class=\"comment\">       * 我是递归到最末尾才开始往前判断的。</span></span><br><span class=\"line\"><span class=\"comment\">       * 入栈 还是普通的判断，原数组当前元素和栈顶不同就入栈。</span></span><br><span class=\"line\"><span class=\"comment\">       * </span></span><br><span class=\"line\"><span class=\"comment\">       * 出栈 是原数组当前元素和栈顶元素相同时，</span></span><br><span class=\"line\"><span class=\"comment\">       * 还要判断原数组前一位元素是否和当前元素相同：（这是精华）</span></span><br><span class=\"line\"><span class=\"comment\">       *    相同就直接返回栈，当做已经消除本位的重复元素。</span></span><br><span class=\"line\"><span class=\"comment\">       *    不同就当普通处理，消除栈顶元素。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        stak.shift()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( arr[i] === arr[before] )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        stak.shift()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 结束消除逻辑</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//本元素和返回栈顶不同</span></span><br><span class=\"line\">      stak.unshift(arr[i])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> stak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//到了末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ arr[i] ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun(arr))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>群里有人发过一页面试题，其中第二道面试题比较有意思。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个递增的整数数组，请编写一个函数，查找出该数组中不重复的元素，并给出复杂度。</span><br><span class=\"line\">例如：[1,1,2,2,3,4,5,5,5]，输出为[3,4]，不限编程语言。</span><br></pre></td></tr></table></figure>\n<p>一般以为用栈只能消除偶数的重复元素，但真的是这样吗？<br>这道题是有序数组，还是可以用栈解决了这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">arr,i=<span class=\"number\">0</span></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( i &lt; (arr.length - <span class=\"number\">1</span>) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//没到末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> next = i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> before = i - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stak = fun(arr,next);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] === stak[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">      <span class=\"comment\">//本元素和返回栈顶相同</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">       * 开始消除逻辑</span></span><br><span class=\"line\"><span class=\"comment\">       * 我是递归到最末尾才开始往前判断的。</span></span><br><span class=\"line\"><span class=\"comment\">       * 入栈 还是普通的判断，原数组当前元素和栈顶不同就入栈。</span></span><br><span class=\"line\"><span class=\"comment\">       * </span></span><br><span class=\"line\"><span class=\"comment\">       * 出栈 是原数组当前元素和栈顶元素相同时，</span></span><br><span class=\"line\"><span class=\"comment\">       * 还要判断原数组前一位元素是否和当前元素相同：（这是精华）</span></span><br><span class=\"line\"><span class=\"comment\">       *    相同就直接返回栈，当做已经消除本位的重复元素。</span></span><br><span class=\"line\"><span class=\"comment\">       *    不同就当普通处理，消除栈顶元素。</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        stak.shift()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( arr[i] === arr[before] )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        stak.shift()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stak;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 结束消除逻辑</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//本元素和返回栈顶不同</span></span><br><span class=\"line\">      stak.unshift(arr[i])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> stak</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//到了末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [ arr[i] ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fun(arr))</span><br></pre></td></tr></table></figure>"},{"title":"纯人肉算力、查对数表、电子计算器","date":"2021-03-08T06:50:00.000Z","_content":"### 纯人肉算力\n在没有`对数表`和`电子计算器`之前，`大数`的计算是非常繁琐的，\n比如手算 `123456789 * 987654321` 是非常痛苦的，\n如果手算 `123456789^987654321` 更是需要不眠不休的工作31年零3个月。\n那时的天文学家天天计算`大数`，他们都是苦行僧。\n\n### 查对数表\n后来数学家制作了`对数表`，可以借助`对数表`快速获得结果。\n[对数特性](https://www.shuxuele.com/algebra/exponents-logarithms.html)\n```text\nln(m*n) = ln(m) + ln(n)\t        乘的对数是对数的和\n \t \nln(m/n) = ln(m) - ln(n)\t        除乘的对数是对数的差\n \t \nln(1/n) = -ln(n)                这是以上\"除\"特性的结果，因为 ln(1) = 0\n \t \nln(m^r) = r * ln(m) \t        m的r次幂 的对数 是 r 和 m的对数 的积\n\nloga(x) = ln(x) / ln(a)         改变对数的底\n```\n如何使用`对数表`\n```text\n求 123456789 * 987654321 \n\ny   = e^( ln(123456789 * 987654321) )\n\nx   = ln(123456789 * 987654321)  = ln(123456789) + ln(987654321)\ny   = e^x    \n                  \n则 y 是 123456789 * 987654321 的结果\n```\n```text\n求 123456789^987654321\n\ny   = e^( ln(123456789^987654321) )\n\nx   = ln(123456789^987654321)   = 987654321 * ln(123456789)\nx1  = ln(123456789)\ny   = e^( 987654321 * x1 )      = e^( e^( ln(987654321 * x1) ) )\n\nx2  = ln(987654321 * x1)        = ln(987654321) + ln(x1)   \ny   = e^( e^x2 )\n\n则 y 是 123456789^987654321 的结果\n```\n将算式中的 `乘` `除` `幂`运算，逐步转换成`加` `减`运算。\n`大数`的计算就变成：查`对数表`，算加减，再查`指数表`。  \n计算过程中有小数产生，取`10位小数`可以得到比较准确的结果。   \n\n### 电子计算器\n在出现`电子计算器`以后，计算过程不再要查表，也不需要纠结保留多少位小数，瞬间就能得到`精度`很高的结果。\n从此，`对数表`就渐渐没人用了。\n","source":"_posts/纯人肉算力、查对数表、计算器.md","raw":"---\ntitle: 纯人肉算力、查对数表、电子计算器\ndate: 2021-03-08 14:50:00\ntags:\n---\n### 纯人肉算力\n在没有`对数表`和`电子计算器`之前，`大数`的计算是非常繁琐的，\n比如手算 `123456789 * 987654321` 是非常痛苦的，\n如果手算 `123456789^987654321` 更是需要不眠不休的工作31年零3个月。\n那时的天文学家天天计算`大数`，他们都是苦行僧。\n\n### 查对数表\n后来数学家制作了`对数表`，可以借助`对数表`快速获得结果。\n[对数特性](https://www.shuxuele.com/algebra/exponents-logarithms.html)\n```text\nln(m*n) = ln(m) + ln(n)\t        乘的对数是对数的和\n \t \nln(m/n) = ln(m) - ln(n)\t        除乘的对数是对数的差\n \t \nln(1/n) = -ln(n)                这是以上\"除\"特性的结果，因为 ln(1) = 0\n \t \nln(m^r) = r * ln(m) \t        m的r次幂 的对数 是 r 和 m的对数 的积\n\nloga(x) = ln(x) / ln(a)         改变对数的底\n```\n如何使用`对数表`\n```text\n求 123456789 * 987654321 \n\ny   = e^( ln(123456789 * 987654321) )\n\nx   = ln(123456789 * 987654321)  = ln(123456789) + ln(987654321)\ny   = e^x    \n                  \n则 y 是 123456789 * 987654321 的结果\n```\n```text\n求 123456789^987654321\n\ny   = e^( ln(123456789^987654321) )\n\nx   = ln(123456789^987654321)   = 987654321 * ln(123456789)\nx1  = ln(123456789)\ny   = e^( 987654321 * x1 )      = e^( e^( ln(987654321 * x1) ) )\n\nx2  = ln(987654321 * x1)        = ln(987654321) + ln(x1)   \ny   = e^( e^x2 )\n\n则 y 是 123456789^987654321 的结果\n```\n将算式中的 `乘` `除` `幂`运算，逐步转换成`加` `减`运算。\n`大数`的计算就变成：查`对数表`，算加减，再查`指数表`。  \n计算过程中有小数产生，取`10位小数`可以得到比较准确的结果。   \n\n### 电子计算器\n在出现`电子计算器`以后，计算过程不再要查表，也不需要纠结保留多少位小数，瞬间就能得到`精度`很高的结果。\n从此，`对数表`就渐渐没人用了。\n","slug":"纯人肉算力、查对数表、计算器","published":1,"updated":"2021-03-08T09:33:57.239Z","_id":"ckm0awdts0000bso83p9g1frn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"纯人肉算力\"><a href=\"#纯人肉算力\" class=\"headerlink\" title=\"纯人肉算力\"></a>纯人肉算力</h3><p>在没有<code>对数表</code>和<code>电子计算器</code>之前，<code>大数</code>的计算是非常繁琐的，<br>比如手算 <code>123456789 * 987654321</code> 是非常痛苦的，<br>如果手算 <code>123456789^987654321</code> 更是需要不眠不休的工作31年零3个月。<br>那时的天文学家天天计算<code>大数</code>，他们都是苦行僧。</p>\n<h3 id=\"查对数表\"><a href=\"#查对数表\" class=\"headerlink\" title=\"查对数表\"></a>查对数表</h3><p>后来数学家制作了<code>对数表</code>，可以借助<code>对数表</code>快速获得结果。<br><a href=\"https://www.shuxuele.com/algebra/exponents-logarithms.html\">对数特性</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln(m*n) = ln(m) + ln(n)\t        乘的对数是对数的和</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(m/n) = ln(m) - ln(n)\t        除乘的对数是对数的差</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(1/n) = -ln(n)                这是以上&quot;除&quot;特性的结果，因为 ln(1) = 0</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(m^r) = r * ln(m) \t        m的r次幂 的对数 是 r 和 m的对数 的积</span><br><span class=\"line\"></span><br><span class=\"line\">loga(x) = ln(x) / ln(a)         改变对数的底</span><br></pre></td></tr></table></figure>\n<p>如何使用<code>对数表</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求 123456789 * 987654321 </span><br><span class=\"line\"></span><br><span class=\"line\">y   = e^( ln(123456789 * 987654321) )</span><br><span class=\"line\"></span><br><span class=\"line\">x   = ln(123456789 * 987654321)  = ln(123456789) + ln(987654321)</span><br><span class=\"line\">y   = e^x    </span><br><span class=\"line\">                  </span><br><span class=\"line\">则 y 是 123456789 * 987654321 的结果</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求 123456789^987654321</span><br><span class=\"line\"></span><br><span class=\"line\">y   = e^( ln(123456789^987654321) )</span><br><span class=\"line\"></span><br><span class=\"line\">x   = ln(123456789^987654321)   = 987654321 * ln(123456789)</span><br><span class=\"line\">x1  = ln(123456789)</span><br><span class=\"line\">y   = e^( 987654321 * x1 )      = e^( e^( ln(987654321 * x1) ) )</span><br><span class=\"line\"></span><br><span class=\"line\">x2  = ln(987654321 * x1)        = ln(987654321) + ln(x1)   </span><br><span class=\"line\">y   = e^( e^x2 )</span><br><span class=\"line\"></span><br><span class=\"line\">则 y 是 123456789^987654321 的结果</span><br></pre></td></tr></table></figure>\n<p>将算式中的 <code>乘</code> <code>除</code> <code>幂</code>运算，逐步转换成<code>加</code> <code>减</code>运算。<br><code>大数</code>的计算就变成：查<code>对数表</code>，算加减，再查<code>指数表</code>。<br>计算过程中有小数产生，取<code>10位小数</code>可以得到比较准确的结果。   </p>\n<h3 id=\"电子计算器\"><a href=\"#电子计算器\" class=\"headerlink\" title=\"电子计算器\"></a>电子计算器</h3><p>在出现<code>电子计算器</code>以后，计算过程不再要查表，也不需要纠结保留多少位小数，瞬间就能得到<code>精度</code>很高的结果。<br>从此，<code>对数表</code>就渐渐没人用了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"纯人肉算力\"><a href=\"#纯人肉算力\" class=\"headerlink\" title=\"纯人肉算力\"></a>纯人肉算力</h3><p>在没有<code>对数表</code>和<code>电子计算器</code>之前，<code>大数</code>的计算是非常繁琐的，<br>比如手算 <code>123456789 * 987654321</code> 是非常痛苦的，<br>如果手算 <code>123456789^987654321</code> 更是需要不眠不休的工作31年零3个月。<br>那时的天文学家天天计算<code>大数</code>，他们都是苦行僧。</p>\n<h3 id=\"查对数表\"><a href=\"#查对数表\" class=\"headerlink\" title=\"查对数表\"></a>查对数表</h3><p>后来数学家制作了<code>对数表</code>，可以借助<code>对数表</code>快速获得结果。<br><a href=\"https://www.shuxuele.com/algebra/exponents-logarithms.html\">对数特性</a></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln(m*n) = ln(m) + ln(n)\t        乘的对数是对数的和</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(m/n) = ln(m) - ln(n)\t        除乘的对数是对数的差</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(1/n) = -ln(n)                这是以上&quot;除&quot;特性的结果，因为 ln(1) = 0</span><br><span class=\"line\"> \t </span><br><span class=\"line\">ln(m^r) = r * ln(m) \t        m的r次幂 的对数 是 r 和 m的对数 的积</span><br><span class=\"line\"></span><br><span class=\"line\">loga(x) = ln(x) / ln(a)         改变对数的底</span><br></pre></td></tr></table></figure>\n<p>如何使用<code>对数表</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求 123456789 * 987654321 </span><br><span class=\"line\"></span><br><span class=\"line\">y   = e^( ln(123456789 * 987654321) )</span><br><span class=\"line\"></span><br><span class=\"line\">x   = ln(123456789 * 987654321)  = ln(123456789) + ln(987654321)</span><br><span class=\"line\">y   = e^x    </span><br><span class=\"line\">                  </span><br><span class=\"line\">则 y 是 123456789 * 987654321 的结果</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求 123456789^987654321</span><br><span class=\"line\"></span><br><span class=\"line\">y   = e^( ln(123456789^987654321) )</span><br><span class=\"line\"></span><br><span class=\"line\">x   = ln(123456789^987654321)   = 987654321 * ln(123456789)</span><br><span class=\"line\">x1  = ln(123456789)</span><br><span class=\"line\">y   = e^( 987654321 * x1 )      = e^( e^( ln(987654321 * x1) ) )</span><br><span class=\"line\"></span><br><span class=\"line\">x2  = ln(987654321 * x1)        = ln(987654321) + ln(x1)   </span><br><span class=\"line\">y   = e^( e^x2 )</span><br><span class=\"line\"></span><br><span class=\"line\">则 y 是 123456789^987654321 的结果</span><br></pre></td></tr></table></figure>\n<p>将算式中的 <code>乘</code> <code>除</code> <code>幂</code>运算，逐步转换成<code>加</code> <code>减</code>运算。<br><code>大数</code>的计算就变成：查<code>对数表</code>，算加减，再查<code>指数表</code>。<br>计算过程中有小数产生，取<code>10位小数</code>可以得到比较准确的结果。   </p>\n<h3 id=\"电子计算器\"><a href=\"#电子计算器\" class=\"headerlink\" title=\"电子计算器\"></a>电子计算器</h3><p>在出现<code>电子计算器</code>以后，计算过程不再要查表，也不需要纠结保留多少位小数，瞬间就能得到<code>精度</code>很高的结果。<br>从此，<code>对数表</code>就渐渐没人用了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckkneg4s1000094o8176tev7b","tag_id":"ckld5jkmw0000qco80lzf5r3c","_id":"ckld5jkn20002qco88b4keull"},{"post_id":"ckgd5uy9i0000y4u29wyk8x6m","tag_id":"ckld5jkn30003qco8bccocnxd","_id":"ckld5jkn60006qco8g3oz62mz"},{"post_id":"ckkw0b0zp00003do844qbbbnh","tag_id":"ckld5jkn50005qco8c9gzdz1b","_id":"ckld5jkn70008qco8bd088u2a"},{"post_id":"ckjwhkuyv0000jpo8evukgq28","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5jkna000aqco8242k6n6u"},{"post_id":"ckgd5uy9m0001y4u24w0u25mz","tag_id":"ckld5jkn90009qco8abvy7zk1","_id":"ckld5jknc000cqco826qjarso"},{"post_id":"ckgd5uy9r0007y4u24sj0cv07","tag_id":"ckld5jkn90009qco8abvy7zk1","_id":"ckld5jkng000fqco8hn0daii0"},{"post_id":"ckk59hy4o00003ko83k8nahsj","tag_id":"ckld5jkn50005qco8c9gzdz1b","_id":"ckld5jknh000hqco8dadz3wn1"},{"post_id":"ckgd5uy9q0006y4u2cox40eq7","tag_id":"ckld5jknh000gqco8a5sha6vp","_id":"ckld5jkni000jqco89cy10mkf"},{"post_id":"ckgd5uy9p0004y4u2f9va1jmu","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5jkni000lqco85x9sbd6f"},{"post_id":"ckkhvy4lq0000ofo8dfq818ee","tag_id":"ckld5jknj000sqco89zsf5k0z","_id":"ckld5jknk000vqco8dm90cl4a"},{"post_id":"ckgd5uy9o0003y4u20969h22i","tag_id":"ckld5jknk000uqco8bbnhc9k5","_id":"ckld5jknl000xqco840xj2mff"},{"post_id":"ckgd5uy9p0005y4u2cld7cev3","tag_id":"ckld5jknk000uqco8bbnhc9k5","_id":"ckld5jknl000zqco84lgn1h2d"},{"post_id":"cklakgsfr00002yo8hlu51pel","tag_id":"ckld5jknl000yqco84x346k2j","_id":"ckld5jknn0011qco816rtcaqi"},{"post_id":"ckkngs2an0000kso88im34grg","tag_id":"ckld5p1nn0000xeo8g9fb9044","_id":"ckld5p1nt0002xeo8bu55f0k3"},{"post_id":"ckkngs2an0000kso88im34grg","tag_id":"ckld5p1nt0001xeo88nm4fx4o","_id":"ckld5p1nt0003xeo8eg641j3c"},{"post_id":"ckgd5uy9n0002y4u2hrvh6jrn","tag_id":"ckld5jknl000yqco84x346k2j","_id":"ckld5wxz500007qo88fnmh8j8"},{"post_id":"ckgd5uy9n0002y4u2hrvh6jrn","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5wxz600017qo8b49p6vfj"},{"post_id":"ckkf8dnsb0000e0o8dxo475r5","tag_id":"ckld5p1nt0001xeo88nm4fx4o","_id":"ckld5wxze00037qo84h9g1qs0"},{"post_id":"ckkf8dnsb0000e0o8dxo475r5","tag_id":"ckld5p1nn0000xeo8g9fb9044","_id":"ckld5wxzf00047qo8h65b93sx"},{"post_id":"ckks0ln3m0000h6o87vj62ike","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5wxzg00067qo8hmcyflc6"},{"post_id":"ckks0ln3m0000h6o87vj62ike","tag_id":"ckld5wxz900027qo8gv5sd6d4","_id":"ckld5wxzh00077qo83qff5vdt"},{"post_id":"cklc4583a0000gio80eptayag","tag_id":"ckld5wxzf00057qo88jcb9nad","_id":"ckld5wxzj00097qo8embvd4wu"},{"post_id":"cklc4583a0000gio80eptayag","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5wxzj000a7qo89a8m49xb"},{"post_id":"ckjwhkuz00002jpo89pymbqn7","tag_id":"ckld5wxzh00087qo87v1v9oue","_id":"ckld5wxzl000c7qo841cg8dve"},{"post_id":"ckjwhkuz00002jpo89pymbqn7","tag_id":"ckld5p1nt0001xeo88nm4fx4o","_id":"ckld5wxzl000d7qo84bwz4eqv"},{"post_id":"ckhfp717a0000g6o8a4pq7pav","tag_id":"ckld5wxzk000b7qo8ewhp1cks","_id":"ckld5wxzl000e7qo85txx4s5j"},{"post_id":"ckhfp717a0000g6o8a4pq7pav","tag_id":"ckld5jkn60007qco80w0w49m7","_id":"ckld5wxzl000f7qo884u49q98"}],"Tag":[{"name":"ip","_id":"ckld5jkmw0000qco80lzf5r3c"},{"name":"bash linux","_id":"ckld5jkn20001qco81xlb2ovs"},{"name":"hello","_id":"ckld5jkn30003qco8bccocnxd"},{"name":"perl","_id":"ckld5jkn50005qco8c9gzdz1b"},{"name":"乱语","_id":"ckld5jkn60007qco80w0w49m7"},{"name":"MBP13","_id":"ckld5jkn90009qco8abvy7zk1"},{"name":"函数式 乱语","_id":"ckld5jknb000bqco82zov1p22"},{"name":"site","_id":"ckld5jknh000gqco8a5sha6vp"},{"name":"乱语 读书","_id":"ckld5jkni000kqco8253t715h"},{"name":"linux bash","_id":"ckld5jkni000mqco80ump4uin"},{"name":"算法 乱语","_id":"ckld5jknj000oqco8bxi42txj"},{"name":"编辑器 linux","_id":"ckld5jknj000qqco8829i65ei"},{"name":"编译器","_id":"ckld5jknj000sqco89zsf5k0z"},{"name":"逻辑门","_id":"ckld5jknk000uqco8bbnhc9k5"},{"name":"函数式","_id":"ckld5jknl000yqco84x346k2j"},{"name":"JavaScript 乱语","_id":"ckld5jknl0010qco8dou16nev"},{"name":"bash","_id":"ckld5p1nn0000xeo8g9fb9044"},{"name":"linux","_id":"ckld5p1nt0001xeo88nm4fx4o"},{"name":"读书","_id":"ckld5wxz900027qo8gv5sd6d4"},{"name":"算法","_id":"ckld5wxzf00057qo88jcb9nad"},{"name":"编辑器","_id":"ckld5wxzh00087qo87v1v9oue"},{"name":"JavaScript","_id":"ckld5wxzk000b7qo8ewhp1cks"}]}}